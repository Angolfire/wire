{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Wire \u00b6 \u201cA man got to have a code!\u201d - Omar Little As our teams and programs grow, the variety and volume of data also grows. Success will turn your simple data models into complex ones! Whether your application is storing data to disk or transmitting it over a network, the structure and interpretation of that data should be clear. Consumers work best with data they understand! Schemas describe and document data models. If you have data, you should have a schema. Protocol Buffers \u00b6 Google\u2019s Protocol Buffers are built around a great schema language: It\u2019s cross platform and language independent. Whatever programming language you use, you\u2019ll be able to use proto schemas with your application. Proto schemas are backwards-compatible and future-proof. You can evolve your schema as your application loses old features and gains new ones. It\u2019s focused. Proto schemas describe your data models. That\u2019s it. Here\u2019s a sample message definition: syntax = \"proto3\" ; package squareup . dinosaurs ; option java_package = \"com.squareup.dinosaurs\" ; import \"squareup/geology/period.proto\" ; message Dinosaur { // Common name of this dinosaur, like \"Stegosaurus\". string name = 1 ; // URLs with images of this dinosaur. repeated string picture_urls = 2 ; squareup.geology.Period period = 5 ; } And here\u2019s an enum definition: syntax = \"proto3\" ; package squareup . geology ; option java_package = \"com.squareup.geology\" ; enum Period { // 145.5 million years ago \u2014 66.0 million years ago. CRETACEOUS = 0 ; // 201.3 million years ago \u2014 145.0 million years ago. JURASSIC = 1 ; // 252.17 million years ago \u2014 201.3 million years ago. TRIASSIC = 2 ; } This schema language is Protocol Buffers\u2019 best feature. You might even use it purely for documentation purposes, such as to describe a JSON API. Protocol Buffers also defines a compact binary encoding of messages that conform to the schema. This encoding is fast to encode, fast to decode, small to transmit, and small to store. The binary encoding uses numeric tags from the schema, like the 5 for period above. For example, let\u2019s encode this dinosaur: { name: \"Stegosaurus\", period: JURASSIC } The encoded value is just 15 bytes: Hex Description 0a tag: name(1), field encoding: LENGTH_DELIMITED(2). 1 << 3 | 2 0b \"Stegosaurus\".length() 53 'S' 74 't' 65 'e' 67 'g' 6f 'o' 73 's' 61 'a' 75 'u' 72 'r' 75 'u' 73 's' 28 tag: period(5), field encoding: VARINT(0). 5 << 3 | 0 02 JURASSIC(2) Why Wire? \u00b6 The Protocol Buffers schema language and binary encoding are both defined by Google. Wire is an independent implementation from Square that\u2019s specifically designed for Android and Java. For each message type defined in the schema, Wire generates an immutable model class and its builder. The generated code looks like code you\u2019d write by hand: it\u2019s documented, formatted, and simple. Wire\u2019s APIs should feel at home to programmers who like Effective Java . That said, there are some interesting design decisions in Wire: Wire messages declare public final fields instead of the usual getter methods. This cuts down on both code generated and code executed. Less code is particularly beneficial for Android programs. Wire avoids case mapping. A field declared as picture_urls in a schema yields a Java field picture_urls and not the conventional pictureUrls camel case. Though the name feels awkward at first, it\u2019s fantastic whenever you use grep or more sophisticated search tools. No more mapping when navigating between schema, Java source code, and data. It also provides a gentle reminder to calling code that proto messages are a bit special. Primitive types are always boxed. If a field is absent, its value is null . This is used for naturally optional fields, such as a dinosaur whose period is unknown. A field may also be null due to schema evolution: if tomorrow we add a carnivore boolean to our message definition, today\u2019s data won\u2019t have a value for that field. Here\u2019s the compact generated code for the Dinosaur message defined above: // Code generated by Wire protocol buffer compiler, do not edit. // Source: squareup.dinosaurs.Dinosaur in squareup/dinosaurs/dinosaur.proto package com.squareup.dinosaurs ; import com.squareup.geology.Period ; import com.squareup.wire.Message ; import com.squareup.wire.ProtoAdapter ; import com.squareup.wire.Syntax ; import com.squareup.wire.WireField ; import com.squareup.wire.internal.Internal ; import java.lang.Object ; import java.lang.Override ; import java.lang.String ; import java.util.List ; import okio.ByteString ; public final class Dinosaur extends Message < Dinosaur , Dinosaur . Builder > { public static final ProtoAdapter < Dinosaur > ADAPTER = ProtoAdapter . newMessageAdapter ( Dinosaur . class , \"type.googleapis.com/squareup.dinosaurs.Dinosaur\" , Syntax . PROTO_3 ); private static final long serialVersionUID = 0 L ; /** * Common name of this dinosaur, like \"Stegosaurus\". */ @WireField ( tag = 1 , adapter = \"com.squareup.wire.ProtoAdapter#STRING\" , label = WireField . Label . OMIT_IDENTITY ) public final String name ; /** * URLs with images of this dinosaur. */ @WireField ( tag = 2 , adapter = \"com.squareup.wire.ProtoAdapter#STRING\" , label = WireField . Label . REPEATED , jsonName = \"pictureUrls\" ) public final List < String > picture_urls ; @WireField ( tag = 5 , adapter = \"com.squareup.geology.Period#ADAPTER\" , label = WireField . Label . OMIT_IDENTITY ) public final Period period ; public Dinosaur ( String name , List < String > picture_urls , Period period ) { this ( name , picture_urls , period , ByteString . EMPTY ); } public Dinosaur ( String name , List < String > picture_urls , Period period , ByteString unknownFields ) { super ( ADAPTER , unknownFields ); if ( name == null ) { throw new IllegalArgumentException ( \"name == null\" ); } this . name = name ; this . picture_urls = Internal . immutableCopyOf ( \"picture_urls\" , picture_urls ); if ( period == null ) { throw new IllegalArgumentException ( \"period == null\" ); } this . period = period ; } @Override public Builder newBuilder () { Builder builder = new Builder (); builder . name = name ; builder . picture_urls = Internal . copyOf ( picture_urls ); builder . period = period ; builder . addUnknownFields ( unknownFields ()); return builder ; } @Override public boolean equals ( Object other ) { if ( other == this ) return true ; if ( ! ( other instanceof Dinosaur )) return false ; Dinosaur o = ( Dinosaur ) other ; return unknownFields (). equals ( o . unknownFields ()) && Internal . equals ( name , o . name ) && picture_urls . equals ( o . picture_urls ) && Internal . equals ( period , o . period ); } @Override public int hashCode () { int result = super . hashCode ; if ( result == 0 ) { result = unknownFields (). hashCode (); result = result * 37 + ( name != null ? name . hashCode () : 0 ); result = result * 37 + picture_urls . hashCode (); result = result * 37 + ( period != null ? period . hashCode () : 0 ); super . hashCode = result ; } return result ; } public static final class Builder extends Message . Builder < Dinosaur , Builder > { public String name ; public List < String > picture_urls ; public Period period ; public Builder () { name = \"\" ; picture_urls = Internal . newMutableList (); period = Period . CRETACEOUS ; } /** * Common name of this dinosaur, like \"Stegosaurus\". */ public Builder name ( String name ) { this . name = name ; return this ; } /** * URLs with images of this dinosaur. */ public Builder picture_urls ( List < String > picture_urls ) { Internal . checkElementsNotNull ( picture_urls ); this . picture_urls = picture_urls ; return this ; } public Builder period ( Period period ) { this . period = period ; return this ; } @Override public Dinosaur build () { return new Dinosaur ( name , picture_urls , period , super . buildUnknownFields ()); } } } The Java code to create and access proto models is compact and readable: Dinosaur stegosaurus = new Dinosaur . Builder () . name ( \"Stegosaurus\" ) . period ( Period . JURASSIC ) . build (); System . out . println ( \"My favorite dinosaur existed in the \" + stegosaurus . period + \" period.\" ); Each type has a corresponding ProtoAdapter that can encode a message to bytes and decode bytes back into a message. Dinosaur stegosaurus = ... byte [] stegosaurusBytes = Dinosaur . ADAPTER . encode ( stegosaurus ); byte [] tyrannosaurusBytes = ... Dinosaur tyrannosaurus = Dinosaur . ADAPTER . decode ( tyrannosaurusBytes ); When accessing a field, use Wire.get() to replace null values with the corresponding default: Period period = Wire . get ( stegosaurus . period , Dinosaur . DEFAULT_PERIOD ); This is equivalent to the following: Period period = stegosaurus.period != null ? stegosaurus.period : Dinosaur.DEFAULT_PERIOD; Wire Kotlin \u00b6 Since version 3.0.0, Wire can generate Kotlin code. See Wire Compiler & Gradle Plugin to learn how to configure your build. Kotlin is a pragmatic and expressive programming language that makes it easy to model data. Here\u2019s how we used Kotlin to model Protocol Buffers messages: Messages feel like data classes, but in fact they\u2019re not. Compiler still generates equals() , hashCode() , toString() and copy() for you. Wire does not generate componentN() functions though, we believe that destructuring declarations are not a good fit for Protocol Buffers: a change in the schema that removes or adds a field might lead to a situation when your destructuring declaration still compiles but now describes a completely different subset of fields, rendering your code incorrect. copy() is a substitute for the Builder , which is not used anymore. If your program relies on the Builder to be present, you may generate code in Java interoperability mode - Wire Compiler & Gradle Plugin explains how that works. Fields are generated as properties. While this is idiomatic in Kotlin, Java code will now have to access fields using getters. If your program relies on accessing fields directly, use Java interoperability mode - the compiler will generate @JvmField annotations for each field. The nullability of each field\u2019s type depends on its label: required , repeated and map fields get non-nullable types, whereas optional fields are of nullable types. With the exception of required fields, each field has a default value: null for optional fields, emptyList() for repeated fields, emptyMap() for map fields. Here\u2019s the same Dinosaur message in Kotlin: // Code generated by Wire protocol buffer compiler, do not edit. // Source: squareup.dinosaurs.Dinosaur in squareup/dinosaurs/dinosaur.proto package com.squareup.dinosaurs import com.squareup.geology.Period import com.squareup.wire.FieldEncoding import com.squareup.wire.Message import com.squareup.wire.ProtoAdapter import com.squareup.wire.ProtoReader import com.squareup.wire.ProtoWriter import com.squareup.wire.Syntax.PROTO_3 import com.squareup.wire.WireField import com.squareup.wire.internal.immutableCopyOf import com.squareup.wire.internal.sanitize import kotlin.Any import kotlin.AssertionError import kotlin.Boolean import kotlin.Deprecated import kotlin.DeprecationLevel import kotlin.Int import kotlin.Long import kotlin.Nothing import kotlin.String import kotlin.collections.List import kotlin.hashCode import kotlin.jvm.JvmField import okio.ByteString class Dinosaur ( /** * Common name of this dinosaur, like \"Stegosaurus\". */ @field : WireField ( tag = 1 , adapter = \"com.squareup.wire.ProtoAdapter#STRING\" , label = WireField . Label . OMIT_IDENTITY ) val name : String = \"\" , picture_urls : List < String > = emptyList (), @field : WireField ( tag = 5 , adapter = \"com.squareup.geology.Period#ADAPTER\" , label = WireField . Label . OMIT_IDENTITY ) val period : Period = Period . CRETACEOUS , unknownFields : ByteString = ByteString . EMPTY ) : Message < Dinosaur , Nothing >( ADAPTER , unknownFields ) { /** * URLs with images of this dinosaur. */ @field : WireField ( tag = 2 , adapter = \"com.squareup.wire.ProtoAdapter#STRING\" , label = WireField . Label . REPEATED , jsonName = \"pictureUrls\" ) val picture_urls : List < String > = immutableCopyOf ( \"picture_urls\" , picture_urls ) @Deprecated ( message = \"Shouldn't be used in Kotlin\" , level = DeprecationLevel . HIDDEN ) override fun newBuilder (): Nothing = throw AssertionError () override fun equals ( other : Any ?): Boolean { if ( other === this ) return true if ( other ! is Dinosaur ) return false if ( unknownFields != other . unknownFields ) return false if ( name != other . name ) return false if ( picture_urls != other . picture_urls ) return false if ( period != other . period ) return false return true } override fun hashCode (): Int { var result = super . hashCode if ( result == 0 ) { result = unknownFields . hashCode () result = result * 37 + name . hashCode () result = result * 37 + picture_urls . hashCode () result = result * 37 + period . hashCode () super . hashCode = result } return result } override fun toString (): String { val result = mutableListOf < String >() result += \"\"\"name=${sanitize(name)}\"\"\" if ( picture_urls . isNotEmpty ()) result += \"\"\"picture_urls=${sanitize(picture_urls)}\"\"\" result += \"\"\"period=$period\"\"\" return result . joinToString ( prefix = \"Dinosaur{\" , separator = \", \" , postfix = \"}\" ) } fun copy ( name : String = this . name , picture_urls : List < String > = this . picture_urls , period : Period = this . period , unknownFields : ByteString = this . unknownFields ): Dinosaur = Dinosaur ( name , picture_urls , period , unknownFields ) companion object { @JvmField val ADAPTER : ProtoAdapter < Dinosaur > = object : ProtoAdapter < Dinosaur >( FieldEncoding . LENGTH_DELIMITED , Dinosaur :: class , \"type.googleapis.com/squareup.dinosaurs.Dinosaur\" , PROTO_3 , null ) { override fun encodedSize ( value : Dinosaur ): Int { var size = value . unknownFields . size if ( value . name != \"\" ) size += ProtoAdapter . STRING . encodedSizeWithTag ( 1 , value . name ) size += ProtoAdapter . STRING . asRepeated (). encodedSizeWithTag ( 2 , value . picture_urls ) if ( value . period != Period . CRETACEOUS ) size += Period . ADAPTER . encodedSizeWithTag ( 5 , value . period ) return size } override fun encode ( writer : ProtoWriter , value : Dinosaur ) { if ( value . name != \"\" ) ProtoAdapter . STRING . encodeWithTag ( writer , 1 , value . name ) ProtoAdapter . STRING . asRepeated (). encodeWithTag ( writer , 2 , value . picture_urls ) if ( value . period != Period . CRETACEOUS ) Period . ADAPTER . encodeWithTag ( writer , 5 , value . period ) writer . writeBytes ( value . unknownFields ) } override fun decode ( reader : ProtoReader ): Dinosaur { var name : String = \"\" val picture_urls = mutableListOf < String >() var period : Period = Period . CRETACEOUS val unknownFields = reader . forEachTag { tag -> when ( tag ) { 1 -> name = ProtoAdapter . STRING . decode ( reader ) 2 -> picture_urls . add ( ProtoAdapter . STRING . decode ( reader )) 5 -> try { period = Period . ADAPTER . decode ( reader ) } catch ( e : ProtoAdapter . EnumConstantNotFoundException ) { reader . addUnknownField ( tag , FieldEncoding . VARINT , e . value . toLong ()) } else -> reader . readUnknownField ( tag ) } } return Dinosaur ( name = name , picture_urls = picture_urls , period = period , unknownFields = unknownFields ) } override fun redact ( value : Dinosaur ): Dinosaur = value . copy ( unknownFields = ByteString . EMPTY ) } private const val serialVersionUID : Long = 0L } } Creating and accessing proto models is easy: val stegosaurus = Dinosaur ( name = \"Stegosaurus\" , period = Period . JURASSIC ) println ( \"My favorite dinosaur existed in the ${stegosaurus.period} period.\" ) Here\u2019s how you can modify the object to add extra fields: val stegosaurus = stegosaurus . copy ( picture_urls = listOf ( \"https://www.flickr.com/photos/tags/Stegosaurus/\" ) ) println ( \"Here are some photos of ${stegosaurus.name}: ${stegosaurus.picture_urls}\" ) Wire gRPC \u00b6 Since version 3.0.0, Wire supports gRPC . Generating Code With Wire \u00b6 Wire can read .proto files from the local file system and from within .jar files. The compiler can optionally prune your schema to a subset of root types and their transitive dependencies. This is useful when sharing a schema between projects: a Java service and Android app may each use a subset of a larger shared schema. For more info on how to get started, see Wire Compiler & Gradle Plugin . If you don\u2019t use Gradle, the compiler also has a command line interface. Just substitute wire-compiler-VERSION-jar-with-dependencies.jar with the path to your jar. Download the latest precompiled jar. % java -jar wire-compiler-VERSION-jar-with-dependencies.jar \\ --proto_path=src/main/proto \\ --java_out=out \\ squareup/dinosaurs/dinosaur.proto \\ squareup/geology/period.proto Writing com.squareup.dinosaurs.Dinosaur to out Writing com.squareup.geology.Period to out Supplying the --android flag to the compiler causes Wire messages to implement Parcelable . If you use Proguard, then you need to add keep rules. The simplest option is to tell Proguard not to touch the Wire runtime library and your generated protocol buffers (of course these simple rules will miss opportunities to shrink and optimize the code): -keep class com.squareup.wire.** { *; } -keep class com.yourcompany.yourgeneratedcode.** { *; } Get Wire \u00b6 The wire-runtime package contains runtime support libraries that must be included in applications that use Wire-generated code. With Maven: <dependency> <groupId> com.squareup.wire </groupId> <artifactId> wire-runtime </artifactId> <version> 3.7.0 </version> </dependency> With Gradle: api \"com.squareup.wire:wire-runtime:3.7.0\" Snapshots of the development version are available in Sonatype\u2019s snapshots repository . Unsupported \u00b6 Wire does not support: Groups - they are skipped when parsing binary input data Wire supports custom options on messages and fields. Other custom options are ignored. Pass --excludes=google.protobuf.* to the compiler to omit options from the generated code. Further Documentation \u00b6 See Google\u2019s excellent documentation on the structure and syntax of proto schemas.","title":"Overview"},{"location":"#wire","text":"\u201cA man got to have a code!\u201d - Omar Little As our teams and programs grow, the variety and volume of data also grows. Success will turn your simple data models into complex ones! Whether your application is storing data to disk or transmitting it over a network, the structure and interpretation of that data should be clear. Consumers work best with data they understand! Schemas describe and document data models. If you have data, you should have a schema.","title":"Wire"},{"location":"#protocol-buffers","text":"Google\u2019s Protocol Buffers are built around a great schema language: It\u2019s cross platform and language independent. Whatever programming language you use, you\u2019ll be able to use proto schemas with your application. Proto schemas are backwards-compatible and future-proof. You can evolve your schema as your application loses old features and gains new ones. It\u2019s focused. Proto schemas describe your data models. That\u2019s it. Here\u2019s a sample message definition: syntax = \"proto3\" ; package squareup . dinosaurs ; option java_package = \"com.squareup.dinosaurs\" ; import \"squareup/geology/period.proto\" ; message Dinosaur { // Common name of this dinosaur, like \"Stegosaurus\". string name = 1 ; // URLs with images of this dinosaur. repeated string picture_urls = 2 ; squareup.geology.Period period = 5 ; } And here\u2019s an enum definition: syntax = \"proto3\" ; package squareup . geology ; option java_package = \"com.squareup.geology\" ; enum Period { // 145.5 million years ago \u2014 66.0 million years ago. CRETACEOUS = 0 ; // 201.3 million years ago \u2014 145.0 million years ago. JURASSIC = 1 ; // 252.17 million years ago \u2014 201.3 million years ago. TRIASSIC = 2 ; } This schema language is Protocol Buffers\u2019 best feature. You might even use it purely for documentation purposes, such as to describe a JSON API. Protocol Buffers also defines a compact binary encoding of messages that conform to the schema. This encoding is fast to encode, fast to decode, small to transmit, and small to store. The binary encoding uses numeric tags from the schema, like the 5 for period above. For example, let\u2019s encode this dinosaur: { name: \"Stegosaurus\", period: JURASSIC } The encoded value is just 15 bytes: Hex Description 0a tag: name(1), field encoding: LENGTH_DELIMITED(2). 1 << 3 | 2 0b \"Stegosaurus\".length() 53 'S' 74 't' 65 'e' 67 'g' 6f 'o' 73 's' 61 'a' 75 'u' 72 'r' 75 'u' 73 's' 28 tag: period(5), field encoding: VARINT(0). 5 << 3 | 0 02 JURASSIC(2)","title":"Protocol Buffers"},{"location":"#why-wire","text":"The Protocol Buffers schema language and binary encoding are both defined by Google. Wire is an independent implementation from Square that\u2019s specifically designed for Android and Java. For each message type defined in the schema, Wire generates an immutable model class and its builder. The generated code looks like code you\u2019d write by hand: it\u2019s documented, formatted, and simple. Wire\u2019s APIs should feel at home to programmers who like Effective Java . That said, there are some interesting design decisions in Wire: Wire messages declare public final fields instead of the usual getter methods. This cuts down on both code generated and code executed. Less code is particularly beneficial for Android programs. Wire avoids case mapping. A field declared as picture_urls in a schema yields a Java field picture_urls and not the conventional pictureUrls camel case. Though the name feels awkward at first, it\u2019s fantastic whenever you use grep or more sophisticated search tools. No more mapping when navigating between schema, Java source code, and data. It also provides a gentle reminder to calling code that proto messages are a bit special. Primitive types are always boxed. If a field is absent, its value is null . This is used for naturally optional fields, such as a dinosaur whose period is unknown. A field may also be null due to schema evolution: if tomorrow we add a carnivore boolean to our message definition, today\u2019s data won\u2019t have a value for that field. Here\u2019s the compact generated code for the Dinosaur message defined above: // Code generated by Wire protocol buffer compiler, do not edit. // Source: squareup.dinosaurs.Dinosaur in squareup/dinosaurs/dinosaur.proto package com.squareup.dinosaurs ; import com.squareup.geology.Period ; import com.squareup.wire.Message ; import com.squareup.wire.ProtoAdapter ; import com.squareup.wire.Syntax ; import com.squareup.wire.WireField ; import com.squareup.wire.internal.Internal ; import java.lang.Object ; import java.lang.Override ; import java.lang.String ; import java.util.List ; import okio.ByteString ; public final class Dinosaur extends Message < Dinosaur , Dinosaur . Builder > { public static final ProtoAdapter < Dinosaur > ADAPTER = ProtoAdapter . newMessageAdapter ( Dinosaur . class , \"type.googleapis.com/squareup.dinosaurs.Dinosaur\" , Syntax . PROTO_3 ); private static final long serialVersionUID = 0 L ; /** * Common name of this dinosaur, like \"Stegosaurus\". */ @WireField ( tag = 1 , adapter = \"com.squareup.wire.ProtoAdapter#STRING\" , label = WireField . Label . OMIT_IDENTITY ) public final String name ; /** * URLs with images of this dinosaur. */ @WireField ( tag = 2 , adapter = \"com.squareup.wire.ProtoAdapter#STRING\" , label = WireField . Label . REPEATED , jsonName = \"pictureUrls\" ) public final List < String > picture_urls ; @WireField ( tag = 5 , adapter = \"com.squareup.geology.Period#ADAPTER\" , label = WireField . Label . OMIT_IDENTITY ) public final Period period ; public Dinosaur ( String name , List < String > picture_urls , Period period ) { this ( name , picture_urls , period , ByteString . EMPTY ); } public Dinosaur ( String name , List < String > picture_urls , Period period , ByteString unknownFields ) { super ( ADAPTER , unknownFields ); if ( name == null ) { throw new IllegalArgumentException ( \"name == null\" ); } this . name = name ; this . picture_urls = Internal . immutableCopyOf ( \"picture_urls\" , picture_urls ); if ( period == null ) { throw new IllegalArgumentException ( \"period == null\" ); } this . period = period ; } @Override public Builder newBuilder () { Builder builder = new Builder (); builder . name = name ; builder . picture_urls = Internal . copyOf ( picture_urls ); builder . period = period ; builder . addUnknownFields ( unknownFields ()); return builder ; } @Override public boolean equals ( Object other ) { if ( other == this ) return true ; if ( ! ( other instanceof Dinosaur )) return false ; Dinosaur o = ( Dinosaur ) other ; return unknownFields (). equals ( o . unknownFields ()) && Internal . equals ( name , o . name ) && picture_urls . equals ( o . picture_urls ) && Internal . equals ( period , o . period ); } @Override public int hashCode () { int result = super . hashCode ; if ( result == 0 ) { result = unknownFields (). hashCode (); result = result * 37 + ( name != null ? name . hashCode () : 0 ); result = result * 37 + picture_urls . hashCode (); result = result * 37 + ( period != null ? period . hashCode () : 0 ); super . hashCode = result ; } return result ; } public static final class Builder extends Message . Builder < Dinosaur , Builder > { public String name ; public List < String > picture_urls ; public Period period ; public Builder () { name = \"\" ; picture_urls = Internal . newMutableList (); period = Period . CRETACEOUS ; } /** * Common name of this dinosaur, like \"Stegosaurus\". */ public Builder name ( String name ) { this . name = name ; return this ; } /** * URLs with images of this dinosaur. */ public Builder picture_urls ( List < String > picture_urls ) { Internal . checkElementsNotNull ( picture_urls ); this . picture_urls = picture_urls ; return this ; } public Builder period ( Period period ) { this . period = period ; return this ; } @Override public Dinosaur build () { return new Dinosaur ( name , picture_urls , period , super . buildUnknownFields ()); } } } The Java code to create and access proto models is compact and readable: Dinosaur stegosaurus = new Dinosaur . Builder () . name ( \"Stegosaurus\" ) . period ( Period . JURASSIC ) . build (); System . out . println ( \"My favorite dinosaur existed in the \" + stegosaurus . period + \" period.\" ); Each type has a corresponding ProtoAdapter that can encode a message to bytes and decode bytes back into a message. Dinosaur stegosaurus = ... byte [] stegosaurusBytes = Dinosaur . ADAPTER . encode ( stegosaurus ); byte [] tyrannosaurusBytes = ... Dinosaur tyrannosaurus = Dinosaur . ADAPTER . decode ( tyrannosaurusBytes ); When accessing a field, use Wire.get() to replace null values with the corresponding default: Period period = Wire . get ( stegosaurus . period , Dinosaur . DEFAULT_PERIOD ); This is equivalent to the following: Period period = stegosaurus.period != null ? stegosaurus.period : Dinosaur.DEFAULT_PERIOD;","title":"Why Wire?"},{"location":"#wire-kotlin","text":"Since version 3.0.0, Wire can generate Kotlin code. See Wire Compiler & Gradle Plugin to learn how to configure your build. Kotlin is a pragmatic and expressive programming language that makes it easy to model data. Here\u2019s how we used Kotlin to model Protocol Buffers messages: Messages feel like data classes, but in fact they\u2019re not. Compiler still generates equals() , hashCode() , toString() and copy() for you. Wire does not generate componentN() functions though, we believe that destructuring declarations are not a good fit for Protocol Buffers: a change in the schema that removes or adds a field might lead to a situation when your destructuring declaration still compiles but now describes a completely different subset of fields, rendering your code incorrect. copy() is a substitute for the Builder , which is not used anymore. If your program relies on the Builder to be present, you may generate code in Java interoperability mode - Wire Compiler & Gradle Plugin explains how that works. Fields are generated as properties. While this is idiomatic in Kotlin, Java code will now have to access fields using getters. If your program relies on accessing fields directly, use Java interoperability mode - the compiler will generate @JvmField annotations for each field. The nullability of each field\u2019s type depends on its label: required , repeated and map fields get non-nullable types, whereas optional fields are of nullable types. With the exception of required fields, each field has a default value: null for optional fields, emptyList() for repeated fields, emptyMap() for map fields. Here\u2019s the same Dinosaur message in Kotlin: // Code generated by Wire protocol buffer compiler, do not edit. // Source: squareup.dinosaurs.Dinosaur in squareup/dinosaurs/dinosaur.proto package com.squareup.dinosaurs import com.squareup.geology.Period import com.squareup.wire.FieldEncoding import com.squareup.wire.Message import com.squareup.wire.ProtoAdapter import com.squareup.wire.ProtoReader import com.squareup.wire.ProtoWriter import com.squareup.wire.Syntax.PROTO_3 import com.squareup.wire.WireField import com.squareup.wire.internal.immutableCopyOf import com.squareup.wire.internal.sanitize import kotlin.Any import kotlin.AssertionError import kotlin.Boolean import kotlin.Deprecated import kotlin.DeprecationLevel import kotlin.Int import kotlin.Long import kotlin.Nothing import kotlin.String import kotlin.collections.List import kotlin.hashCode import kotlin.jvm.JvmField import okio.ByteString class Dinosaur ( /** * Common name of this dinosaur, like \"Stegosaurus\". */ @field : WireField ( tag = 1 , adapter = \"com.squareup.wire.ProtoAdapter#STRING\" , label = WireField . Label . OMIT_IDENTITY ) val name : String = \"\" , picture_urls : List < String > = emptyList (), @field : WireField ( tag = 5 , adapter = \"com.squareup.geology.Period#ADAPTER\" , label = WireField . Label . OMIT_IDENTITY ) val period : Period = Period . CRETACEOUS , unknownFields : ByteString = ByteString . EMPTY ) : Message < Dinosaur , Nothing >( ADAPTER , unknownFields ) { /** * URLs with images of this dinosaur. */ @field : WireField ( tag = 2 , adapter = \"com.squareup.wire.ProtoAdapter#STRING\" , label = WireField . Label . REPEATED , jsonName = \"pictureUrls\" ) val picture_urls : List < String > = immutableCopyOf ( \"picture_urls\" , picture_urls ) @Deprecated ( message = \"Shouldn't be used in Kotlin\" , level = DeprecationLevel . HIDDEN ) override fun newBuilder (): Nothing = throw AssertionError () override fun equals ( other : Any ?): Boolean { if ( other === this ) return true if ( other ! is Dinosaur ) return false if ( unknownFields != other . unknownFields ) return false if ( name != other . name ) return false if ( picture_urls != other . picture_urls ) return false if ( period != other . period ) return false return true } override fun hashCode (): Int { var result = super . hashCode if ( result == 0 ) { result = unknownFields . hashCode () result = result * 37 + name . hashCode () result = result * 37 + picture_urls . hashCode () result = result * 37 + period . hashCode () super . hashCode = result } return result } override fun toString (): String { val result = mutableListOf < String >() result += \"\"\"name=${sanitize(name)}\"\"\" if ( picture_urls . isNotEmpty ()) result += \"\"\"picture_urls=${sanitize(picture_urls)}\"\"\" result += \"\"\"period=$period\"\"\" return result . joinToString ( prefix = \"Dinosaur{\" , separator = \", \" , postfix = \"}\" ) } fun copy ( name : String = this . name , picture_urls : List < String > = this . picture_urls , period : Period = this . period , unknownFields : ByteString = this . unknownFields ): Dinosaur = Dinosaur ( name , picture_urls , period , unknownFields ) companion object { @JvmField val ADAPTER : ProtoAdapter < Dinosaur > = object : ProtoAdapter < Dinosaur >( FieldEncoding . LENGTH_DELIMITED , Dinosaur :: class , \"type.googleapis.com/squareup.dinosaurs.Dinosaur\" , PROTO_3 , null ) { override fun encodedSize ( value : Dinosaur ): Int { var size = value . unknownFields . size if ( value . name != \"\" ) size += ProtoAdapter . STRING . encodedSizeWithTag ( 1 , value . name ) size += ProtoAdapter . STRING . asRepeated (). encodedSizeWithTag ( 2 , value . picture_urls ) if ( value . period != Period . CRETACEOUS ) size += Period . ADAPTER . encodedSizeWithTag ( 5 , value . period ) return size } override fun encode ( writer : ProtoWriter , value : Dinosaur ) { if ( value . name != \"\" ) ProtoAdapter . STRING . encodeWithTag ( writer , 1 , value . name ) ProtoAdapter . STRING . asRepeated (). encodeWithTag ( writer , 2 , value . picture_urls ) if ( value . period != Period . CRETACEOUS ) Period . ADAPTER . encodeWithTag ( writer , 5 , value . period ) writer . writeBytes ( value . unknownFields ) } override fun decode ( reader : ProtoReader ): Dinosaur { var name : String = \"\" val picture_urls = mutableListOf < String >() var period : Period = Period . CRETACEOUS val unknownFields = reader . forEachTag { tag -> when ( tag ) { 1 -> name = ProtoAdapter . STRING . decode ( reader ) 2 -> picture_urls . add ( ProtoAdapter . STRING . decode ( reader )) 5 -> try { period = Period . ADAPTER . decode ( reader ) } catch ( e : ProtoAdapter . EnumConstantNotFoundException ) { reader . addUnknownField ( tag , FieldEncoding . VARINT , e . value . toLong ()) } else -> reader . readUnknownField ( tag ) } } return Dinosaur ( name = name , picture_urls = picture_urls , period = period , unknownFields = unknownFields ) } override fun redact ( value : Dinosaur ): Dinosaur = value . copy ( unknownFields = ByteString . EMPTY ) } private const val serialVersionUID : Long = 0L } } Creating and accessing proto models is easy: val stegosaurus = Dinosaur ( name = \"Stegosaurus\" , period = Period . JURASSIC ) println ( \"My favorite dinosaur existed in the ${stegosaurus.period} period.\" ) Here\u2019s how you can modify the object to add extra fields: val stegosaurus = stegosaurus . copy ( picture_urls = listOf ( \"https://www.flickr.com/photos/tags/Stegosaurus/\" ) ) println ( \"Here are some photos of ${stegosaurus.name}: ${stegosaurus.picture_urls}\" )","title":"Wire Kotlin"},{"location":"#wire-grpc","text":"Since version 3.0.0, Wire supports gRPC .","title":"Wire gRPC"},{"location":"#generating-code-with-wire","text":"Wire can read .proto files from the local file system and from within .jar files. The compiler can optionally prune your schema to a subset of root types and their transitive dependencies. This is useful when sharing a schema between projects: a Java service and Android app may each use a subset of a larger shared schema. For more info on how to get started, see Wire Compiler & Gradle Plugin . If you don\u2019t use Gradle, the compiler also has a command line interface. Just substitute wire-compiler-VERSION-jar-with-dependencies.jar with the path to your jar. Download the latest precompiled jar. % java -jar wire-compiler-VERSION-jar-with-dependencies.jar \\ --proto_path=src/main/proto \\ --java_out=out \\ squareup/dinosaurs/dinosaur.proto \\ squareup/geology/period.proto Writing com.squareup.dinosaurs.Dinosaur to out Writing com.squareup.geology.Period to out Supplying the --android flag to the compiler causes Wire messages to implement Parcelable . If you use Proguard, then you need to add keep rules. The simplest option is to tell Proguard not to touch the Wire runtime library and your generated protocol buffers (of course these simple rules will miss opportunities to shrink and optimize the code): -keep class com.squareup.wire.** { *; } -keep class com.yourcompany.yourgeneratedcode.** { *; }","title":"Generating Code With Wire"},{"location":"#get-wire","text":"The wire-runtime package contains runtime support libraries that must be included in applications that use Wire-generated code. With Maven: <dependency> <groupId> com.squareup.wire </groupId> <artifactId> wire-runtime </artifactId> <version> 3.7.0 </version> </dependency> With Gradle: api \"com.squareup.wire:wire-runtime:3.7.0\" Snapshots of the development version are available in Sonatype\u2019s snapshots repository .","title":"Get Wire"},{"location":"#unsupported","text":"Wire does not support: Groups - they are skipped when parsing binary input data Wire supports custom options on messages and fields. Other custom options are ignored. Pass --excludes=google.protobuf.* to the compiler to omit options from the generated code.","title":"Unsupported"},{"location":"#further-documentation","text":"See Google\u2019s excellent documentation on the structure and syntax of proto schemas.","title":"Further Documentation"},{"location":"changelog/","text":"Change Log \u00b6 Version 4.0.0-alpha.1 \u00b6 2021-05-01 Kotlin + Java New: GrpcClient.Builder.minMessageToCompress() configures which messages are compressed. This will completely disable compression if the size is Long.MAX_VALUE . We\u2019ve seen problems where some Golang gRPC servers don\u2019t support compression; setting this to MAX_VALUE is necessary to interop with them. New: SchemaReflector is our initial implementation of the gRPC Server Reflection Protocol . Note that although we implement the business logic of gRPC reflection, we don\u2019t offer a gRPC server built into Wire. New: Support rpcRole = 'none' in the Gradle plugin to generate neither client nor server code. Fix: Generate @Deprecated annotations on deprecated messages, fields, enums, and enum constants. Fix: Update the Wire Gradle plugin to register generated .java sources with the Java compiler. Previously this was broken if the Kotlin plugin was installed. Fix: Use Gradle\u2019s logging mechanism to reduce output when Wire generates code. Fix: Update the Wire Gradle plugin to clear the output directory before generating code. This prevents the need to do a clean build after removing a message type. Fix: Permit values other than 0 and 1 when decoding protobuf-encoded booleans. Previously we threw an IOException for other values; now all non-zero values are true. Upgrade: Okio 3.0.0-alpha.3 . We now use Okio 3\u2019s FileSystem in SchemaLoader , which makes it easier to load .proto files from the classpath. Swift : New: Support Timestamp and Duration . Fix: Throw an error when encountering an unexpected ProtoReader.beginMessage() rather than calling fatalError() . Version 3.7.0 \u00b6 2021-03-25 New: srcProject(\":project-name\") makes it easier to depend on .proto files of other projects. Fix: Don\u2019t require source that .proto directories exist at Gradle plugin configuration time. This was preventing Wire from using other tasks\u2019 outputs as its inputs. Fix: Don\u2019t fail if options have a . prefix. Version 3.6.1 \u00b6 2021-03-09 Fix: The Wire Gradle plugin now supports Java only Android projects. Fix: In the Wire Gradle plugin, sourcePath will now include only protos defined with include if the option is present. It used to include all existing .proto files even if include was used. New: Full support Optional Int64 and UInt64 for JSONString in Swift. Version 3.6.0 \u00b6 2021-02-08 New: Automatically add a dependency when a protoPath or protoSource depends on a project. New: protoPath and protoSource dependencies are now not transitive by default. New: New protoLibrary option for the Wire Gradle plugin. Configuring a project as a protoLibrary will cause the generated .jar file to include .proto sources. New: Code generation for plain gRPC server. The Kotlin target now has a new grpcServerCompatible option which if set to true will generate gRPC server-compatible classes. New: Introduce GrpcException . New: Add GrpcMethod tag to the request. New: Adds redacting support for Moshi JSON adapters. New: Publish plugin marker for Gradle plugin. Fix: Escape square brackets in Kotlin generated code documentation. Fix: Improved proto parsing performance. Version 3.5.0 \u00b6 2020-10-27 New: Wire Gradle plugin improvements: A task is now created for each available sources (main, Android variants, etc). The wire-runtime dependency is automatically added. Generated code directories are automatically added into their module\u2019s source sets. New: Wire\u2019s proto parser now knows about oneOfOptions . New: Wire will throw when two enum constants are ambiguous, like ZERO and zero . New: Bytes options are not eligible anymore as annotation members. Fix: Optional fields in proto3 are now generated as nullable fields. Fix: JSON camel-casing is updated to fit latest protobuf specifications. Fix: Exception messages when gRPC fails have been improved. Fix: Allow ; as entry separator in option maps. Fix: Enum constants are now properly escaped when conflicting with keywords of their generated target platform. Fix: Update to KotlinPoet 1.7.2 which makes a lot of change in how Kotlin code is generated. Version 3.4.0 \u00b6 2020-09-24 New: Stop emitting enum constant options as fields for Kotlin. New: The Wire Gradle plugin task is now cacheable. New: New GrpcCall function to help implement fakes. New: Change GrpcStreamingCall.execute() to support structured concurrency. Version 3.3.0 \u00b6 2020-09-14 New: Proto3 support! This includes the new behaviors, the new types, and the JSON. New: Swift support for proto2 schemas. The details are in our blog post . New: Wire will now throw an error when: two generated files end up overriding each other, imports form a cycle, packages form a cycle. This can be turned off with the flag permitPackageCycles , an option within the source set cannot be resolved, there are name duplications of members in a message, or of rpcs in a service, a map is used as an extension. New: Support for the json_name pseudo option. New: The wire_package file option allows one to set the JVM package where classes generated from the concerned file will be placed. wire_package takes precedence over java_package . New: Lists and maps in Kotlin generated code are now immutable. New: Support UTF-8 with BOM in proto files. New: wire.since and wire.until have been renamed with the prefix constant_ for EnumValueOptions . New: Wire generates 1) annotations for options which 2) gets assigned to the generated code where appropriate. Both behavior can be turn on or off via the flags: emitDeclaredOptions : True to emit types for options declared on messages, fields, etc. Default to true, emitAppliedOptions : True to emit annotations for options applied on messages, fields, etc. Default to false. Fix: Recursive map values. Fix: Long expressions in equals and encodedSize functions. Version 3.2.2 \u00b6 2020-05-15 Fix: JSON serialization correctly emits all values. Version 3.2.1 \u00b6 2020-05-02 New: onlyVersion option on the Wire Gradle plugin to target a unique version. By and large, service code that supports many clients would target ranges via sinceVersion and untilVersion , while client code would target a unique version via onlyVersion . New: Support for optional fields in Proto3. Fix: Restored the GrpcClient.create API to create implementations for gRPC interfaces. Version 3.2.0 \u00b6 2020-04-23 New: wire.since and wire.until options on members and enum values. You can prune fields or constants using these two options. When generating code with the Wire Gradle plugin, define sinceVersion and/or untilVersion to scope the generated code. New: Messages\u2019 toString method on Kotlin and Java now escape string values for easy parsing. Fix: Link the entire descriptor.proto every time when building the Schema . Fix: Properly handle members named after keywords of the target language for both Java and Kotlin. Fix: Use the declared name for keys in JSON when emitting/reading keyword named members. Fix: Generated Kotlin code is malformed for long identifiers. Fix: Make the Wire Gradle plugin compatible with instant execution. Version 3.1.0 \u00b6 2020-02-06 This release includes major non-backwards-compatible API changes to the wire-schema module. This will break tools that use Wire\u2019s schema modeling as a standalone library. We are making big changes to this component and we sacrificed API compatibility to accelerate these improvements. New: proto { ... } target in the Wire Gradle plugin. Use this to perform basic source code transformations on collections of .proto files. We use it to prune large collections of protos to just the subset used by the application. Fix: Support all forms of reserved extensions, such as extensions 1, 3 to 5, 7; . Fix: Don\u2019t re-generate source files when their .proto files haven\u2019t changed. New: includes , excludes , root , and prune give precedence to the most precise rule. Previously excludes always took precedence over includes , and prune always took precedence over root . Fix: Generate non-instantiable class for enclosing types in Kotlin. These are emitted when a nested type is retained but its enclosing type is pruned. Fix: Do not fail to build when the profile cannot find a dependency. Version 3.0.3 \u00b6 2019-12-23 Starting with this version the Wire Maven plugin is no longer maintained and has been removed from the repository. New: Support for custom options in Kotlin. New: Kotlin 1.3.61. New: Add support for custom targets in WireRun and the Gradle plugin. New: Improve schema evaluation algorithm when loading separate sourcePath and protoPath . New: Lazy loading of protoPath contents. New: Make it possible to customize Gradle plugin\u2019s configurations. New: Make it possible to customize Gradle plugin\u2019s generateProtos task. Fix: Use correct ProtoAdapter for packed fields in Kotlin. Fix: Properly handle name clashes between fields and enclosing types. Fix: Preserve the package name on files loaded from protoPath . Fix: ProtoPruner: Properly evaluate Pruner\u2019s reachable objects. Fix: ProtoPruner: Ensure --excludes properly prunes options. Fix: ProtoPruner: Keep used ServiceOptions and MethodOptions when pruning. Version 3.0.2 \u00b6 2019-11-22 Fix: Generate correct unknownFields code if a message field\u2019s name is a Kotlin keyword. Fix: Properly handle unknown enum values in Kotlin. Fix: ProtoPruner: retain used extends. Fix: ProtoPruner: retain only used imports. Fix: ProtoPruner: use NewSchemaLoader that correctly loads google.protobuf.descriptor. Fix: ProtoPruner: print default values for scalar types for proto target within the options. Fix: ProtoPruner: fix handling of options. Fix: ProtoPruner: print default values for enums. Version 3.0.1 \u00b6 2019-10-18 Fix: Use the correct adapter path for gRPC endpoints that customize the Java package. Fix: Preserve documentation in generated services. Fix: Fail to generate code if the source directory doesn\u2019t exist. Fix: Make Kotlin consistent with Java for unknown enum constants. We now treat these as unknown fields rather than failing to decode the enclosing message. Version 3.0.0 \u00b6 2019-10-07 Update: All gRPC networking calls are encoded in gzip. Version 3.0.0-rc03 \u00b6 2019-10-04 Fix: Update dependency to a stable version, 2.4.1 of Okio. Version 3.0.0-rc02 \u00b6 2019-10-01 Kotlin \u00b6 Fix: Nullify other oneof fields in Builder setters in Kotlin interop. Fix: Use unknownFields in hashCode() . Fix: Remove withoutUnknownFields() from Kotlin. gRPC \u00b6 Update: Total rewrite of the generated interfaces for clients: Introduce two interfaces, GrpcCall for simple RPCs, and GrpcStreamingCall fox duplex ones. Both will provide blocking and suspending API, including a reference to the underlying OkHttp Call object and its timeout. Fix: Send stream cancels from clients. Misc \u00b6 New: Changes printing of options and enums: No empty lines between options and fields for enums. Print options on new lines only when more than one. Fix: Don\u2019t cache Message\u2019s hash code on Native. Fix: Fix handling of map values in FieldBinding . Fix: Fix import fails on windows due to path separator. Fix: Don\u2019t emit proto2 sources for proto3 syntax. Version 3.0.0-rc01 \u00b6 2019-08-02 Compiler + Gradle plugin \u00b6 New: Support includes on Maven coordinate dependencies. New: Track includes separately for source vs proto paths. New: Follow symlinks when building. New: Change the Gradle plugin to track targets as a list. New: Includes and Excludes for Wire targets. New: Print errors on ambiguous and missing imports. Fix: Fix a bug where protopath Maven resources weren\u2019t working. Fix: Don\u2019t reuse source dependencies as protopath dependencies. Fix: Fix equals() implementation for messages with no fields. Kotlin \u00b6 New: Move Wire.kt into jvmMain to discourage its use in common Kotlin code. New: Make Message.adapter a val . New: Optimize decode() code for protos with no fields. New: Update supported Native platforms. New: Make Message.unknownFields property non-nullable. New: Make Message.unknownFields a val . Fix: Don\u2019t use KClass.simpleName to avoid needing kotlin-reflect dependency. Fix: Use kotlin.UnsupportedOperationException in generated code. gRPC \u00b6 New: Introduce MessageSource and MessageSink interfaces in wire-runtime . New: Honor Java package names in Wire gRPC services. New: Make PipeDuplexRequestBody internal. Fix: Workaround for @Generated annotation on Java 9+. Fix: Fix types for blocking APIs. Misc \u00b6 Fix: Fix deserializing null values in Gson adapter. Fix: Change wire-runtime artifact names to preserve 2.x compatibility. Version 3.0.0-alpha03 \u00b6 2019-06-22 Similar to alpha02, but with proper wire-runtime multiplatform artifacts. Version 3.0.0-alpha02 \u00b6 2019-06-21 New: Experimental multiplatform runtime. Starting with this version, wire-runtime is published as a multiplatform Kotlin artifact. While the JVM artifact is binary- and behavior-compatible with 3.0.0-alpha01, artifacts for other platforms may not work correctly at this point. The artifact name for the JVM artifact has been changed to wire-runtime-jvm : now, in order to depend on the multiplatform runtime, use the following Gradle dependency declaration: api \"com.squareup.wire:wire-runtime:3.0.0-alpha02\" and if you want to depend on the JVM artifact only, use the following declaration: api \"com.squareup.wire:wire-runtime-jvm:3.0.0-alpha02\" New: Generate RPCs as Single Abstract Methods. New: Add \u201csingleMethod\u201d Gradle plugin configuration for services. New: Add \u201cblockingServices\u201d Gradle plugin configuration for services. New: Support packageless services code generation. New: Remove sealed classes-based oneof implementation. New: Don\u2019t generate a Builder for non-interop Kotlin messages. Fix: Kotlin Generator correctly generates code for Protobuf services. Fix: Improved formatting of generated Kotlin code. Fix: Generate correct adapter names for WireField annotation. Fix: Generate labels for WireField annotation. Fix: Wrap oneof error message properly. Version 3.0.0-alpha01 \u00b6 2019-03-14 New: Kotlin Generator Wire 3 can generate Kotlin data classes. To enable this feature via the command line API, pass in the --kotlin_out parameter that should specify the output directory for the generated *.kt files. Given the following simple proto: message Person { required string name = 1 ; required int32 id = 2 ; optional string email = 3 ; } the generated Kotlin code will look like the following: data class Person ( @field : WireField ( tag = 1 , adapter = \"com.squareup.wire.ProtoAdapter#STRING\" ) val name : String , @field : WireField ( tag = 2 , adapter = \"com.squareup.wire.ProtoAdapter#INT32\" ) val id : Int , @field : WireField ( tag = 3 , adapter = \"com.squareup.wire.ProtoAdapter#STRING\" ) val email : String ? = null , val unknownFields : ByteString = ByteString . EMPTY ) : Message < Person , Person . Builder >( ADAPTER , unknownFields ) { companion object { @JvmField val ADAPTER : ProtoAdapter < Person > = ... // code omitted for brevity The copy() method of a data class replaces most usages of the builder. If your code relies on the Builder , you can enable full Builder generation by passing the --java_interop parameter to the compiler. New: gRPC support In addition to generating Kotlin code from proto messages, Wire can now generate code for gRPC endpoints. Here\u2019s an example schema: service RouteGuide { // A simple RPC. // // Obtains the feature at a given position. // // A feature with an empty name is returned if there's no feature at the given // position. rpc GetFeature ( Point ) returns ( Feature ) {} } The generated code will look like the following (message protos, referenced by the schema, are omitted): interface RouteGuide : Service { @WireRpc ( path = \"/routeguide.RouteGuide/GetFeature\" , requestAdapter = \"routeguide.Point#ADAPTER\" , responseAdapter = \"routeguide.Feature#ADAPTER\" ) suspend fun GetFeature ( request : Point ): Feature } All four gRPC modes are supported: the generated code uses suspendable functions to implement non-blocking asynchronous execution. In streaming modes, ReceiveChannel and SendChannel are used to listen to asynchronous data in a non-blocking fashion. This feature works out of the box in Wire 3 compiler as long as the input file contains a gRPC schema. New: Gradle plugin Here\u2019s an example Gradle configuration: apply plugin: 'com.squareup.wire' wire { // Keeps only 'Dinosaur#name' as the root of the object graph roots 'squareup.dinosaurs.Dinosaur#name' // Keeps all fields, except 'name', in 'Dinosaur' prunes 'squareup.dinosaurs.Dinosaur#name' // Both roots and prunes in an external file rules 'rules.txt' kotlin { javaInterop true out \"${buildDir}/generated/custom\" } } The wire extension introduces the concept of compilation targets, such as kotlin and java , where each target has its own configuration properties. Multiple targets can be supplied, which benefits use cases such as migrating Java protos to Kotlin. New: Decouple the option of using Android annotations for nullability from the option of having messages implement Parcelable. New: Wire Moshi adapter for serializing proto JSON representation using the Moshi library. New: Implement support for custom enum types. New: Generate AndroidX nullability annotations instead of old support library annotations. New: Import JSR 305 and use it to mark nullability of public API. New: Allow inline multiline comments. New: Generate an empty class when a nested message is retained but its parent was pruned. New: Support rendering a ProtoFile to its schema. New: Support hexadecimal numeric literals. New: Allow custom types to be constrained with a \u2018with\u2019 clause. New: Generate a constructor which takes in a Message.Builder instead of all fields separately. New: Add location to the error message about unsupported group elements. New: Permit single files to be used on the proto path. Fix: Emit \u2018=\u2019 for syntax declaration. Fix: Don\u2019t crash when a comment has a dollar sign. Fix: Return subclass type instead of abstract parameterized type for newBuilder. Fix: Validate enum namespace in file context are unique. Version 2.2.0 \u00b6 2016-06-17 New: Support for map type in the schema, compiler, and runtime! New: AndroidMessage base class consolidates everything required for supporting Android and will now be used for generating code with --android . New: stream keyword in RPC definitions is now parsed and exposed in the schema. Fix: Nested types which are retained no longer cause their enclosing type to be retained. Instead, non-instantiable empty types will be generated for pruned enclosing types. Fix: Remove per-type Parcelable.Creator classes and instead use a single type which delegates to the message\u2019s ProtoAdapter . Fix: Retain information on redacted fields even when options were pruned. Fix: Do not generate code for handling null from list types (and now map types) which are guaranteed to never be null . Version 2.1.2 \u00b6 2016-04-15 Fix: Gson type adapter now deserializes JSON null literals to empty list for repeated fields. Version 2.1.1 \u00b6 2016-02-01 New: reserved keyword is now supported and enforced. Fix: Defer reflection-based lookup of enum method until first use to avoid class loading race conditions. Fix: Support single-quoted string literals. Fix: Adjacent string literals are not correctly concatenated. Version 2.1.0 \u00b6 2016-01-18 Empty lists of packed values were being encoded incorrectly. In Wire 2.0.x our message adapters incorrectly included empty lists for [packed=true] rather than omitting them. This is now fixed. New: Message.encode() to concisely encode a message. New: MessageAdapter.decode(ByteString) to decode a message from a byte string without an intermediate byte array. New: Wire now includes a sample code generation for service interfaces. Version 2.0.3 \u00b6 2016-01-04 New: ProtoAdapter.get overload which returns an adapter given an instance of a message. New: @Nullable annotations are emitted for optional fields when using --android . Fix: Remove the need for javac to generate synthetic accessor methods in the generated code. This results in smaller code size and less method references (for Android users). Version 2.0.2 \u00b6 2015-12-14 Fix: Exclude unknown fields when encoding JSON and drop unknown fields when parsing JSON. Fix: Ensure JSON encoding and decoding works in the default generation mode (not just --compact ) by always adding @WireField metadata to message fields. Fix: Update to JavaPoet 1.4 for more accurate generation of valid Java code. Version 2.0.1 \u00b6 2015-11-12 Fix: Do not emit case statements for aliased enum constant values. The first constant for a value will be returned when deserializing. Fix: Emit @Deprecated annotation on deprecated enum constants. Fix: Correctly prune dependencies of excluded message, enum, or service members. Previously the dependencies of an excluded member were retained despite the member itself being omitted. Version 2.0.0 \u00b6 2015-10-23 Wire 2 is a backwards-incompatible release. It makes breaking changes to the compiler, runtime, extensions, and generated code. These changes aren\u2019t made lightly as we\u2019ve endured the upgrade in our own projects! We believe the cost of migration is worth the benefits. We\u2019ve created the wire-schema library that models .proto schema definitions. This is a capable library that packs several neat features. You can load a Schema from .proto files located on the local file system, a ZIP or JAR file, or any java.nio.FileSystem like Jimfs . You can prune this schema with includes or excludes, allowing you to reuse .proto definitions with minimal code. And you can decode data directly from a schema: no code generation is necessary! We\u2019ve flattened extensions. Wire 2.0 combines the fields defined directly on messages with fields defined far away in extensions. In the generated code, extension fields look just like every other field! One limitation of this approach is that it\u2019s no longer possible to compile extensions separately from the messages they extend. For this reason we now recommend always generating all Wire code in a single step. We\u2019ve rearranged the runtime. Types related to the protocol buffers format are now prefixed Proto and types related to our implementation are prefixed Wire . To encode and decode messages you must first get an adapter either from the ADAPTER constant or from ProtoAdapter.get() . You no longer need a Wire instance! Runtime \u00b6 New ADAPTER constant on most messages gives access to encode & decode values. This replaces the encoding and decoding methods on Wire . Guard against null lists. Code that passes null to builder methods expecting a List used to accept that; now Wire throws a NullPointerException . Similarly list elements must also be non-null. New Message.newBuilder() API. This replaces the previous copy constructor on Builder . New: Message.withoutUnknownFields() strips unknown fields. Fix: Always throw ProtocolException when there are decoding problems. Fix: Stricter checking for oneof fields. Previously it was possible to create instances with multiple values set! Fix: Improve redacting of repeated fields. Fix: ProtoReader now silently unpacks packed values. Fix: ProtoReader doesn\u2019t return groups to callers. Schema & Java Generator \u00b6 The Java generator is now standalone. Use these APIs programmatically to build plugins without delegating to the command line interface. New: Prune schemas using includes and excludes. The IdentifierSet can be used to configure which types and members are retained and which are pruned. New: Encode and decode values directly from the schema. New: Improved error messages for validation. Fix: Strict imports. Fix: Detect and forbid conflicts on extension tags. Compiler \u00b6 New: Always use Wire\u2019s bundled descriptor.proto . Previously to define custom options you needed to import a potentially-inconsistent descriptor. New: Emit all types when no .proto files are explicitly specified. New: Generate code for encoding and decoding messages. The previous, reflection-based encoder and decoder are accessible with --compact . New: ServiceFactory has been removed. To generate code for your services, load a schema with wire-schema and then use a library like JavaPoet to generate your own code. The JavaGenerator class can be used to look up Java names of message types. New: Compiler will load all .proto files if none are explicitly specified. New: Load .proto files from ZIP and JAR files. New: The --android flag causes Wire messages to implement Parcelable . New: Support multiple --proto_path arguments New: The --named_files_only flag limits which .proto files yield .java files. This was the default in Wire 1.x. New: The --no_options flag has been deleted. Use --excludes=google.protobuf.* instead. Extensions \u00b6 Extensions have been flattened. Fix: Better field resolution for options. Fix: Extension fields must not be required . Version 1.8.0 \u00b6 2015-06-27 New: oneof support! Fix: Correct serialization of repeated unknown fields. Fix: Removed superfluous private modifier on enum constructor. Warning: The \u2018protoparser\u2019 library was updated to version 4.0. This changes the type passed to any ServiceWriter implementations. Version 1.7.0 \u00b6 2015-03-05 New: Messages implement Serializable . The serialized form follows protobuf encoding, so renaming fields is safe as long as tags are consistent. (Renaming classes is unsafe, however). Note that extension fields are deserialized as unknown fields. Version 1.6.1 \u00b6 2015-01-16 New: --quiet and --dry-run command-line arguments. Fix: Handle an extension registry with zero or only one item. Okio dependency bumped to 1.2.0. Version 1.6.0 \u00b6 2014-10-23 Fix: Correctly throw IOException when parsing bad input fails. Fix: Ensure emitted code references to Arrays.asList correctly compiles in some edge cases. \u2018 UNDEFINED \u2018 enum value has been removed. Version 1.5.2 \u00b6 2014-09-15 New: \u2018 UNDEFINED \u2018 enum value represents values that the generated code is unable to handle. New: Service writer implementation can now be specified on the command-line. Version 1.5.1 \u00b6 2014-06-18 New: Generate interface definition for a Service with a partial list of methods. Okio dependency bumped to 1.0.0. Version 1.5.0 \u00b6 2014-04-22 New: Options on enums and enum values are now supported. New: Options ending with .redacted on fields will omit values from toString . New: Redactor creates copies of messages with redacted fields omitted. Various internal serialization improvements and memory reduction. Okio dependency bumped to 0.9.0. Version 1.4.0 \u00b6 2014-04-22 Replace Wire\u2019s ByteString class with the one from Okio ( https://github.com/square/okio ). This is a breaking API change . Add a new static method Wire.parseFrom(okio.Source input, Class<M> messageClass) . Reimplement Wire\u2019s input handling to use Okio internally. Provide basic support for generating code from service declarations (see README.md). Improve deserialization performance. Fix a bug where no some extension dependencies were not detected. Version 1.3.3 \u00b6 2014-03-28 New: Support service declarations as roots. The request and response types of their methods will be included. Version 1.3.2 \u00b6 2014-03-27 Fix: Enum value duplicate check now correctly looks at names instead of values. Version 1.3.1 \u00b6 2014-03-25 New: Automatically add Maven plugin\u2019s generated source as a compilation root. Fix: Correct Maven plugin\u2019s \u2018no arguments\u2019 flag to work properly. Fix: Support extend declarations nested inside message types. Version 1.3.0 \u00b6 2014-03-21 New: Empty repeated fields are now initialized to an empty collection. New: Emit field options. Use --no_options flag to disable. New: @Deprecated is now added to fields and setters on the builder. New: Maven plugin for running the compiler as part of a build. Fix: Treat empty and null repeated fields the same in equals() and hashCode() . Note: This version is not backwards compatible with code generated from previous versions. Version 1.2.0 \u00b6 2013-11-01 New: --registry_class compiler argument emits a class with a list of extensions suitable for passing to the Wire constructor. Fix: Ensure all trailing whitespace is trimmed on documentation. Version 1.1.1 \u00b6 2013-10-23 Fix: Correct parsing and emission of multi-line documentation. Version 1.1.0 \u00b6 2013-10-22 New: Support for message options. New: Check for duplicate field tag numbers. New: Emit Javadoc on messages, enum values, and builder methods. Fix: Emit imports for extension fields and classes outside of package. Fix: Correctly generate sources for protos with the same basename. Fix: Do not generate default constants for message types. Fix: Avoid shadowing fields named \u201cresult\u201d, \u201cother\u201d, or \u201co\u201d. Version 1.0.1 \u00b6 2013-08-27 New: Support reading directly from InputStream . New: Add \u2018 other == this \u2018 shortcut in generated equals() methods. Version 1.0.0 \u00b6 2013-08-23 Initial version.","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#version-400-alpha1","text":"2021-05-01 Kotlin + Java New: GrpcClient.Builder.minMessageToCompress() configures which messages are compressed. This will completely disable compression if the size is Long.MAX_VALUE . We\u2019ve seen problems where some Golang gRPC servers don\u2019t support compression; setting this to MAX_VALUE is necessary to interop with them. New: SchemaReflector is our initial implementation of the gRPC Server Reflection Protocol . Note that although we implement the business logic of gRPC reflection, we don\u2019t offer a gRPC server built into Wire. New: Support rpcRole = 'none' in the Gradle plugin to generate neither client nor server code. Fix: Generate @Deprecated annotations on deprecated messages, fields, enums, and enum constants. Fix: Update the Wire Gradle plugin to register generated .java sources with the Java compiler. Previously this was broken if the Kotlin plugin was installed. Fix: Use Gradle\u2019s logging mechanism to reduce output when Wire generates code. Fix: Update the Wire Gradle plugin to clear the output directory before generating code. This prevents the need to do a clean build after removing a message type. Fix: Permit values other than 0 and 1 when decoding protobuf-encoded booleans. Previously we threw an IOException for other values; now all non-zero values are true. Upgrade: Okio 3.0.0-alpha.3 . We now use Okio 3\u2019s FileSystem in SchemaLoader , which makes it easier to load .proto files from the classpath. Swift : New: Support Timestamp and Duration . Fix: Throw an error when encountering an unexpected ProtoReader.beginMessage() rather than calling fatalError() .","title":"Version 4.0.0-alpha.1"},{"location":"changelog/#version-370","text":"2021-03-25 New: srcProject(\":project-name\") makes it easier to depend on .proto files of other projects. Fix: Don\u2019t require source that .proto directories exist at Gradle plugin configuration time. This was preventing Wire from using other tasks\u2019 outputs as its inputs. Fix: Don\u2019t fail if options have a . prefix.","title":"Version 3.7.0"},{"location":"changelog/#version-361","text":"2021-03-09 Fix: The Wire Gradle plugin now supports Java only Android projects. Fix: In the Wire Gradle plugin, sourcePath will now include only protos defined with include if the option is present. It used to include all existing .proto files even if include was used. New: Full support Optional Int64 and UInt64 for JSONString in Swift.","title":"Version 3.6.1"},{"location":"changelog/#version-360","text":"2021-02-08 New: Automatically add a dependency when a protoPath or protoSource depends on a project. New: protoPath and protoSource dependencies are now not transitive by default. New: New protoLibrary option for the Wire Gradle plugin. Configuring a project as a protoLibrary will cause the generated .jar file to include .proto sources. New: Code generation for plain gRPC server. The Kotlin target now has a new grpcServerCompatible option which if set to true will generate gRPC server-compatible classes. New: Introduce GrpcException . New: Add GrpcMethod tag to the request. New: Adds redacting support for Moshi JSON adapters. New: Publish plugin marker for Gradle plugin. Fix: Escape square brackets in Kotlin generated code documentation. Fix: Improved proto parsing performance.","title":"Version 3.6.0"},{"location":"changelog/#version-350","text":"2020-10-27 New: Wire Gradle plugin improvements: A task is now created for each available sources (main, Android variants, etc). The wire-runtime dependency is automatically added. Generated code directories are automatically added into their module\u2019s source sets. New: Wire\u2019s proto parser now knows about oneOfOptions . New: Wire will throw when two enum constants are ambiguous, like ZERO and zero . New: Bytes options are not eligible anymore as annotation members. Fix: Optional fields in proto3 are now generated as nullable fields. Fix: JSON camel-casing is updated to fit latest protobuf specifications. Fix: Exception messages when gRPC fails have been improved. Fix: Allow ; as entry separator in option maps. Fix: Enum constants are now properly escaped when conflicting with keywords of their generated target platform. Fix: Update to KotlinPoet 1.7.2 which makes a lot of change in how Kotlin code is generated.","title":"Version 3.5.0"},{"location":"changelog/#version-340","text":"2020-09-24 New: Stop emitting enum constant options as fields for Kotlin. New: The Wire Gradle plugin task is now cacheable. New: New GrpcCall function to help implement fakes. New: Change GrpcStreamingCall.execute() to support structured concurrency.","title":"Version 3.4.0"},{"location":"changelog/#version-330","text":"2020-09-14 New: Proto3 support! This includes the new behaviors, the new types, and the JSON. New: Swift support for proto2 schemas. The details are in our blog post . New: Wire will now throw an error when: two generated files end up overriding each other, imports form a cycle, packages form a cycle. This can be turned off with the flag permitPackageCycles , an option within the source set cannot be resolved, there are name duplications of members in a message, or of rpcs in a service, a map is used as an extension. New: Support for the json_name pseudo option. New: The wire_package file option allows one to set the JVM package where classes generated from the concerned file will be placed. wire_package takes precedence over java_package . New: Lists and maps in Kotlin generated code are now immutable. New: Support UTF-8 with BOM in proto files. New: wire.since and wire.until have been renamed with the prefix constant_ for EnumValueOptions . New: Wire generates 1) annotations for options which 2) gets assigned to the generated code where appropriate. Both behavior can be turn on or off via the flags: emitDeclaredOptions : True to emit types for options declared on messages, fields, etc. Default to true, emitAppliedOptions : True to emit annotations for options applied on messages, fields, etc. Default to false. Fix: Recursive map values. Fix: Long expressions in equals and encodedSize functions.","title":"Version 3.3.0"},{"location":"changelog/#version-322","text":"2020-05-15 Fix: JSON serialization correctly emits all values.","title":"Version 3.2.2"},{"location":"changelog/#version-321","text":"2020-05-02 New: onlyVersion option on the Wire Gradle plugin to target a unique version. By and large, service code that supports many clients would target ranges via sinceVersion and untilVersion , while client code would target a unique version via onlyVersion . New: Support for optional fields in Proto3. Fix: Restored the GrpcClient.create API to create implementations for gRPC interfaces.","title":"Version 3.2.1"},{"location":"changelog/#version-320","text":"2020-04-23 New: wire.since and wire.until options on members and enum values. You can prune fields or constants using these two options. When generating code with the Wire Gradle plugin, define sinceVersion and/or untilVersion to scope the generated code. New: Messages\u2019 toString method on Kotlin and Java now escape string values for easy parsing. Fix: Link the entire descriptor.proto every time when building the Schema . Fix: Properly handle members named after keywords of the target language for both Java and Kotlin. Fix: Use the declared name for keys in JSON when emitting/reading keyword named members. Fix: Generated Kotlin code is malformed for long identifiers. Fix: Make the Wire Gradle plugin compatible with instant execution.","title":"Version 3.2.0"},{"location":"changelog/#version-310","text":"2020-02-06 This release includes major non-backwards-compatible API changes to the wire-schema module. This will break tools that use Wire\u2019s schema modeling as a standalone library. We are making big changes to this component and we sacrificed API compatibility to accelerate these improvements. New: proto { ... } target in the Wire Gradle plugin. Use this to perform basic source code transformations on collections of .proto files. We use it to prune large collections of protos to just the subset used by the application. Fix: Support all forms of reserved extensions, such as extensions 1, 3 to 5, 7; . Fix: Don\u2019t re-generate source files when their .proto files haven\u2019t changed. New: includes , excludes , root , and prune give precedence to the most precise rule. Previously excludes always took precedence over includes , and prune always took precedence over root . Fix: Generate non-instantiable class for enclosing types in Kotlin. These are emitted when a nested type is retained but its enclosing type is pruned. Fix: Do not fail to build when the profile cannot find a dependency.","title":"Version 3.1.0"},{"location":"changelog/#version-303","text":"2019-12-23 Starting with this version the Wire Maven plugin is no longer maintained and has been removed from the repository. New: Support for custom options in Kotlin. New: Kotlin 1.3.61. New: Add support for custom targets in WireRun and the Gradle plugin. New: Improve schema evaluation algorithm when loading separate sourcePath and protoPath . New: Lazy loading of protoPath contents. New: Make it possible to customize Gradle plugin\u2019s configurations. New: Make it possible to customize Gradle plugin\u2019s generateProtos task. Fix: Use correct ProtoAdapter for packed fields in Kotlin. Fix: Properly handle name clashes between fields and enclosing types. Fix: Preserve the package name on files loaded from protoPath . Fix: ProtoPruner: Properly evaluate Pruner\u2019s reachable objects. Fix: ProtoPruner: Ensure --excludes properly prunes options. Fix: ProtoPruner: Keep used ServiceOptions and MethodOptions when pruning.","title":"Version 3.0.3"},{"location":"changelog/#version-302","text":"2019-11-22 Fix: Generate correct unknownFields code if a message field\u2019s name is a Kotlin keyword. Fix: Properly handle unknown enum values in Kotlin. Fix: ProtoPruner: retain used extends. Fix: ProtoPruner: retain only used imports. Fix: ProtoPruner: use NewSchemaLoader that correctly loads google.protobuf.descriptor. Fix: ProtoPruner: print default values for scalar types for proto target within the options. Fix: ProtoPruner: fix handling of options. Fix: ProtoPruner: print default values for enums.","title":"Version 3.0.2"},{"location":"changelog/#version-301","text":"2019-10-18 Fix: Use the correct adapter path for gRPC endpoints that customize the Java package. Fix: Preserve documentation in generated services. Fix: Fail to generate code if the source directory doesn\u2019t exist. Fix: Make Kotlin consistent with Java for unknown enum constants. We now treat these as unknown fields rather than failing to decode the enclosing message.","title":"Version 3.0.1"},{"location":"changelog/#version-300","text":"2019-10-07 Update: All gRPC networking calls are encoded in gzip.","title":"Version 3.0.0"},{"location":"changelog/#version-300-rc03","text":"2019-10-04 Fix: Update dependency to a stable version, 2.4.1 of Okio.","title":"Version 3.0.0-rc03"},{"location":"changelog/#version-300-rc02","text":"2019-10-01","title":"Version 3.0.0-rc02"},{"location":"changelog/#kotlin","text":"Fix: Nullify other oneof fields in Builder setters in Kotlin interop. Fix: Use unknownFields in hashCode() . Fix: Remove withoutUnknownFields() from Kotlin.","title":"Kotlin"},{"location":"changelog/#grpc","text":"Update: Total rewrite of the generated interfaces for clients: Introduce two interfaces, GrpcCall for simple RPCs, and GrpcStreamingCall fox duplex ones. Both will provide blocking and suspending API, including a reference to the underlying OkHttp Call object and its timeout. Fix: Send stream cancels from clients.","title":"gRPC"},{"location":"changelog/#misc","text":"New: Changes printing of options and enums: No empty lines between options and fields for enums. Print options on new lines only when more than one. Fix: Don\u2019t cache Message\u2019s hash code on Native. Fix: Fix handling of map values in FieldBinding . Fix: Fix import fails on windows due to path separator. Fix: Don\u2019t emit proto2 sources for proto3 syntax.","title":"Misc"},{"location":"changelog/#version-300-rc01","text":"2019-08-02","title":"Version 3.0.0-rc01"},{"location":"changelog/#compiler-gradle-plugin","text":"New: Support includes on Maven coordinate dependencies. New: Track includes separately for source vs proto paths. New: Follow symlinks when building. New: Change the Gradle plugin to track targets as a list. New: Includes and Excludes for Wire targets. New: Print errors on ambiguous and missing imports. Fix: Fix a bug where protopath Maven resources weren\u2019t working. Fix: Don\u2019t reuse source dependencies as protopath dependencies. Fix: Fix equals() implementation for messages with no fields.","title":"Compiler + Gradle plugin"},{"location":"changelog/#kotlin_1","text":"New: Move Wire.kt into jvmMain to discourage its use in common Kotlin code. New: Make Message.adapter a val . New: Optimize decode() code for protos with no fields. New: Update supported Native platforms. New: Make Message.unknownFields property non-nullable. New: Make Message.unknownFields a val . Fix: Don\u2019t use KClass.simpleName to avoid needing kotlin-reflect dependency. Fix: Use kotlin.UnsupportedOperationException in generated code.","title":"Kotlin"},{"location":"changelog/#grpc_1","text":"New: Introduce MessageSource and MessageSink interfaces in wire-runtime . New: Honor Java package names in Wire gRPC services. New: Make PipeDuplexRequestBody internal. Fix: Workaround for @Generated annotation on Java 9+. Fix: Fix types for blocking APIs.","title":"gRPC"},{"location":"changelog/#misc_1","text":"Fix: Fix deserializing null values in Gson adapter. Fix: Change wire-runtime artifact names to preserve 2.x compatibility.","title":"Misc"},{"location":"changelog/#version-300-alpha03","text":"2019-06-22 Similar to alpha02, but with proper wire-runtime multiplatform artifacts.","title":"Version 3.0.0-alpha03"},{"location":"changelog/#version-300-alpha02","text":"2019-06-21 New: Experimental multiplatform runtime. Starting with this version, wire-runtime is published as a multiplatform Kotlin artifact. While the JVM artifact is binary- and behavior-compatible with 3.0.0-alpha01, artifacts for other platforms may not work correctly at this point. The artifact name for the JVM artifact has been changed to wire-runtime-jvm : now, in order to depend on the multiplatform runtime, use the following Gradle dependency declaration: api \"com.squareup.wire:wire-runtime:3.0.0-alpha02\" and if you want to depend on the JVM artifact only, use the following declaration: api \"com.squareup.wire:wire-runtime-jvm:3.0.0-alpha02\" New: Generate RPCs as Single Abstract Methods. New: Add \u201csingleMethod\u201d Gradle plugin configuration for services. New: Add \u201cblockingServices\u201d Gradle plugin configuration for services. New: Support packageless services code generation. New: Remove sealed classes-based oneof implementation. New: Don\u2019t generate a Builder for non-interop Kotlin messages. Fix: Kotlin Generator correctly generates code for Protobuf services. Fix: Improved formatting of generated Kotlin code. Fix: Generate correct adapter names for WireField annotation. Fix: Generate labels for WireField annotation. Fix: Wrap oneof error message properly.","title":"Version 3.0.0-alpha02"},{"location":"changelog/#version-300-alpha01","text":"2019-03-14 New: Kotlin Generator Wire 3 can generate Kotlin data classes. To enable this feature via the command line API, pass in the --kotlin_out parameter that should specify the output directory for the generated *.kt files. Given the following simple proto: message Person { required string name = 1 ; required int32 id = 2 ; optional string email = 3 ; } the generated Kotlin code will look like the following: data class Person ( @field : WireField ( tag = 1 , adapter = \"com.squareup.wire.ProtoAdapter#STRING\" ) val name : String , @field : WireField ( tag = 2 , adapter = \"com.squareup.wire.ProtoAdapter#INT32\" ) val id : Int , @field : WireField ( tag = 3 , adapter = \"com.squareup.wire.ProtoAdapter#STRING\" ) val email : String ? = null , val unknownFields : ByteString = ByteString . EMPTY ) : Message < Person , Person . Builder >( ADAPTER , unknownFields ) { companion object { @JvmField val ADAPTER : ProtoAdapter < Person > = ... // code omitted for brevity The copy() method of a data class replaces most usages of the builder. If your code relies on the Builder , you can enable full Builder generation by passing the --java_interop parameter to the compiler. New: gRPC support In addition to generating Kotlin code from proto messages, Wire can now generate code for gRPC endpoints. Here\u2019s an example schema: service RouteGuide { // A simple RPC. // // Obtains the feature at a given position. // // A feature with an empty name is returned if there's no feature at the given // position. rpc GetFeature ( Point ) returns ( Feature ) {} } The generated code will look like the following (message protos, referenced by the schema, are omitted): interface RouteGuide : Service { @WireRpc ( path = \"/routeguide.RouteGuide/GetFeature\" , requestAdapter = \"routeguide.Point#ADAPTER\" , responseAdapter = \"routeguide.Feature#ADAPTER\" ) suspend fun GetFeature ( request : Point ): Feature } All four gRPC modes are supported: the generated code uses suspendable functions to implement non-blocking asynchronous execution. In streaming modes, ReceiveChannel and SendChannel are used to listen to asynchronous data in a non-blocking fashion. This feature works out of the box in Wire 3 compiler as long as the input file contains a gRPC schema. New: Gradle plugin Here\u2019s an example Gradle configuration: apply plugin: 'com.squareup.wire' wire { // Keeps only 'Dinosaur#name' as the root of the object graph roots 'squareup.dinosaurs.Dinosaur#name' // Keeps all fields, except 'name', in 'Dinosaur' prunes 'squareup.dinosaurs.Dinosaur#name' // Both roots and prunes in an external file rules 'rules.txt' kotlin { javaInterop true out \"${buildDir}/generated/custom\" } } The wire extension introduces the concept of compilation targets, such as kotlin and java , where each target has its own configuration properties. Multiple targets can be supplied, which benefits use cases such as migrating Java protos to Kotlin. New: Decouple the option of using Android annotations for nullability from the option of having messages implement Parcelable. New: Wire Moshi adapter for serializing proto JSON representation using the Moshi library. New: Implement support for custom enum types. New: Generate AndroidX nullability annotations instead of old support library annotations. New: Import JSR 305 and use it to mark nullability of public API. New: Allow inline multiline comments. New: Generate an empty class when a nested message is retained but its parent was pruned. New: Support rendering a ProtoFile to its schema. New: Support hexadecimal numeric literals. New: Allow custom types to be constrained with a \u2018with\u2019 clause. New: Generate a constructor which takes in a Message.Builder instead of all fields separately. New: Add location to the error message about unsupported group elements. New: Permit single files to be used on the proto path. Fix: Emit \u2018=\u2019 for syntax declaration. Fix: Don\u2019t crash when a comment has a dollar sign. Fix: Return subclass type instead of abstract parameterized type for newBuilder. Fix: Validate enum namespace in file context are unique.","title":"Version 3.0.0-alpha01"},{"location":"changelog/#version-220","text":"2016-06-17 New: Support for map type in the schema, compiler, and runtime! New: AndroidMessage base class consolidates everything required for supporting Android and will now be used for generating code with --android . New: stream keyword in RPC definitions is now parsed and exposed in the schema. Fix: Nested types which are retained no longer cause their enclosing type to be retained. Instead, non-instantiable empty types will be generated for pruned enclosing types. Fix: Remove per-type Parcelable.Creator classes and instead use a single type which delegates to the message\u2019s ProtoAdapter . Fix: Retain information on redacted fields even when options were pruned. Fix: Do not generate code for handling null from list types (and now map types) which are guaranteed to never be null .","title":"Version 2.2.0"},{"location":"changelog/#version-212","text":"2016-04-15 Fix: Gson type adapter now deserializes JSON null literals to empty list for repeated fields.","title":"Version 2.1.2"},{"location":"changelog/#version-211","text":"2016-02-01 New: reserved keyword is now supported and enforced. Fix: Defer reflection-based lookup of enum method until first use to avoid class loading race conditions. Fix: Support single-quoted string literals. Fix: Adjacent string literals are not correctly concatenated.","title":"Version 2.1.1"},{"location":"changelog/#version-210","text":"2016-01-18 Empty lists of packed values were being encoded incorrectly. In Wire 2.0.x our message adapters incorrectly included empty lists for [packed=true] rather than omitting them. This is now fixed. New: Message.encode() to concisely encode a message. New: MessageAdapter.decode(ByteString) to decode a message from a byte string without an intermediate byte array. New: Wire now includes a sample code generation for service interfaces.","title":"Version 2.1.0"},{"location":"changelog/#version-203","text":"2016-01-04 New: ProtoAdapter.get overload which returns an adapter given an instance of a message. New: @Nullable annotations are emitted for optional fields when using --android . Fix: Remove the need for javac to generate synthetic accessor methods in the generated code. This results in smaller code size and less method references (for Android users).","title":"Version 2.0.3"},{"location":"changelog/#version-202","text":"2015-12-14 Fix: Exclude unknown fields when encoding JSON and drop unknown fields when parsing JSON. Fix: Ensure JSON encoding and decoding works in the default generation mode (not just --compact ) by always adding @WireField metadata to message fields. Fix: Update to JavaPoet 1.4 for more accurate generation of valid Java code.","title":"Version 2.0.2"},{"location":"changelog/#version-201","text":"2015-11-12 Fix: Do not emit case statements for aliased enum constant values. The first constant for a value will be returned when deserializing. Fix: Emit @Deprecated annotation on deprecated enum constants. Fix: Correctly prune dependencies of excluded message, enum, or service members. Previously the dependencies of an excluded member were retained despite the member itself being omitted.","title":"Version 2.0.1"},{"location":"changelog/#version-200","text":"2015-10-23 Wire 2 is a backwards-incompatible release. It makes breaking changes to the compiler, runtime, extensions, and generated code. These changes aren\u2019t made lightly as we\u2019ve endured the upgrade in our own projects! We believe the cost of migration is worth the benefits. We\u2019ve created the wire-schema library that models .proto schema definitions. This is a capable library that packs several neat features. You can load a Schema from .proto files located on the local file system, a ZIP or JAR file, or any java.nio.FileSystem like Jimfs . You can prune this schema with includes or excludes, allowing you to reuse .proto definitions with minimal code. And you can decode data directly from a schema: no code generation is necessary! We\u2019ve flattened extensions. Wire 2.0 combines the fields defined directly on messages with fields defined far away in extensions. In the generated code, extension fields look just like every other field! One limitation of this approach is that it\u2019s no longer possible to compile extensions separately from the messages they extend. For this reason we now recommend always generating all Wire code in a single step. We\u2019ve rearranged the runtime. Types related to the protocol buffers format are now prefixed Proto and types related to our implementation are prefixed Wire . To encode and decode messages you must first get an adapter either from the ADAPTER constant or from ProtoAdapter.get() . You no longer need a Wire instance!","title":"Version 2.0.0"},{"location":"changelog/#runtime","text":"New ADAPTER constant on most messages gives access to encode & decode values. This replaces the encoding and decoding methods on Wire . Guard against null lists. Code that passes null to builder methods expecting a List used to accept that; now Wire throws a NullPointerException . Similarly list elements must also be non-null. New Message.newBuilder() API. This replaces the previous copy constructor on Builder . New: Message.withoutUnknownFields() strips unknown fields. Fix: Always throw ProtocolException when there are decoding problems. Fix: Stricter checking for oneof fields. Previously it was possible to create instances with multiple values set! Fix: Improve redacting of repeated fields. Fix: ProtoReader now silently unpacks packed values. Fix: ProtoReader doesn\u2019t return groups to callers.","title":"Runtime"},{"location":"changelog/#schema-java-generator","text":"The Java generator is now standalone. Use these APIs programmatically to build plugins without delegating to the command line interface. New: Prune schemas using includes and excludes. The IdentifierSet can be used to configure which types and members are retained and which are pruned. New: Encode and decode values directly from the schema. New: Improved error messages for validation. Fix: Strict imports. Fix: Detect and forbid conflicts on extension tags.","title":"Schema &amp; Java Generator"},{"location":"changelog/#compiler","text":"New: Always use Wire\u2019s bundled descriptor.proto . Previously to define custom options you needed to import a potentially-inconsistent descriptor. New: Emit all types when no .proto files are explicitly specified. New: Generate code for encoding and decoding messages. The previous, reflection-based encoder and decoder are accessible with --compact . New: ServiceFactory has been removed. To generate code for your services, load a schema with wire-schema and then use a library like JavaPoet to generate your own code. The JavaGenerator class can be used to look up Java names of message types. New: Compiler will load all .proto files if none are explicitly specified. New: Load .proto files from ZIP and JAR files. New: The --android flag causes Wire messages to implement Parcelable . New: Support multiple --proto_path arguments New: The --named_files_only flag limits which .proto files yield .java files. This was the default in Wire 1.x. New: The --no_options flag has been deleted. Use --excludes=google.protobuf.* instead.","title":"Compiler"},{"location":"changelog/#extensions","text":"Extensions have been flattened. Fix: Better field resolution for options. Fix: Extension fields must not be required .","title":"Extensions"},{"location":"changelog/#version-180","text":"2015-06-27 New: oneof support! Fix: Correct serialization of repeated unknown fields. Fix: Removed superfluous private modifier on enum constructor. Warning: The \u2018protoparser\u2019 library was updated to version 4.0. This changes the type passed to any ServiceWriter implementations.","title":"Version 1.8.0"},{"location":"changelog/#version-170","text":"2015-03-05 New: Messages implement Serializable . The serialized form follows protobuf encoding, so renaming fields is safe as long as tags are consistent. (Renaming classes is unsafe, however). Note that extension fields are deserialized as unknown fields.","title":"Version 1.7.0"},{"location":"changelog/#version-161","text":"2015-01-16 New: --quiet and --dry-run command-line arguments. Fix: Handle an extension registry with zero or only one item. Okio dependency bumped to 1.2.0.","title":"Version 1.6.1"},{"location":"changelog/#version-160","text":"2014-10-23 Fix: Correctly throw IOException when parsing bad input fails. Fix: Ensure emitted code references to Arrays.asList correctly compiles in some edge cases. \u2018 UNDEFINED \u2018 enum value has been removed.","title":"Version 1.6.0"},{"location":"changelog/#version-152","text":"2014-09-15 New: \u2018 UNDEFINED \u2018 enum value represents values that the generated code is unable to handle. New: Service writer implementation can now be specified on the command-line.","title":"Version 1.5.2"},{"location":"changelog/#version-151","text":"2014-06-18 New: Generate interface definition for a Service with a partial list of methods. Okio dependency bumped to 1.0.0.","title":"Version 1.5.1"},{"location":"changelog/#version-150","text":"2014-04-22 New: Options on enums and enum values are now supported. New: Options ending with .redacted on fields will omit values from toString . New: Redactor creates copies of messages with redacted fields omitted. Various internal serialization improvements and memory reduction. Okio dependency bumped to 0.9.0.","title":"Version 1.5.0"},{"location":"changelog/#version-140","text":"2014-04-22 Replace Wire\u2019s ByteString class with the one from Okio ( https://github.com/square/okio ). This is a breaking API change . Add a new static method Wire.parseFrom(okio.Source input, Class<M> messageClass) . Reimplement Wire\u2019s input handling to use Okio internally. Provide basic support for generating code from service declarations (see README.md). Improve deserialization performance. Fix a bug where no some extension dependencies were not detected.","title":"Version 1.4.0"},{"location":"changelog/#version-133","text":"2014-03-28 New: Support service declarations as roots. The request and response types of their methods will be included.","title":"Version 1.3.3"},{"location":"changelog/#version-132","text":"2014-03-27 Fix: Enum value duplicate check now correctly looks at names instead of values.","title":"Version 1.3.2"},{"location":"changelog/#version-131","text":"2014-03-25 New: Automatically add Maven plugin\u2019s generated source as a compilation root. Fix: Correct Maven plugin\u2019s \u2018no arguments\u2019 flag to work properly. Fix: Support extend declarations nested inside message types.","title":"Version 1.3.1"},{"location":"changelog/#version-130","text":"2014-03-21 New: Empty repeated fields are now initialized to an empty collection. New: Emit field options. Use --no_options flag to disable. New: @Deprecated is now added to fields and setters on the builder. New: Maven plugin for running the compiler as part of a build. Fix: Treat empty and null repeated fields the same in equals() and hashCode() . Note: This version is not backwards compatible with code generated from previous versions.","title":"Version 1.3.0"},{"location":"changelog/#version-120","text":"2013-11-01 New: --registry_class compiler argument emits a class with a list of extensions suitable for passing to the Wire constructor. Fix: Ensure all trailing whitespace is trimmed on documentation.","title":"Version 1.2.0"},{"location":"changelog/#version-111","text":"2013-10-23 Fix: Correct parsing and emission of multi-line documentation.","title":"Version 1.1.1"},{"location":"changelog/#version-110","text":"2013-10-22 New: Support for message options. New: Check for duplicate field tag numbers. New: Emit Javadoc on messages, enum values, and builder methods. Fix: Emit imports for extension fields and classes outside of package. Fix: Correctly generate sources for protos with the same basename. Fix: Do not generate default constants for message types. Fix: Avoid shadowing fields named \u201cresult\u201d, \u201cother\u201d, or \u201co\u201d.","title":"Version 1.1.0"},{"location":"changelog/#version-101","text":"2013-08-27 New: Support reading directly from InputStream . New: Add \u2018 other == this \u2018 shortcut in generated equals() methods.","title":"Version 1.0.1"},{"location":"changelog/#version-100","text":"2013-08-23 Initial version.","title":"Version 1.0.0"},{"location":"code_of_conduct/","text":"Open Source Code of Conduct \u00b6 At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter. Diversity Statement \u00b6 We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities. Reporting Issues \u00b6 If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below. Thanks \u00b6 Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work. Reporting Guide \u00b6 If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Code of Conduct"},{"location":"code_of_conduct/#open-source-code-of-conduct","text":"At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter.","title":"Open Source Code of Conduct"},{"location":"code_of_conduct/#diversity-statement","text":"We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities.","title":"Diversity Statement"},{"location":"code_of_conduct/#reporting-issues","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below.","title":"Reporting Issues"},{"location":"code_of_conduct/#thanks","text":"Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work.","title":"Thanks"},{"location":"code_of_conduct/#reporting-guide","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Reporting Guide"},{"location":"contributing/","text":"Contributing \u00b6 Keeping the project small and stable limits our ability to accept new contributors. We are not seeking new committers at this time, but some small contributions are welcome. If you\u2019ve found a security problem, please follow our bug bounty program. If you\u2019ve found a bug, please contribute a failing test case so we can study and fix it. Before code can be accepted all contributors must complete our Individual Contributor License Agreement (CLA) . Code Contributions \u00b6 Get working code on a personal branch with tests passing before you submit a PR: ./gradlew clean check Please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Contribute code changes through GitHub by forking the repository and sending a pull request. We squash all pull requests on merge. Committer\u2019s Guides \u00b6 Releasing","title":"Contributing"},{"location":"contributing/#contributing","text":"Keeping the project small and stable limits our ability to accept new contributors. We are not seeking new committers at this time, but some small contributions are welcome. If you\u2019ve found a security problem, please follow our bug bounty program. If you\u2019ve found a bug, please contribute a failing test case so we can study and fix it. Before code can be accepted all contributors must complete our Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"contributing/#code-contributions","text":"Get working code on a personal branch with tests passing before you submit a PR: ./gradlew clean check Please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Contribute code changes through GitHub by forking the repository and sending a pull request. We squash all pull requests on merge.","title":"Code Contributions"},{"location":"contributing/#committers-guides","text":"Releasing","title":"Committer's Guides"},{"location":"releasing/","text":"Releasing \u00b6 Prerequisite: Sonatype (Maven Central) Account \u00b6 Create an account on the Sonatype issues site . Ask an existing publisher to open an issue requesting publishing permissions for com.squareup projects. Prerequisite: GPG Keys \u00b6 Generate a GPG key (RSA, 4096 bit, 3650 day) expiry, or use an existing one. You should leave the password empty for this key. $ gpg --full-generate-key Upload the GPG keys to public servers: $ gpg --list-keys --keyid-format LONG /Users/johnbarber/.gnupg/pubring.kbx ------------------------------ pub rsa4096/XXXXXXXXXXXXXXXX 2019-07-16 [SC] [expires: 2029-07-13] YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY uid [ultimate] John Barber <jbarber@squareup.com> sub rsa4096/ZZZZZZZZZZZZZZZZ 2019-07-16 [E] [expires: 2029-07-13] $ gpg --send-keys --keyserver keyserver.ubuntu.com XXXXXXXXXXXXXXXX Prerequisite: Gradle Properties \u00b6 Define publishing properties in ~/.gradle/gradle.properties : signing.keyId=1A2345F8 signing.password= signing.secretKeyRingFile=/Users/jbarber/.gnupg/secring.gpg signing.keyId is the GPG key\u2019s ID. Get it with this: $ gpg --list-keys --keyid-format SHORT signing.password is the password for this key. This might be empty! signing.secretKeyRingFile is the absolute path for secring.gpg . You may need to export this file manually with the following command where XXXXXXXX is the keyId above: $ gpg --keyring secring.gpg --export-secret-key XXXXXXXX > ~/.gnupg/secring.gpg Cutting a Release \u00b6 Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Set environment variables with your Sonatype credentials . export SONATYPE_NEXUS_USERNAME=johnbarber export SONATYPE_NEXUS_PASSWORD=`pbpaste` Update, build, and upload: sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g\" \\ `find . -name \"gradle.properties\"` sed -i \"\" \\ \"s/\\\"com.squareup.wire:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"com.squareup.wire:\\1:$RELEASE_VERSION\\\"/g\" \\ `find . -name \"README.md\"` sed -i \"\" \\ \"s/\\<version\\>\\([^<]*\\)\\<\\/version\\>/\\<version\\>$RELEASE_VERSION\\<\\/version\\>/g\" \\ `find . -name \"README.md\"` ./gradlew -p wire-library clean publish uploadArchives Visit Sonatype Nexus to promote (close then release) the artifact. Or drop it if there is a problem! Tag the release, prepare for the next one, and push to GitHub. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a $RELEASE_VERSION -m \"Version $RELEASE_VERSION\" sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g\" \\ `find . -name \"gradle.properties\"` git commit -am \"Prepare next development version.\" git push && git push --tags Deploy the documentation website. ./deploy_website.sh","title":"Releasing"},{"location":"releasing/#releasing","text":"","title":"Releasing"},{"location":"releasing/#prerequisite-sonatype-maven-central-account","text":"Create an account on the Sonatype issues site . Ask an existing publisher to open an issue requesting publishing permissions for com.squareup projects.","title":"Prerequisite: Sonatype (Maven Central) Account"},{"location":"releasing/#prerequisite-gpg-keys","text":"Generate a GPG key (RSA, 4096 bit, 3650 day) expiry, or use an existing one. You should leave the password empty for this key. $ gpg --full-generate-key Upload the GPG keys to public servers: $ gpg --list-keys --keyid-format LONG /Users/johnbarber/.gnupg/pubring.kbx ------------------------------ pub rsa4096/XXXXXXXXXXXXXXXX 2019-07-16 [SC] [expires: 2029-07-13] YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY uid [ultimate] John Barber <jbarber@squareup.com> sub rsa4096/ZZZZZZZZZZZZZZZZ 2019-07-16 [E] [expires: 2029-07-13] $ gpg --send-keys --keyserver keyserver.ubuntu.com XXXXXXXXXXXXXXXX","title":"Prerequisite: GPG Keys"},{"location":"releasing/#prerequisite-gradle-properties","text":"Define publishing properties in ~/.gradle/gradle.properties : signing.keyId=1A2345F8 signing.password= signing.secretKeyRingFile=/Users/jbarber/.gnupg/secring.gpg signing.keyId is the GPG key\u2019s ID. Get it with this: $ gpg --list-keys --keyid-format SHORT signing.password is the password for this key. This might be empty! signing.secretKeyRingFile is the absolute path for secring.gpg . You may need to export this file manually with the following command where XXXXXXXX is the keyId above: $ gpg --keyring secring.gpg --export-secret-key XXXXXXXX > ~/.gnupg/secring.gpg","title":"Prerequisite: Gradle Properties"},{"location":"releasing/#cutting-a-release","text":"Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Set environment variables with your Sonatype credentials . export SONATYPE_NEXUS_USERNAME=johnbarber export SONATYPE_NEXUS_PASSWORD=`pbpaste` Update, build, and upload: sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g\" \\ `find . -name \"gradle.properties\"` sed -i \"\" \\ \"s/\\\"com.squareup.wire:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"com.squareup.wire:\\1:$RELEASE_VERSION\\\"/g\" \\ `find . -name \"README.md\"` sed -i \"\" \\ \"s/\\<version\\>\\([^<]*\\)\\<\\/version\\>/\\<version\\>$RELEASE_VERSION\\<\\/version\\>/g\" \\ `find . -name \"README.md\"` ./gradlew -p wire-library clean publish uploadArchives Visit Sonatype Nexus to promote (close then release) the artifact. Or drop it if there is a problem! Tag the release, prepare for the next one, and push to GitHub. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a $RELEASE_VERSION -m \"Version $RELEASE_VERSION\" sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g\" \\ `find . -name \"gradle.properties\"` git commit -am \"Prepare next development version.\" git push && git push --tags Deploy the documentation website. ./deploy_website.sh","title":"Cutting a Release"},{"location":"security/","text":"Security Policy \u00b6 Supported Versions \u00b6 Version Supported 3.x \u2705 2.x 1.x Reporting a Vulnerability \u00b6 Square recognizes the important contributions the security research community can make. We therefore encourage reporting security issues with the code contained in this repository. If you believe you have discovered a security vulnerability, please follow the guidelines at https://bugcrowd.com/squareopensource","title":"Security"},{"location":"security/#security-policy","text":"","title":"Security Policy"},{"location":"security/#supported-versions","text":"Version Supported 3.x \u2705 2.x 1.x","title":"Supported Versions"},{"location":"security/#reporting-a-vulnerability","text":"Square recognizes the important contributions the security research community can make. We therefore encourage reporting security issues with the code contained in this repository. If you believe you have discovered a security vulnerability, please follow the guidelines at https://bugcrowd.com/squareopensource","title":"Reporting a Vulnerability"},{"location":"wire_compiler/","text":"Wire Compiler & Gradle Plugin \u00b6 Wire has two key components: a compiler that generates Kotlin and Java code at build time, and a runtime library that supports the generated code when your program executes. The compiler is very configurable; this guide explains its features and their use. Getting Started \u00b6 The best way to configure and execute the Wire compiler is via our Gradle plugin. It requires Gradle 5.5 or newer. A typical project has .proto files in the standard src/main/proto directory. src/ main/ proto/ com/ example/ pizza/ pizza_delivery.proto pizza.proto sales/ price.proto store.proto geo/ address.proto country.proto kotlin/ com/ example/ pizza/ PizzaApp.kt test/ kotlin/ com/ example/ pizza/ PizzaAppTest.kt build.gradle Because this project uses the default configuration, plugin setup is easy. Just a simple block in build.gradle , Using plugin application: buildscript { repositories { mavenCentral () } dependencies { classpath 'com.squareup.wire:wire-gradle-plugin:<version>' } } apply plugin: 'com.squareup.wire' wire { kotlin {} } Using the plugins DSL: plugins { id 'application' id 'org.jetbrains.kotlin.jvm' id 'com.squareup.wire' } wire { kotlin {} } The plugin will read the .proto schema definitions, validate them, link them, and generate Kotlin code. It uses KotlinPoet internally to generate compact and legible source files. Wire will generate files in build/generated/source/wire . It\u2019ll also register this directory as a source directory for the project so the generated sources are compiled by the Kotlin compiler. Replace kotlin with java to generate Java sources instead. Inputs and Outputs \u00b6 Wire can pull source .proto schema definitions from a local directory, a local .jar file, or an external artifact specified with Maven coordinates . wire { sourcePath { srcDir 'src/main/protos' } sourcePath { srcJar 'lib/pizza-protos.jar' } sourcePath { srcJar 'com.example.pizza:pizza-protos:1.0.0' } ... } If your resource or directory contains more .proto files than you need to compile you can constrain the inputs to specific files: wire { sourcePath { srcDir 'src/main/protos' include 'com/example/pizza/pizza_delivery.proto' include 'com/example/pizza/pizza.proto' } } Wildcards (with two stars) are also accepted: wire { sourcePath { srcDir 'src/main/protos' include 'com/example/pizza/**' } ... } Wire can emit both Java and Kotlin in the same build. Use includes to specify which types are emitted for a target language; subsequent languages will emit what\u2019s left over. wire { ... kotlin { // Kotlin emits the matched types only. includes = [ 'com.example.pizza.*' ] } java { // Java gets everything else! } } Note that sources are specified as file system paths (slash delimiter) and targets are specified as Proto type names (dot delimiter). You may also specify targets with excludes. If you have both includes and excludes, excludes take precedence. wire { ... kotlin { // Kotlin emits everything but sales and geo packages. excludes = [ 'com.example.sales.*' , 'com.example.geo.*' ] } java { // Java gets those because they're left over. } } Wire will print a warning if any name in includes or excludes is unused. When configuring Wire you must use the package name from the .proto file\u2019s package declaration. The option java_package name is not used for Wire configuration. Proto Path for Libraries \u00b6 Large projects may span multiple modules. To support this Wire has a \u2018proto path\u2019. The .proto schema files on this path are used for linking and validation, but they do not yield files in the generated output. The proto path supports the same inputs as the source path: directories, .jar files, and Maven coordinates. Similarly, the proto path may be filtered with include . wire { protoPath { srcDir 'src/main/address-protos' } protoPath { srcJar 'lib/price.jar' } protoPath { srcJar 'com.example:countries:1.0.0' include 'com/example/geo/country.proto' } ... } The source path and proto path are linked together but only types on the source path are generated. Dependencies between Gradle Modules \u00b6 Wire provides support to define dependencies between modules within the same project. A module can include its .proto files into the output resources. Use this when your .jar file can be used as a library for other proto or Wire projects. Note that only the .proto files used in the library will be included. wire { protoLibrary = true } Wire also creates two configurations, protoPath and protoSource you can use to define a dependency on another proto or Wire project. dependencies { // The task `:common-protos:jar` will be added into the dependency // graph of this module for the Wire generating tasks. protoPath ( project ( ':common-protos' )) implementation ( project ( ':common-protos' )) } wire { kotlin { } } Note that protoPath and protoSource dependencies are not transitive by default. If needed, you can change it manually. configurations . protoPath { transitive = true } Pruning \u00b6 For mobile projects it\u2019s easy to generate a lot of unnecessary code. For example, a .proto schema might support types for obsolete features. General-purpose code-shrinking tools like R8 and ProGuard have difficulty shrinking Wire-generated sources because the encode() and decode() functions still use them. Instead, Wire offers its own code shrinker to eliminate unwanted declarations early. Use prune to precisely eliminate an unwanted type or member. These will be eliminated along with all references to them. wire { ... prune 'com.example.store.Store' prune 'com.example.geo.Country' ... } Alternately you may prefer to specify what to keep, pruning everything not reachable from that set. wire { ... root 'com.example.pizza.PizzaDelivery' ... } Version Matching \u00b6 Another way to prune obsolete fields is to assign them a version, then to generate your code against a version range or a unique version. The fields out of the version range will get pruned. Members may be declared with wire.since and wire.until options; enum constant can use wire.constant_since and wire.constant_until . For example, these options declare a field age that was replaced with birth_date in version \u201c5.0\u201d: import \"wire/extensions.proto\" ; message Singer { optional string name = 1 ; optional int32 age = 2 [( wire.until ) = \"5.0\" ]; optional Date birth_date = 3 [( wire.since ) = \"5.0\" ]; } Client code should typically target a single version. In this example, clients will have the name and birth_date fields only. wire { onlyVersion \"5.0\" } Service code that supports many clients should support the union of versions of all supported clients. Such code will have name , as well as both the age and birth_date fields. wire { sinceVersion \"3.0\" untilVersion \"6.0\" } Proto Libraries \u00b6 By default, .proto input files are not included in the generated .jar artifact. Use the protoLibrary option to include them: wire { protoLibrary = true } This is most useful when building .jar files for other wire tasks to use as dependencies. Note that only the true sources are included \u2013 proto messages that are pruned or not used are not included in the output artifact. Customizing Output \u00b6 Java \u00b6 Here\u2019s an exhaustive Java configuration. Booleans are shown with their non-default behavior. wire { java { // Proto types to include generated sources for. Types listed here will be // generated for this/ target and not for subsequent targets in the task. // // This list should contain package names (suffixed with `.*`) and type names // only. It should not contain member names. includes = [ 'com.example.pizza.*' ] // Proto types to excluded generated sources for. Types listed here will not // be generated for this target. // // This list should contain package names (suffixed with `.*`) and type names // only. It should not contain member names. excludes = [ 'com.example.sales.*' ] // True if types emitted for this target should not also be emitted for other // targets. Use this to cause multiple outputs to be emitted for the same input // type. exclusive = false // Directory to emit to. out \"${buildDir}/custom\" // True for emitted types to implement android.os.Parcelable. android = true // True to enable the androidx.annotation.Nullable annotation where applicable. androidAnnotations = true // True to emit code that uses reflection for reading, writing, and toString // methods which are normally implemented with generated code. compact = true // True to emit types for options declared on messages, fields, etc. emitDeclaredOptions = false , // True to emit annotations for options applied on messages, fields, etc. emitAppliedOptions = true } } Kotlin \u00b6 Here\u2019s an exhaustive Kotlin configuration. Booleans and enums are shown with their non-default behavior. wire { kotlin { // Proto types to include generated sources for. Types listed here will be // generated for this/ target and not for subsequent targets in the task. // // This list should contain package names (suffixed with `.*`) and type names // only. It should not contain member names. includes = [ 'com.example.pizza.*' ] // Proto types to excluded generated sources for. Types listed here will not // be generated for this target. // // This list should contain package names (suffixed with `.*`) and type names // only. It should not contain member names. excludes = [ 'com.example.sales.*' ] // True if types emitted for this target should not also be emitted for other // targets. Use this to cause multiple outputs to be emitted for the same input // type. exclusive = false // Directory to emit to. out \"${buildDir}/custom\" // True for emitted types to implement android.os.Parcelable. android = true // True for emitted types to implement APIs for easier migration from the Java // target. javaInterop = true // True to emit types for options declared on messages, fields, etc. emitDeclaredOptions = false , // True to emit annotations for options applied on messages, fields, etc. emitAppliedOptions = true , // `suspending` to generate coroutines APIs that require a Kotlin coroutines context. // `blocking` to generate blocking APIs callable by Java and Kotlin. rpcCallStyle = 'blocking' // `client` to generate interfaces best suited to sending outbound calls. // `server` to generate interfaces best suited to receiving inbound calls. // `none` to not generate services. rpcRole = 'server' // True for emitted services to implement one interface per RPC. singleMethodServices = true } } Proto \u00b6 Here\u2019s an exhaustive Proto configuration. You can use this target to generate a pruned proto schema, or to pretty-print one. Note that even with multiple outputs set, the proto target will always emit all types, all services, and all extensions of the schema. wire { proto { // Directory to emit to. out \"${buildDir}/custom\" } } Custom Handlers \u00b6 Wire has an unstable API to generate code or other artifacts from a proto schema. You\u2019ll need to implement the CustomHandlerBeta interface. See our MarkdownHandler for a sample implementation. Note that this interface is subject to change. Build that into an jar artifact and add that as a buildscript dependency to your Gradle project. buildscript { dependencies { classpath \"com.example.my-custom-handler:my-custom-handler:1.0.0\" } } Next configure the Wire plugin to call your custom handler. Here\u2019s an exhaustive custom configuration. Booleans and enums are shown with their non-default behavior. wire { custom { // The name of a Java class to generate code with. This class must: // * be in the buildscript dependencies for this Gradle project // * be a public class // * have a public no-arguments constructor // * implement the com.squareup.wire.schema.CustomHandlerBeta interface customHandlerClass = \"com.example.MyCustomHandler\" // These options work the same as the java and kotlin targets above. includes = [ 'com.example.pizza.*' ] excludes = [ 'com.example.sales.*' ] exclusive = false out \"${buildDir}/custom\" } }","title":"Gradle Plugin"},{"location":"wire_compiler/#wire-compiler-gradle-plugin","text":"Wire has two key components: a compiler that generates Kotlin and Java code at build time, and a runtime library that supports the generated code when your program executes. The compiler is very configurable; this guide explains its features and their use.","title":"Wire Compiler &amp; Gradle Plugin"},{"location":"wire_compiler/#getting-started","text":"The best way to configure and execute the Wire compiler is via our Gradle plugin. It requires Gradle 5.5 or newer. A typical project has .proto files in the standard src/main/proto directory. src/ main/ proto/ com/ example/ pizza/ pizza_delivery.proto pizza.proto sales/ price.proto store.proto geo/ address.proto country.proto kotlin/ com/ example/ pizza/ PizzaApp.kt test/ kotlin/ com/ example/ pizza/ PizzaAppTest.kt build.gradle Because this project uses the default configuration, plugin setup is easy. Just a simple block in build.gradle , Using plugin application: buildscript { repositories { mavenCentral () } dependencies { classpath 'com.squareup.wire:wire-gradle-plugin:<version>' } } apply plugin: 'com.squareup.wire' wire { kotlin {} } Using the plugins DSL: plugins { id 'application' id 'org.jetbrains.kotlin.jvm' id 'com.squareup.wire' } wire { kotlin {} } The plugin will read the .proto schema definitions, validate them, link them, and generate Kotlin code. It uses KotlinPoet internally to generate compact and legible source files. Wire will generate files in build/generated/source/wire . It\u2019ll also register this directory as a source directory for the project so the generated sources are compiled by the Kotlin compiler. Replace kotlin with java to generate Java sources instead.","title":"Getting Started"},{"location":"wire_compiler/#inputs-and-outputs","text":"Wire can pull source .proto schema definitions from a local directory, a local .jar file, or an external artifact specified with Maven coordinates . wire { sourcePath { srcDir 'src/main/protos' } sourcePath { srcJar 'lib/pizza-protos.jar' } sourcePath { srcJar 'com.example.pizza:pizza-protos:1.0.0' } ... } If your resource or directory contains more .proto files than you need to compile you can constrain the inputs to specific files: wire { sourcePath { srcDir 'src/main/protos' include 'com/example/pizza/pizza_delivery.proto' include 'com/example/pizza/pizza.proto' } } Wildcards (with two stars) are also accepted: wire { sourcePath { srcDir 'src/main/protos' include 'com/example/pizza/**' } ... } Wire can emit both Java and Kotlin in the same build. Use includes to specify which types are emitted for a target language; subsequent languages will emit what\u2019s left over. wire { ... kotlin { // Kotlin emits the matched types only. includes = [ 'com.example.pizza.*' ] } java { // Java gets everything else! } } Note that sources are specified as file system paths (slash delimiter) and targets are specified as Proto type names (dot delimiter). You may also specify targets with excludes. If you have both includes and excludes, excludes take precedence. wire { ... kotlin { // Kotlin emits everything but sales and geo packages. excludes = [ 'com.example.sales.*' , 'com.example.geo.*' ] } java { // Java gets those because they're left over. } } Wire will print a warning if any name in includes or excludes is unused. When configuring Wire you must use the package name from the .proto file\u2019s package declaration. The option java_package name is not used for Wire configuration.","title":"Inputs and Outputs"},{"location":"wire_compiler/#proto-path-for-libraries","text":"Large projects may span multiple modules. To support this Wire has a \u2018proto path\u2019. The .proto schema files on this path are used for linking and validation, but they do not yield files in the generated output. The proto path supports the same inputs as the source path: directories, .jar files, and Maven coordinates. Similarly, the proto path may be filtered with include . wire { protoPath { srcDir 'src/main/address-protos' } protoPath { srcJar 'lib/price.jar' } protoPath { srcJar 'com.example:countries:1.0.0' include 'com/example/geo/country.proto' } ... } The source path and proto path are linked together but only types on the source path are generated.","title":"Proto Path for Libraries"},{"location":"wire_compiler/#dependencies-between-gradle-modules","text":"Wire provides support to define dependencies between modules within the same project. A module can include its .proto files into the output resources. Use this when your .jar file can be used as a library for other proto or Wire projects. Note that only the .proto files used in the library will be included. wire { protoLibrary = true } Wire also creates two configurations, protoPath and protoSource you can use to define a dependency on another proto or Wire project. dependencies { // The task `:common-protos:jar` will be added into the dependency // graph of this module for the Wire generating tasks. protoPath ( project ( ':common-protos' )) implementation ( project ( ':common-protos' )) } wire { kotlin { } } Note that protoPath and protoSource dependencies are not transitive by default. If needed, you can change it manually. configurations . protoPath { transitive = true }","title":"Dependencies between Gradle Modules"},{"location":"wire_compiler/#pruning","text":"For mobile projects it\u2019s easy to generate a lot of unnecessary code. For example, a .proto schema might support types for obsolete features. General-purpose code-shrinking tools like R8 and ProGuard have difficulty shrinking Wire-generated sources because the encode() and decode() functions still use them. Instead, Wire offers its own code shrinker to eliminate unwanted declarations early. Use prune to precisely eliminate an unwanted type or member. These will be eliminated along with all references to them. wire { ... prune 'com.example.store.Store' prune 'com.example.geo.Country' ... } Alternately you may prefer to specify what to keep, pruning everything not reachable from that set. wire { ... root 'com.example.pizza.PizzaDelivery' ... }","title":"Pruning"},{"location":"wire_compiler/#version-matching","text":"Another way to prune obsolete fields is to assign them a version, then to generate your code against a version range or a unique version. The fields out of the version range will get pruned. Members may be declared with wire.since and wire.until options; enum constant can use wire.constant_since and wire.constant_until . For example, these options declare a field age that was replaced with birth_date in version \u201c5.0\u201d: import \"wire/extensions.proto\" ; message Singer { optional string name = 1 ; optional int32 age = 2 [( wire.until ) = \"5.0\" ]; optional Date birth_date = 3 [( wire.since ) = \"5.0\" ]; } Client code should typically target a single version. In this example, clients will have the name and birth_date fields only. wire { onlyVersion \"5.0\" } Service code that supports many clients should support the union of versions of all supported clients. Such code will have name , as well as both the age and birth_date fields. wire { sinceVersion \"3.0\" untilVersion \"6.0\" }","title":"Version Matching"},{"location":"wire_compiler/#proto-libraries","text":"By default, .proto input files are not included in the generated .jar artifact. Use the protoLibrary option to include them: wire { protoLibrary = true } This is most useful when building .jar files for other wire tasks to use as dependencies. Note that only the true sources are included \u2013 proto messages that are pruned or not used are not included in the output artifact.","title":"Proto Libraries"},{"location":"wire_compiler/#customizing-output","text":"","title":"Customizing Output"},{"location":"wire_compiler/#java","text":"Here\u2019s an exhaustive Java configuration. Booleans are shown with their non-default behavior. wire { java { // Proto types to include generated sources for. Types listed here will be // generated for this/ target and not for subsequent targets in the task. // // This list should contain package names (suffixed with `.*`) and type names // only. It should not contain member names. includes = [ 'com.example.pizza.*' ] // Proto types to excluded generated sources for. Types listed here will not // be generated for this target. // // This list should contain package names (suffixed with `.*`) and type names // only. It should not contain member names. excludes = [ 'com.example.sales.*' ] // True if types emitted for this target should not also be emitted for other // targets. Use this to cause multiple outputs to be emitted for the same input // type. exclusive = false // Directory to emit to. out \"${buildDir}/custom\" // True for emitted types to implement android.os.Parcelable. android = true // True to enable the androidx.annotation.Nullable annotation where applicable. androidAnnotations = true // True to emit code that uses reflection for reading, writing, and toString // methods which are normally implemented with generated code. compact = true // True to emit types for options declared on messages, fields, etc. emitDeclaredOptions = false , // True to emit annotations for options applied on messages, fields, etc. emitAppliedOptions = true } }","title":"Java"},{"location":"wire_compiler/#kotlin","text":"Here\u2019s an exhaustive Kotlin configuration. Booleans and enums are shown with their non-default behavior. wire { kotlin { // Proto types to include generated sources for. Types listed here will be // generated for this/ target and not for subsequent targets in the task. // // This list should contain package names (suffixed with `.*`) and type names // only. It should not contain member names. includes = [ 'com.example.pizza.*' ] // Proto types to excluded generated sources for. Types listed here will not // be generated for this target. // // This list should contain package names (suffixed with `.*`) and type names // only. It should not contain member names. excludes = [ 'com.example.sales.*' ] // True if types emitted for this target should not also be emitted for other // targets. Use this to cause multiple outputs to be emitted for the same input // type. exclusive = false // Directory to emit to. out \"${buildDir}/custom\" // True for emitted types to implement android.os.Parcelable. android = true // True for emitted types to implement APIs for easier migration from the Java // target. javaInterop = true // True to emit types for options declared on messages, fields, etc. emitDeclaredOptions = false , // True to emit annotations for options applied on messages, fields, etc. emitAppliedOptions = true , // `suspending` to generate coroutines APIs that require a Kotlin coroutines context. // `blocking` to generate blocking APIs callable by Java and Kotlin. rpcCallStyle = 'blocking' // `client` to generate interfaces best suited to sending outbound calls. // `server` to generate interfaces best suited to receiving inbound calls. // `none` to not generate services. rpcRole = 'server' // True for emitted services to implement one interface per RPC. singleMethodServices = true } }","title":"Kotlin"},{"location":"wire_compiler/#proto","text":"Here\u2019s an exhaustive Proto configuration. You can use this target to generate a pruned proto schema, or to pretty-print one. Note that even with multiple outputs set, the proto target will always emit all types, all services, and all extensions of the schema. wire { proto { // Directory to emit to. out \"${buildDir}/custom\" } }","title":"Proto"},{"location":"wire_compiler/#custom-handlers","text":"Wire has an unstable API to generate code or other artifacts from a proto schema. You\u2019ll need to implement the CustomHandlerBeta interface. See our MarkdownHandler for a sample implementation. Note that this interface is subject to change. Build that into an jar artifact and add that as a buildscript dependency to your Gradle project. buildscript { dependencies { classpath \"com.example.my-custom-handler:my-custom-handler:1.0.0\" } } Next configure the Wire plugin to call your custom handler. Here\u2019s an exhaustive custom configuration. Booleans and enums are shown with their non-default behavior. wire { custom { // The name of a Java class to generate code with. This class must: // * be in the buildscript dependencies for this Gradle project // * be a public class // * have a public no-arguments constructor // * implement the com.squareup.wire.schema.CustomHandlerBeta interface customHandlerClass = \"com.example.MyCustomHandler\" // These options work the same as the java and kotlin targets above. includes = [ 'com.example.pizza.*' ] excludes = [ 'com.example.sales.*' ] exclusive = false out \"${buildDir}/custom\" } }","title":"Custom Handlers"},{"location":"wire_grpc/","text":"Wire gRPC \u00b6 The Wire compiler will generate interfaces for your service RPCs defined in your protobuf schema; under the condition that the target is set to Kotlin. Getting Started \u00b6 You can configure how your services are generated via the Gradle plugin : wire { // Kotlin target will generate code for services. kotlin { // `client` to generate interfaces best suited to sending outbound calls. // `server` to generate interfaces best suited to receiving inbound calls. rpcRole = 'server' // Server only // `suspending` to generate coroutines APIs that require a Kotlin coroutines context. // `blocking` to generate blocking APIs callable by Java and Kotlin. rpcCallStyle = 'suspending' // Server only // True for emitted services to generate one interface per RPC. singleMethodServices = false } } The generated code varies depending on your RPC role, namely client or server. We\u2019ll use the following schema to demonstrate how they differ: syntax = \"proto2\" ; package routeguide ; service RouteGuide { // A simple RPC. rpc GetFeature ( Point ) returns ( Feature ) {} // A server-to-client streaming RPC. rpc ListFeatures ( Rectangle ) returns ( stream Feature ) {} // A client-to-server streaming RPC. rpc RecordRoute ( stream Point ) returns ( RouteSummary ) {} // A Bidirectional streaming RPC. rpc RouteChat ( stream RouteNote ) returns ( stream RouteNote ) {} } gRPC for Clients \u00b6 For the schema RouteGuide , when rpcRole is client , the Wire compiler will generate the following interface: interface RouteGuideClient : Service { fun GetFeature (): GrpcCall < Point , Feature > fun ListFeatures (): GrpcStreamingCall < Rectangle , Feature > fun RecordRoute (): GrpcStreamingCall < Point , RouteSummary > fun RouteChat (): GrpcStreamingCall < RouteNote , RouteNote > } For streaming APIs, we return a GrpcStreamingCall , and a GrpcCall otherwise. With these objects, the caller can communicate with the server. Both blocking and suspending APIs are provided. Wire runtime \u00b6 To help you instantiate your service, we provide a small runtime, namely GrpcClient : val grpcClient = GrpcClient . Builder () . client ( OkHttpClient . Builder (). protocols ( listOf ( Protocol . H2_PRIOR_KNOWLEDGE )). build ()) . baseUrl ( serverUrl ) . build () val routeGuideClient = grpcClient . create ( RouteGuideClient :: class ) gRPC for Servers \u00b6 Blocking APIs \u00b6 Following this configuration: wire { kotlin { rpcRole = 'server' rpcCallStyle = 'blocking' } } the Wire compiler will generate the following interface for the server to implement: interface RouteGuideBlockingServer : Service { fun GetFeature ( request : Point ): Feature fun ListFeatures ( request : Rectangle , response : MessageSink < Feature >) fun RecordRoute ( request : MessageSource < Point >): RouteSummary fun RouteChat ( request : MessageSource < RouteNote >, response : MessageSink < RouteNote >) } For streaming connections, the server can use Wire\u2019s blocking APIs: MessageSource and MessageSink . Suspending APIs \u00b6 Following this configuration: wire { kotlin { rpcRole = 'server' rpcCallStyle = 'suspending' } } the Wire compiler will generate the following interface for the server to implement: interface RouteGuideServer : Service { suspend fun GetFeature ( request : Point ): Feature fun ListFeatures ( request : Rectangle , response : SendChannel < Feature >) fun RecordRoute ( request : ReceiveChannel < Point >): RouteSummary fun RouteChat ( request : ReceiveChannel < RouteNote >, response : SendChannel < RouteNote >) } The server can use Kotlin coroutines\u2019 suspend and Channels mechanisms to execute suspending network calls. Implementing Client Interfaces \u00b6 Wire has helper functions to make it easier to implement its client interfaces. This can be particularly useful for testing. It supports both streaming and non-streaming APIs in Kotlin: class FakeRouteGuideClient : RouteGuideClient { override fun GetFeature (): GrpcCall < Point , Feature > { return GrpcCall { request : Point -> return @GrpcCall Feature ( name = \"test\" , location = request ) } } override fun RouteChat (): GrpcStreamingCall < RouteNote , RouteNote > { return GrpcStreamingCall { requests : ReceiveChannel < RouteNote >, responses : SendChannel < RouteNote > -> try { requests . consumeEach { routeNote : RouteNote -> responses . send ( RouteNote ( message = \"ACK: ${routeNote.message}\" )) } } finally { responses . close () } } } ... } The GrpcCall and GrpcStreamingCall functions are well suited to expression functions: class FakeRouteGuideClient : RouteGuideClient { override fun GetFeature () = GrpcCall < Point , Feature > { request -> return @GrpcCall Feature ( name = \"test\" , location = request ) } override fun RouteChat () = GrpcStreamingCall < RouteNote , RouteNote > { requests , responses -> try { requests . consumeEach { routeNote -> responses . send ( RouteNote ( message = \"ACK: ${routeNote.message}\" )) } } finally { responses . close () } } ... } The client interface may also be implemented in Java. Wire only offers a non-streaming helper function. The GrpcStreamingCall above uses coroutines which is Kotlin-only. public class FakeRouteGuideClient implements RouteGuideClient { @Override public GrpcCall < Point , Feature > GetFeature () { return GrpcCalls . grpcCall ( new Function1 < Point , Feature > () { @Override public Feature invoke ( Point request ) { return new Feature . Builder () . name ( \"test\" ) . location ( request ) . build (); } }); } ... } These similarly interact nicely with Java lambdas. Sample \u00b6 Check out our sample project demonstrating bidirectional communication between an Android application and a server. Get it \u00b6 Use Wire runtime Gradle coordinates: implementation ( \"com.squareup.wire:wire-runtime:LATEST_VERSION\" ) In addition, to use Wire gRPC for clients, use these new Gradle coordinates: implementation ( \"com.squareup.wire:wire-grpc-client:LATEST_VERSION\" )","title":"gRPC"},{"location":"wire_grpc/#wire-grpc","text":"The Wire compiler will generate interfaces for your service RPCs defined in your protobuf schema; under the condition that the target is set to Kotlin.","title":"Wire gRPC"},{"location":"wire_grpc/#getting-started","text":"You can configure how your services are generated via the Gradle plugin : wire { // Kotlin target will generate code for services. kotlin { // `client` to generate interfaces best suited to sending outbound calls. // `server` to generate interfaces best suited to receiving inbound calls. rpcRole = 'server' // Server only // `suspending` to generate coroutines APIs that require a Kotlin coroutines context. // `blocking` to generate blocking APIs callable by Java and Kotlin. rpcCallStyle = 'suspending' // Server only // True for emitted services to generate one interface per RPC. singleMethodServices = false } } The generated code varies depending on your RPC role, namely client or server. We\u2019ll use the following schema to demonstrate how they differ: syntax = \"proto2\" ; package routeguide ; service RouteGuide { // A simple RPC. rpc GetFeature ( Point ) returns ( Feature ) {} // A server-to-client streaming RPC. rpc ListFeatures ( Rectangle ) returns ( stream Feature ) {} // A client-to-server streaming RPC. rpc RecordRoute ( stream Point ) returns ( RouteSummary ) {} // A Bidirectional streaming RPC. rpc RouteChat ( stream RouteNote ) returns ( stream RouteNote ) {} }","title":"Getting Started"},{"location":"wire_grpc/#grpc-for-clients","text":"For the schema RouteGuide , when rpcRole is client , the Wire compiler will generate the following interface: interface RouteGuideClient : Service { fun GetFeature (): GrpcCall < Point , Feature > fun ListFeatures (): GrpcStreamingCall < Rectangle , Feature > fun RecordRoute (): GrpcStreamingCall < Point , RouteSummary > fun RouteChat (): GrpcStreamingCall < RouteNote , RouteNote > } For streaming APIs, we return a GrpcStreamingCall , and a GrpcCall otherwise. With these objects, the caller can communicate with the server. Both blocking and suspending APIs are provided.","title":"gRPC for Clients"},{"location":"wire_grpc/#wire-runtime","text":"To help you instantiate your service, we provide a small runtime, namely GrpcClient : val grpcClient = GrpcClient . Builder () . client ( OkHttpClient . Builder (). protocols ( listOf ( Protocol . H2_PRIOR_KNOWLEDGE )). build ()) . baseUrl ( serverUrl ) . build () val routeGuideClient = grpcClient . create ( RouteGuideClient :: class )","title":"Wire runtime"},{"location":"wire_grpc/#grpc-for-servers","text":"","title":"gRPC for Servers"},{"location":"wire_grpc/#blocking-apis","text":"Following this configuration: wire { kotlin { rpcRole = 'server' rpcCallStyle = 'blocking' } } the Wire compiler will generate the following interface for the server to implement: interface RouteGuideBlockingServer : Service { fun GetFeature ( request : Point ): Feature fun ListFeatures ( request : Rectangle , response : MessageSink < Feature >) fun RecordRoute ( request : MessageSource < Point >): RouteSummary fun RouteChat ( request : MessageSource < RouteNote >, response : MessageSink < RouteNote >) } For streaming connections, the server can use Wire\u2019s blocking APIs: MessageSource and MessageSink .","title":"Blocking APIs"},{"location":"wire_grpc/#suspending-apis","text":"Following this configuration: wire { kotlin { rpcRole = 'server' rpcCallStyle = 'suspending' } } the Wire compiler will generate the following interface for the server to implement: interface RouteGuideServer : Service { suspend fun GetFeature ( request : Point ): Feature fun ListFeatures ( request : Rectangle , response : SendChannel < Feature >) fun RecordRoute ( request : ReceiveChannel < Point >): RouteSummary fun RouteChat ( request : ReceiveChannel < RouteNote >, response : SendChannel < RouteNote >) } The server can use Kotlin coroutines\u2019 suspend and Channels mechanisms to execute suspending network calls.","title":"Suspending APIs"},{"location":"wire_grpc/#implementing-client-interfaces","text":"Wire has helper functions to make it easier to implement its client interfaces. This can be particularly useful for testing. It supports both streaming and non-streaming APIs in Kotlin: class FakeRouteGuideClient : RouteGuideClient { override fun GetFeature (): GrpcCall < Point , Feature > { return GrpcCall { request : Point -> return @GrpcCall Feature ( name = \"test\" , location = request ) } } override fun RouteChat (): GrpcStreamingCall < RouteNote , RouteNote > { return GrpcStreamingCall { requests : ReceiveChannel < RouteNote >, responses : SendChannel < RouteNote > -> try { requests . consumeEach { routeNote : RouteNote -> responses . send ( RouteNote ( message = \"ACK: ${routeNote.message}\" )) } } finally { responses . close () } } } ... } The GrpcCall and GrpcStreamingCall functions are well suited to expression functions: class FakeRouteGuideClient : RouteGuideClient { override fun GetFeature () = GrpcCall < Point , Feature > { request -> return @GrpcCall Feature ( name = \"test\" , location = request ) } override fun RouteChat () = GrpcStreamingCall < RouteNote , RouteNote > { requests , responses -> try { requests . consumeEach { routeNote -> responses . send ( RouteNote ( message = \"ACK: ${routeNote.message}\" )) } } finally { responses . close () } } ... } The client interface may also be implemented in Java. Wire only offers a non-streaming helper function. The GrpcStreamingCall above uses coroutines which is Kotlin-only. public class FakeRouteGuideClient implements RouteGuideClient { @Override public GrpcCall < Point , Feature > GetFeature () { return GrpcCalls . grpcCall ( new Function1 < Point , Feature > () { @Override public Feature invoke ( Point request ) { return new Feature . Builder () . name ( \"test\" ) . location ( request ) . build (); } }); } ... } These similarly interact nicely with Java lambdas.","title":"Implementing Client Interfaces"},{"location":"wire_grpc/#sample","text":"Check out our sample project demonstrating bidirectional communication between an Android application and a server.","title":"Sample"},{"location":"wire_grpc/#get-it","text":"Use Wire runtime Gradle coordinates: implementation ( \"com.squareup.wire:wire-runtime:LATEST_VERSION\" ) In addition, to use Wire gRPC for clients, use these new Gradle coordinates: implementation ( \"com.squareup.wire:wire-grpc-client:LATEST_VERSION\" )","title":"Get it"},{"location":"wire_json/","text":"Wire JSON \u00b6 Wire offers JSON serialization over Moshi or Gson . We provide an adapter factory for both to configure them to deal with protobuf specifics. Moshi \u00b6 Moshi support is part of the wire-moshi-adapter module. It has to be added to the project dependencies in order to plug the WireJsonAdapterFactory into Moshi. The Maven coordinates are: com.squareup.wire:wire-moshi-adapter:<version> val moshi = Moshi . Builder () . add ( WireJsonAdapterFactory ()) . build () val adapter = moshi . adapter ( Pizza :: class . java ) val pizza : Pizza = ... val json = adapter . toJson ( pizza ) val parsedPizza = adapter . fromJson ( json ) Gson \u00b6 Moshi support is part of the wire-gson-support module. It has to be added to the project dependencies in order to plug the WireTypeAdapterFactory into Gson. The Maven coordinates are: com.squareup.wire:wire-gson-support:<version> val gson = GsonBuilder () . registerTypeAdapterFactory ( WireTypeAdapterFactory ()) . create () val adapter = gson . adapter ( Pizza :: class . java ) val pizza : Pizza = ... val json = adapter . toJson ( pizza ) val parsedPizza = adapter . fromJson ( json ) Protoc \u00b6 Wire is interoperable with protoc for all proto3 messages. The JSON representation of proto2 is unspecified. JSON representations of proto2 messages from Wire and protoc are not interoperable. Note that by default Protoc throws an error for unknown fields. Wire will ignore them.","title":"JSON"},{"location":"wire_json/#wire-json","text":"Wire offers JSON serialization over Moshi or Gson . We provide an adapter factory for both to configure them to deal with protobuf specifics.","title":"Wire JSON"},{"location":"wire_json/#moshi","text":"Moshi support is part of the wire-moshi-adapter module. It has to be added to the project dependencies in order to plug the WireJsonAdapterFactory into Moshi. The Maven coordinates are: com.squareup.wire:wire-moshi-adapter:<version> val moshi = Moshi . Builder () . add ( WireJsonAdapterFactory ()) . build () val adapter = moshi . adapter ( Pizza :: class . java ) val pizza : Pizza = ... val json = adapter . toJson ( pizza ) val parsedPizza = adapter . fromJson ( json )","title":"Moshi"},{"location":"wire_json/#gson","text":"Moshi support is part of the wire-gson-support module. It has to be added to the project dependencies in order to plug the WireTypeAdapterFactory into Gson. The Maven coordinates are: com.squareup.wire:wire-gson-support:<version> val gson = GsonBuilder () . registerTypeAdapterFactory ( WireTypeAdapterFactory ()) . create () val adapter = gson . adapter ( Pizza :: class . java ) val pizza : Pizza = ... val json = adapter . toJson ( pizza ) val parsedPizza = adapter . fromJson ( json )","title":"Gson"},{"location":"wire_json/#protoc","text":"Wire is interoperable with protoc for all proto3 messages. The JSON representation of proto2 is unspecified. JSON representations of proto2 messages from Wire and protoc are not interoperable. Note that by default Protoc throws an error for unknown fields. Wire will ignore them.","title":"Protoc"},{"location":"wire_vs_protoc/","text":"Wire versus Protoc \u00b6 Non-Primitive Types \u00b6 Protoc generates literal equivalents for all the Proto3 new types like empty , struct , etc. Wire tries to reuse existing types in the corresponding language when possible. The only new type Wire brings is AnyMessage for the google.protobuf.Any proto type. Any \u00b6 The Any type wraps an arbitrary protobuf message by holding a field to identify its type and another field for storing the serialized representation of the wrapped message. Wire comes with its own AnyMessage type to represent google.protobuf.Any . class AnyMessage ( val typeUrl : String , val value : okio . ByteString ) It comes with a few methods to wrap or unwrap the embedded message. // Wire val anyMessage : AnyMessage = AnyMessage . pack ( person ) val person : Person = anyMessage . unpack ( Person . ADAPTER ) // Protoc val any : Any = Any . pack ( foo ) val person : Person = any . unpack ( Person . class ) Duration & Timestamp \u00b6 Both google.protobuf.Duration and google.protobuf.Timestamp types will be generated by using their JVM equivalent: java.time.Duration and java.time.Instant . For non-JVM platforms, we provide two new Wire types with the same APIs: class com . squareup . wire . Duration { fun getSeconds (): Long fun getNano (): Int } fun durationOfSeconds ( seconds : Long , nano : Long ): Duration class com . squareup . wire . Instant { fun getEpochSecond (): Long fun getNano (): Int } fun ofEpochSecond ( epochSecond : Long , nano : Long ): Instant // Wire val duration : java . time . Duration = Duration . standardMinutes ( 15 ) val instant : java . time . Instant = Instant . now () // Protoc val duration : google . protobuf . Duration = Duration . newBuilder () . setSeconds ( 60 * 15 ) . build () val instant : google . protobuf . Timestamp = Timestamps . fromMillis ( System . currentTimeMillis ()) Struct \u00b6 google.protobuf.Struct is meant mainly to represent JSON objects in code. Instead of building new types, Wire reuses Java/Kotlin native types to represent all Struct types. Google Protobuf Type Wire\u2019s Java Equivalent Wire\u2019s Kotlin Equivalent Struct Map<String, ?> Map<String, ?>? ListValue List<?> List<?>? Value Object Any? NullValue Void Nothing? One difference worth noting between Protoc and Wire is that Protoc can make the difference between an absent value, and a null value, Wire doesn\u2019t. Wire will always write null s in JSON objects except at the root of it. // Wire val struct = mapOf ( \"a\" to 1.0 ) val list = listOf ( \u201c b \u201d , 2.0 ) val boolValue = true val nullValue = null // Protoc val struct : Struct = Struct . newBuilder (). apply { putFields ( \u201c a \u201d , Value . newBuilder . setNumberValue ( 1.0 ). build ()) } . build () val list : List = ListValue . newBuilder (). apply { addValues ( Value . newBuilder . setStringValue ( \u201c a \u201d ). build ()) addValues ( Value . newBuilder . setNumberValue ( 2.0 ). build ()) } . build () val boolValue = Value . newBuilder . setBoolValue ( true ). build () val nullValue = Value . newBuilder (). setNullValue ( NullValue . NULL_VALUE ). build () Wrappers \u00b6 Wire didn\u2019t create new types for wrappers either, each wrapper will be represented by a nullable version of the primitive type it defines. For instance google.protobuf.FloatValue will be represented in Java by the float boxed type @Nullable Float , in Kotlin by Float? . // Wire val floatValue = 33.3f // Protoc val floatValue = FloatValue . newBuilder (). setValue ( 33.3f ). build () JSON \u00b6 While Proto2 didn\u2019t, Proto3 defines Protobuf serialization over JSON. Wire and Protoc are interoperable but their API are quite different. Wire offers JSON serialization over Moshi or Gson . Protoc brings its own JsonFormatter. Beware that Protoc throws an error for unknown fields, you need to configure it to opt-out of this behavior! // Wire & Moshi val moshi = Moshi . Builder () . add ( WireJsonAdapterFactory ()) . build () val adapter = moshi . adapter ( Pizza :: class . java ) val pizza : Pizza = ... val json = adapter . toJson ( pizza ) val parsedPizza = adapter . fromJson ( json ) // Protoc val pizza : PizzaOuterClass . Pizza = \u2026 val json = JsonFormat . printer (). print ( value ) val jsonParser = JsonFormat . parser (). ignoringUnknownFields () val parsedBuilder = PizzaOuterClass . Pizza . newBuilder () jsonParser . merge ( json , parsedBuilder ) val parsedPizza = parsedBuilder . build ()","title":"Wire vs Protoc"},{"location":"wire_vs_protoc/#wire-versus-protoc","text":"","title":"Wire versus Protoc"},{"location":"wire_vs_protoc/#non-primitive-types","text":"Protoc generates literal equivalents for all the Proto3 new types like empty , struct , etc. Wire tries to reuse existing types in the corresponding language when possible. The only new type Wire brings is AnyMessage for the google.protobuf.Any proto type.","title":"Non-Primitive Types"},{"location":"wire_vs_protoc/#any","text":"The Any type wraps an arbitrary protobuf message by holding a field to identify its type and another field for storing the serialized representation of the wrapped message. Wire comes with its own AnyMessage type to represent google.protobuf.Any . class AnyMessage ( val typeUrl : String , val value : okio . ByteString ) It comes with a few methods to wrap or unwrap the embedded message. // Wire val anyMessage : AnyMessage = AnyMessage . pack ( person ) val person : Person = anyMessage . unpack ( Person . ADAPTER ) // Protoc val any : Any = Any . pack ( foo ) val person : Person = any . unpack ( Person . class )","title":"Any"},{"location":"wire_vs_protoc/#duration-timestamp","text":"Both google.protobuf.Duration and google.protobuf.Timestamp types will be generated by using their JVM equivalent: java.time.Duration and java.time.Instant . For non-JVM platforms, we provide two new Wire types with the same APIs: class com . squareup . wire . Duration { fun getSeconds (): Long fun getNano (): Int } fun durationOfSeconds ( seconds : Long , nano : Long ): Duration class com . squareup . wire . Instant { fun getEpochSecond (): Long fun getNano (): Int } fun ofEpochSecond ( epochSecond : Long , nano : Long ): Instant // Wire val duration : java . time . Duration = Duration . standardMinutes ( 15 ) val instant : java . time . Instant = Instant . now () // Protoc val duration : google . protobuf . Duration = Duration . newBuilder () . setSeconds ( 60 * 15 ) . build () val instant : google . protobuf . Timestamp = Timestamps . fromMillis ( System . currentTimeMillis ())","title":"Duration &amp; Timestamp"},{"location":"wire_vs_protoc/#struct","text":"google.protobuf.Struct is meant mainly to represent JSON objects in code. Instead of building new types, Wire reuses Java/Kotlin native types to represent all Struct types. Google Protobuf Type Wire\u2019s Java Equivalent Wire\u2019s Kotlin Equivalent Struct Map<String, ?> Map<String, ?>? ListValue List<?> List<?>? Value Object Any? NullValue Void Nothing? One difference worth noting between Protoc and Wire is that Protoc can make the difference between an absent value, and a null value, Wire doesn\u2019t. Wire will always write null s in JSON objects except at the root of it. // Wire val struct = mapOf ( \"a\" to 1.0 ) val list = listOf ( \u201c b \u201d , 2.0 ) val boolValue = true val nullValue = null // Protoc val struct : Struct = Struct . newBuilder (). apply { putFields ( \u201c a \u201d , Value . newBuilder . setNumberValue ( 1.0 ). build ()) } . build () val list : List = ListValue . newBuilder (). apply { addValues ( Value . newBuilder . setStringValue ( \u201c a \u201d ). build ()) addValues ( Value . newBuilder . setNumberValue ( 2.0 ). build ()) } . build () val boolValue = Value . newBuilder . setBoolValue ( true ). build () val nullValue = Value . newBuilder (). setNullValue ( NullValue . NULL_VALUE ). build ()","title":"Struct"},{"location":"wire_vs_protoc/#wrappers","text":"Wire didn\u2019t create new types for wrappers either, each wrapper will be represented by a nullable version of the primitive type it defines. For instance google.protobuf.FloatValue will be represented in Java by the float boxed type @Nullable Float , in Kotlin by Float? . // Wire val floatValue = 33.3f // Protoc val floatValue = FloatValue . newBuilder (). setValue ( 33.3f ). build ()","title":"Wrappers"},{"location":"wire_vs_protoc/#json","text":"While Proto2 didn\u2019t, Proto3 defines Protobuf serialization over JSON. Wire and Protoc are interoperable but their API are quite different. Wire offers JSON serialization over Moshi or Gson . Protoc brings its own JsonFormatter. Beware that Protoc throws an error for unknown fields, you need to configure it to opt-out of this behavior! // Wire & Moshi val moshi = Moshi . Builder () . add ( WireJsonAdapterFactory ()) . build () val adapter = moshi . adapter ( Pizza :: class . java ) val pizza : Pizza = ... val json = adapter . toJson ( pizza ) val parsedPizza = adapter . fromJson ( json ) // Protoc val pizza : PizzaOuterClass . Pizza = \u2026 val json = JsonFormat . printer (). print ( value ) val jsonParser = JsonFormat . parser (). ignoringUnknownFields () val parsedBuilder = PizzaOuterClass . Pizza . newBuilder () jsonParser . merge ( json , parsedBuilder ) val parsedPizza = parsedBuilder . build ()","title":"JSON"},{"location":"3.x/wire-grpc-client/","text":"","title":"Index"},{"location":"3.x/wire-grpc-client/alltypes/","text":"All Types \u00b6 Name Summary com.squareup.wire.GrpcCall A single call to a remote server. This call sends a single request value and receives a single response value. A gRPC call cannot be executed twice. com.squareup.wire.GrpcClient com.squareup.wire.GrpcException com.squareup.wire.GrpcMethod com.squareup.wire.GrpcStatus com.squareup.wire.GrpcStreamingCall A single streaming call to a remote server. This class handles three streaming call types: kotlin.String (extensions in package com.squareup.wire) kotlin.String (extensions in package com.squareup.wire) kotlin.String (extensions in package com.squareup.wire) kotlin.String (extensions in package com.squareup.wire) com.squareup.wire.WireGrpcExperimental Marker annotation for experimental Wire gRPC features.","title":"Index"},{"location":"3.x/wire-grpc-client/alltypes/#all-types","text":"Name Summary com.squareup.wire.GrpcCall A single call to a remote server. This call sends a single request value and receives a single response value. A gRPC call cannot be executed twice. com.squareup.wire.GrpcClient com.squareup.wire.GrpcException com.squareup.wire.GrpcMethod com.squareup.wire.GrpcStatus com.squareup.wire.GrpcStreamingCall A single streaming call to a remote server. This class handles three streaming call types: kotlin.String (extensions in package com.squareup.wire) kotlin.String (extensions in package com.squareup.wire) kotlin.String (extensions in package com.squareup.wire) kotlin.String (extensions in package com.squareup.wire) com.squareup.wire.WireGrpcExperimental Marker annotation for experimental Wire gRPC features.","title":"All Types"},{"location":"3.x/wire-grpc-client/com.squareup.wire/","text":"","title":"wire-grpc-client"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/","text":"wire-grpc-client / com.squareup.wire / GrpcCall GrpcCall \u00b6 fun <S : Any , R : Any > GrpcCall(function: ( S ) -> R ): <ERROR CLASS>< S , R > Platform and version requirements: JVM Returns a new instance of GrpcCall that can be used for a single call to execute , executeBlocking , or enqueue . The returned instance executes function synchronously on the calling thread, regardless of which function is called. If function throws, the thrown exception will be wrapped in an IOException . This method is useful when implementing the interfaces that are generated by Wire: override fun GetFeature(): GrpcCall<Point, Feature> { return GrpcCall<Point, Feature> { request -> return@GrpcCall lookupNearestFeature(request.latitude, request.longitude) } } It is succinct when used in an expression function: override fun GetFeature() = GrpcCall<Point, Feature> { request -> return@GrpcCall lookupNearestFeature(request.latitude, request.longitude) }","title":" grpc call"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/#grpccall","text":"fun <S : Any , R : Any > GrpcCall(function: ( S ) -> R ): <ERROR CLASS>< S , R > Platform and version requirements: JVM Returns a new instance of GrpcCall that can be used for a single call to execute , executeBlocking , or enqueue . The returned instance executes function synchronously on the calling thread, regardless of which function is called. If function throws, the thrown exception will be wrapped in an IOException . This method is useful when implementing the interfaces that are generated by Wire: override fun GetFeature(): GrpcCall<Point, Feature> { return GrpcCall<Point, Feature> { request -> return@GrpcCall lookupNearestFeature(request.latitude, request.longitude) } } It is succinct when used in an expression function: override fun GetFeature() = GrpcCall<Point, Feature> { request -> return@GrpcCall lookupNearestFeature(request.latitude, request.longitude) }","title":"GrpcCall"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/","text":"wire-grpc-client / com.squareup.wire / GrpcStreamingCall GrpcStreamingCall \u00b6 fun <S : Any , R : Any > GrpcStreamingCall(function: suspend (<ERROR CLASS>< S >, <ERROR CLASS>< R >) -> Unit ): <ERROR CLASS>< S , R > Platform and version requirements: JVM Returns a new instance of GrpcStreamingCall that can be used for a single call to executeIn or executeBlocking . The returned instance launches function on Dispatchers.IO . The function must close the SendChannel when it has no more messages to transmit. If function throws, both channels will be closed using the thrown exception as a cause. This method is useful when implementing the interfaces that are generated by Wire: override fun RouteChat(): GrpcStreamingCall<RouteNote, RouteNote> { return GrpcStreamingCall { requests, responses -> requests.consumeEach { note -> responses.send(translateNote(note)) } responses.close() } } It is succinct when used in an expression function: override fun RouteChat() = GrpcStreamingCall<RouteNote, RouteNote> { requests, responses -> requests.consumeEach { note -> responses.send(translateNote(note)) } responses.close() }","title":" grpc streaming call"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/#grpcstreamingcall","text":"fun <S : Any , R : Any > GrpcStreamingCall(function: suspend (<ERROR CLASS>< S >, <ERROR CLASS>< R >) -> Unit ): <ERROR CLASS>< S , R > Platform and version requirements: JVM Returns a new instance of GrpcStreamingCall that can be used for a single call to executeIn or executeBlocking . The returned instance launches function on Dispatchers.IO . The function must close the SendChannel when it has no more messages to transmit. If function throws, both channels will be closed using the thrown exception as a cause. This method is useful when implementing the interfaces that are generated by Wire: override fun RouteChat(): GrpcStreamingCall<RouteNote, RouteNote> { return GrpcStreamingCall { requests, responses -> requests.consumeEach { note -> responses.send(translateNote(note)) } responses.close() } } It is succinct when used in an expression function: override fun RouteChat() = GrpcStreamingCall<RouteNote, RouteNote> { requests, responses -> requests.consumeEach { note -> responses.send(translateNote(note)) } responses.close() }","title":"GrpcStreamingCall"},{"location":"3.x/wire-grpc-client/com.squareup.wire/kotlin.-string/","text":"wire-grpc-client / com.squareup.wire / kotlin.String","title":"Kotlin. string"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/","text":"wire-grpc-client / com.squareup.wire / GrpcCall GrpcCall \u00b6 interface GrpcCall<S : Any , R : Any > A single call to a remote server. This call sends a single request value and receives a single response value. A gRPC call cannot be executed twice. gRPC calls can be suspending , blocking , or asynchronous . Use whichever mechanism works at your call site: the bytes transmitted on the network are the same. Types \u00b6 Name Summary Callback interface Callback<S : Any , R : Any > Properties \u00b6 Name Summary method abstract val method: GrpcMethod < S , R > The method invoked by this call. timeout abstract val timeout: <ERROR CLASS> Configures how long the call can take to complete before it is automatically canceled. Functions \u00b6 Name Summary cancel abstract fun cancel(): Unit Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally. clone abstract fun clone(): GrpcCall < S , R > Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been. enqueue abstract fun enqueue(request: S , callback: Callback < S , R >): Unit Enqueues this call for asynchronous execution. The callback will be invoked on the client\u2019s dispatcher thread when the call completes. execute abstract suspend fun execute(request: S ): R Invokes the call immediately and suspends until its response is received. executeBlocking abstract fun executeBlocking(request: S ): R Invokes the call immediately and blocks until its response is received. isCanceled abstract fun isCanceled(): Boolean True if cancel was called. isExecuted abstract fun isExecuted(): Boolean Returns true if execute , executeBlocking , or enqueue was called. It is an error to execute or enqueue a call more than once.","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/#grpccall","text":"interface GrpcCall<S : Any , R : Any > A single call to a remote server. This call sends a single request value and receives a single response value. A gRPC call cannot be executed twice. gRPC calls can be suspending , blocking , or asynchronous . Use whichever mechanism works at your call site: the bytes transmitted on the network are the same.","title":"GrpcCall"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/#types","text":"Name Summary Callback interface Callback<S : Any , R : Any >","title":"Types"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/#properties","text":"Name Summary method abstract val method: GrpcMethod < S , R > The method invoked by this call. timeout abstract val timeout: <ERROR CLASS> Configures how long the call can take to complete before it is automatically canceled.","title":"Properties"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/#functions","text":"Name Summary cancel abstract fun cancel(): Unit Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally. clone abstract fun clone(): GrpcCall < S , R > Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been. enqueue abstract fun enqueue(request: S , callback: Callback < S , R >): Unit Enqueues this call for asynchronous execution. The callback will be invoked on the client\u2019s dispatcher thread when the call completes. execute abstract suspend fun execute(request: S ): R Invokes the call immediately and suspends until its response is received. executeBlocking abstract fun executeBlocking(request: S ): R Invokes the call immediately and blocks until its response is received. isCanceled abstract fun isCanceled(): Boolean True if cancel was called. isExecuted abstract fun isExecuted(): Boolean Returns true if execute , executeBlocking , or enqueue was called. It is an error to execute or enqueue a call more than once.","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/cancel/","text":"wire-grpc-client / com.squareup.wire / GrpcCall / cancel cancel \u00b6 abstract fun cancel(): Unit Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally.","title":"Cancel"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/cancel/#cancel","text":"abstract fun cancel(): Unit Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally.","title":"cancel"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/clone/","text":"wire-grpc-client / com.squareup.wire / GrpcCall / clone clone \u00b6 abstract fun clone(): GrpcCall < S , R > Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been.","title":"Clone"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/clone/#clone","text":"abstract fun clone(): GrpcCall < S , R > Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been.","title":"clone"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/enqueue/","text":"wire-grpc-client / com.squareup.wire / GrpcCall / enqueue enqueue \u00b6 abstract fun enqueue(request: S , callback: Callback < S , R >): Unit Enqueues this call for asynchronous execution. The callback will be invoked on the client\u2019s dispatcher thread when the call completes.","title":"Enqueue"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/enqueue/#enqueue","text":"abstract fun enqueue(request: S , callback: Callback < S , R >): Unit Enqueues this call for asynchronous execution. The callback will be invoked on the client\u2019s dispatcher thread when the call completes.","title":"enqueue"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/execute-blocking/","text":"wire-grpc-client / com.squareup.wire / GrpcCall / executeBlocking executeBlocking \u00b6 abstract fun executeBlocking(request: S ): R Invokes the call immediately and blocks until its response is received.","title":"Execute blocking"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/execute-blocking/#executeblocking","text":"abstract fun executeBlocking(request: S ): R Invokes the call immediately and blocks until its response is received.","title":"executeBlocking"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/execute/","text":"wire-grpc-client / com.squareup.wire / GrpcCall / execute execute \u00b6 abstract suspend fun execute(request: S ): R Invokes the call immediately and suspends until its response is received.","title":"Execute"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/execute/#execute","text":"abstract suspend fun execute(request: S ): R Invokes the call immediately and suspends until its response is received.","title":"execute"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/is-canceled/","text":"wire-grpc-client / com.squareup.wire / GrpcCall / isCanceled isCanceled \u00b6 abstract fun isCanceled(): Boolean True if cancel was called.","title":"Is canceled"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/is-canceled/#iscanceled","text":"abstract fun isCanceled(): Boolean True if cancel was called.","title":"isCanceled"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/is-executed/","text":"wire-grpc-client / com.squareup.wire / GrpcCall / isExecuted isExecuted \u00b6 abstract fun isExecuted(): Boolean Returns true if execute , executeBlocking , or enqueue was called. It is an error to execute or enqueue a call more than once.","title":"Is executed"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/is-executed/#isexecuted","text":"abstract fun isExecuted(): Boolean Returns true if execute , executeBlocking , or enqueue was called. It is an error to execute or enqueue a call more than once.","title":"isExecuted"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/method/","text":"wire-grpc-client / com.squareup.wire / GrpcCall / method method \u00b6 abstract val method: GrpcMethod < S , R > The method invoked by this call.","title":"Method"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/method/#method","text":"abstract val method: GrpcMethod < S , R > The method invoked by this call.","title":"method"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/timeout/","text":"wire-grpc-client / com.squareup.wire / GrpcCall / timeout timeout \u00b6 abstract val timeout: <ERROR CLASS> Configures how long the call can take to complete before it is automatically canceled.","title":"Timeout"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/timeout/#timeout","text":"abstract val timeout: <ERROR CLASS> Configures how long the call can take to complete before it is automatically canceled.","title":"timeout"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/","text":"wire-grpc-client / com.squareup.wire / GrpcCall / Callback Callback \u00b6 interface Callback<S : Any , R : Any > Functions \u00b6 Name Summary onFailure abstract fun onFailure(call: GrpcCall < S , R >, exception: <ERROR CLASS>): Unit onSuccess abstract fun onSuccess(call: GrpcCall < S , R >, response: R ): Unit","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/#callback","text":"interface Callback<S : Any , R : Any >","title":"Callback"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/#functions","text":"Name Summary onFailure abstract fun onFailure(call: GrpcCall < S , R >, exception: <ERROR CLASS>): Unit onSuccess abstract fun onSuccess(call: GrpcCall < S , R >, response: R ): Unit","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/on-failure/","text":"wire-grpc-client / com.squareup.wire / GrpcCall / Callback / onFailure onFailure \u00b6 abstract fun onFailure(call: GrpcCall < S , R >, exception: <ERROR CLASS>): Unit","title":"On failure"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/on-failure/#onfailure","text":"abstract fun onFailure(call: GrpcCall < S , R >, exception: <ERROR CLASS>): Unit","title":"onFailure"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/on-success/","text":"wire-grpc-client / com.squareup.wire / GrpcCall / Callback / onSuccess onSuccess \u00b6 abstract fun onSuccess(call: GrpcCall < S , R >, response: R ): Unit","title":"On success"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/on-success/#onsuccess","text":"abstract fun onSuccess(call: GrpcCall < S , R >, response: R ): Unit","title":"onSuccess"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/","text":"wire-grpc-client / com.squareup.wire / GrpcClient GrpcClient \u00b6 expect class GrpcClient Platform and version requirements: JVM, js, native Types \u00b6 Name Summary Builder (JVM) class Builder Constructors \u00b6 Name Summary <init> (js, native) GrpcClient() Functions \u00b6 Name Summary create (JVM) fun <T> create(): T Returns a T that makes gRPC calls using this client. fun <T> create(service: KClass < T >): T Returns a service that makes gRPC calls using this client. newBuilder (JVM) fun newBuilder(): Builder newCall fun <S : Any , R : Any > newCall(method: GrpcMethod < S , R >): GrpcCall < S , R > actual fun <S : Any , R : Any > newCall(method: <ERROR CLASS>< S , R >): <ERROR CLASS>< S , R > newStreamingCall fun <S : Any , R : Any > newStreamingCall(method: GrpcMethod < S , R >): GrpcStreamingCall < S , R > actual fun <S : Any , R : Any > newStreamingCall(method: <ERROR CLASS>< S , R >): <ERROR CLASS>< S , R >","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/#grpcclient","text":"expect class GrpcClient Platform and version requirements: JVM, js, native","title":"GrpcClient"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/#types","text":"Name Summary Builder (JVM) class Builder","title":"Types"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/#constructors","text":"Name Summary <init> (js, native) GrpcClient()","title":"Constructors"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/#functions","text":"Name Summary create (JVM) fun <T> create(): T Returns a T that makes gRPC calls using this client. fun <T> create(service: KClass < T >): T Returns a service that makes gRPC calls using this client. newBuilder (JVM) fun newBuilder(): Builder newCall fun <S : Any , R : Any > newCall(method: GrpcMethod < S , R >): GrpcCall < S , R > actual fun <S : Any , R : Any > newCall(method: <ERROR CLASS>< S , R >): <ERROR CLASS>< S , R > newStreamingCall fun <S : Any , R : Any > newStreamingCall(method: GrpcMethod < S , R >): GrpcStreamingCall < S , R > actual fun <S : Any , R : Any > newStreamingCall(method: <ERROR CLASS>< S , R >): <ERROR CLASS>< S , R >","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-init-/","text":"wire-grpc-client / com.squareup.wire / GrpcClient / <init> <init> \u00b6 GrpcClient() Platform and version requirements: js, native","title":" init "},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-init-/#init","text":"GrpcClient() Platform and version requirements: js, native","title":"&lt;init&gt;"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/create/","text":"wire-grpc-client / com.squareup.wire / GrpcClient / create create \u00b6 inline fun <reified T> create(): T Platform and version requirements: JVM Returns a T that makes gRPC calls using this client. fun <T> create(service: KClass < T >): T Platform and version requirements: JVM Returns a service that makes gRPC calls using this client.","title":"Create"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/create/#create","text":"inline fun <reified T> create(): T Platform and version requirements: JVM Returns a T that makes gRPC calls using this client. fun <T> create(service: KClass < T >): T Platform and version requirements: JVM Returns a service that makes gRPC calls using this client.","title":"create"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/new-builder/","text":"wire-grpc-client / com.squareup.wire / GrpcClient / newBuilder newBuilder \u00b6 fun newBuilder(): Builder Platform and version requirements: JVM","title":"New builder"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/new-builder/#newbuilder","text":"fun newBuilder(): Builder Platform and version requirements: JVM","title":"newBuilder"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/new-call/","text":"wire-grpc-client / com.squareup.wire / GrpcClient / newCall newCall \u00b6 fun <S : Any , R : Any > newCall(method: GrpcMethod < S , R >): GrpcCall < S , R > actual fun <S : Any , R : Any > newCall(method: <ERROR CLASS>< S , R >): <ERROR CLASS>< S , R > Platform and version requirements: JVM, js, native","title":"New call"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/new-call/#newcall","text":"fun <S : Any , R : Any > newCall(method: GrpcMethod < S , R >): GrpcCall < S , R > actual fun <S : Any , R : Any > newCall(method: <ERROR CLASS>< S , R >): <ERROR CLASS>< S , R > Platform and version requirements: JVM, js, native","title":"newCall"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/new-streaming-call/","text":"wire-grpc-client / com.squareup.wire / GrpcClient / newStreamingCall newStreamingCall \u00b6 fun <S : Any , R : Any > newStreamingCall(method: GrpcMethod < S , R >): GrpcStreamingCall < S , R > actual fun <S : Any , R : Any > newStreamingCall(method: <ERROR CLASS>< S , R >): <ERROR CLASS>< S , R > Platform and version requirements: JVM, js, native","title":"New streaming call"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/new-streaming-call/#newstreamingcall","text":"fun <S : Any , R : Any > newStreamingCall(method: GrpcMethod < S , R >): GrpcStreamingCall < S , R > actual fun <S : Any , R : Any > newStreamingCall(method: <ERROR CLASS>< S , R >): <ERROR CLASS>< S , R > Platform and version requirements: JVM, js, native","title":"newStreamingCall"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/","text":"wire-grpc-client / com.squareup.wire / GrpcClient / Builder Builder \u00b6 class Builder Platform and version requirements: JVM Constructors \u00b6 Name Summary <init> Builder() Functions \u00b6 Name Summary baseUrl fun baseUrl(baseUrl: String ): Builder fun baseUrl(url: <ERROR CLASS>): Builder build fun build(): GrpcClient callFactory fun callFactory(client: <ERROR CLASS>): Builder client fun client(client: <ERROR CLASS>): Builder minMessageToCompress fun minMessageToCompress(bytes: Long ): <ERROR CLASS> Sets the minimum outbound message size (in bytes) that will be compressed.","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/#builder","text":"class Builder Platform and version requirements: JVM","title":"Builder"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/#functions","text":"Name Summary baseUrl fun baseUrl(baseUrl: String ): Builder fun baseUrl(url: <ERROR CLASS>): Builder build fun build(): GrpcClient callFactory fun callFactory(client: <ERROR CLASS>): Builder client fun client(client: <ERROR CLASS>): Builder minMessageToCompress fun minMessageToCompress(bytes: Long ): <ERROR CLASS> Sets the minimum outbound message size (in bytes) that will be compressed.","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/-init-/","text":"wire-grpc-client / com.squareup.wire / GrpcClient / Builder / <init> <init> \u00b6 Builder() Platform and version requirements: JVM","title":" init "},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/-init-/#init","text":"Builder() Platform and version requirements: JVM","title":"&lt;init&gt;"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/base-url/","text":"wire-grpc-client / com.squareup.wire / GrpcClient / Builder / baseUrl baseUrl \u00b6 fun baseUrl(baseUrl: String ): Builder Platform and version requirements: JVM fun baseUrl(url: <ERROR CLASS>): Builder Platform and version requirements: JVM","title":"Base url"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/base-url/#baseurl","text":"fun baseUrl(baseUrl: String ): Builder Platform and version requirements: JVM fun baseUrl(url: <ERROR CLASS>): Builder Platform and version requirements: JVM","title":"baseUrl"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/build/","text":"wire-grpc-client / com.squareup.wire / GrpcClient / Builder / build build \u00b6 fun build(): GrpcClient Platform and version requirements: JVM","title":"Build"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/build/#build","text":"fun build(): GrpcClient Platform and version requirements: JVM","title":"build"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/call-factory/","text":"wire-grpc-client / com.squareup.wire / GrpcClient / Builder / callFactory callFactory \u00b6 fun callFactory(client: <ERROR CLASS>): Builder Platform and version requirements: JVM","title":"Call factory"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/call-factory/#callfactory","text":"fun callFactory(client: <ERROR CLASS>): Builder Platform and version requirements: JVM","title":"callFactory"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/client/","text":"wire-grpc-client / com.squareup.wire / GrpcClient / Builder / client client \u00b6 fun client(client: <ERROR CLASS>): Builder Platform and version requirements: JVM","title":"Client"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/client/#client","text":"fun client(client: <ERROR CLASS>): Builder Platform and version requirements: JVM","title":"client"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/min-message-to-compress/","text":"wire-grpc-client / com.squareup.wire / GrpcClient / Builder / minMessageToCompress minMessageToCompress \u00b6 fun minMessageToCompress(bytes: Long ): <ERROR CLASS> Platform and version requirements: JVM Sets the minimum outbound message size (in bytes) that will be compressed. Set this to 0 to enable compression for all outbound messages. Set to Long.MAX_VALUE to disable compression. This is 0 by default.","title":"Min message to compress"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/min-message-to-compress/#minmessagetocompress","text":"fun minMessageToCompress(bytes: Long ): <ERROR CLASS> Platform and version requirements: JVM Sets the minimum outbound message size (in bytes) that will be compressed. Set this to 0 to enable compression for all outbound messages. Set to Long.MAX_VALUE to disable compression. This is 0 by default.","title":"minMessageToCompress"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/","text":"wire-grpc-client / com.squareup.wire / GrpcException GrpcException \u00b6 class GrpcException Constructors \u00b6 Name Summary <init> GrpcException(grpcStatus: GrpcStatus , grpcMessage: String ?) Properties \u00b6 Name Summary grpcMessage val grpcMessage: String ? grpcStatus val grpcStatus: GrpcStatus","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/#grpcexception","text":"class GrpcException","title":"GrpcException"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/#constructors","text":"Name Summary <init> GrpcException(grpcStatus: GrpcStatus , grpcMessage: String ?)","title":"Constructors"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/#properties","text":"Name Summary grpcMessage val grpcMessage: String ? grpcStatus val grpcStatus: GrpcStatus","title":"Properties"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/-init-/","text":"wire-grpc-client / com.squareup.wire / GrpcException / <init> <init> \u00b6 GrpcException(grpcStatus: GrpcStatus , grpcMessage: String ?)","title":" init "},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/-init-/#init","text":"GrpcException(grpcStatus: GrpcStatus , grpcMessage: String ?)","title":"&lt;init&gt;"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/grpc-message/","text":"wire-grpc-client / com.squareup.wire / GrpcException / grpcMessage grpcMessage \u00b6 val grpcMessage: String ?","title":"Grpc message"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/grpc-message/#grpcmessage","text":"val grpcMessage: String ?","title":"grpcMessage"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/grpc-status/","text":"wire-grpc-client / com.squareup.wire / GrpcException / grpcStatus grpcStatus \u00b6 val grpcStatus: GrpcStatus","title":"Grpc status"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/grpc-status/#grpcstatus","text":"val grpcStatus: GrpcStatus","title":"grpcStatus"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/","text":"wire-grpc-client / com.squareup.wire / GrpcHeaders GrpcHeaders \u00b6 actual typealias GrpcHeaders = <ERROR CLASS> Platform and version requirements: JVM expect class GrpcHeaders Functions \u00b6 Name Summary get (js, native) operator fun get(name: String ): String ? GrpcHeaders() Platform and version requirements: js, native","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/#grpcheaders","text":"actual typealias GrpcHeaders = <ERROR CLASS> Platform and version requirements: JVM expect class GrpcHeaders","title":"GrpcHeaders"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/#functions","text":"Name Summary get (js, native) operator fun get(name: String ): String ? GrpcHeaders() Platform and version requirements: js, native","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/-grpc-headers/","text":"wire-grpc-client / com.squareup.wire / GrpcHeaders GrpcHeaders \u00b6 actual typealias GrpcHeaders = <ERROR CLASS> Platform and version requirements: JVM","title":" grpc headers"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/-grpc-headers/#grpcheaders","text":"actual typealias GrpcHeaders = <ERROR CLASS> Platform and version requirements: JVM","title":"GrpcHeaders"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/-init-/","text":"wire-grpc-client / com.squareup.wire / GrpcHeaders <init> \u00b6 GrpcHeaders() Platform and version requirements: js, native","title":" init "},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/-init-/#init","text":"GrpcHeaders() Platform and version requirements: js, native","title":"&lt;init&gt;"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/-grpc-headers/","text":"wire-grpc-client / com.squareup.wire / GrpcHeaders GrpcHeaders \u00b6 expect class GrpcHeaders Functions \u00b6 Name Summary get (js, native) operator fun get(name: String ): String ?","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/-grpc-headers/#grpcheaders","text":"expect class GrpcHeaders","title":"GrpcHeaders"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/-grpc-headers/#functions","text":"Name Summary get (js, native) operator fun get(name: String ): String ?","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/-grpc-headers/get/","text":"wire-grpc-client / com.squareup.wire / GrpcHeaders / get get \u00b6 operator fun get(name: String ): String ? Platform and version requirements: js, native","title":"Get"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/-grpc-headers/get/#get","text":"operator fun get(name: String ): String ? Platform and version requirements: js, native","title":"get"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/","text":"wire-grpc-client / com.squareup.wire / GrpcHttpUrl GrpcHttpUrl \u00b6 actual typealias GrpcHttpUrl = <ERROR CLASS> Platform and version requirements: JVM expect class GrpcHttpUrl Functions \u00b6 Name Summary resolve (js, native) fun resolve(link: String ): GrpcHttpUrl ? GrpcHttpUrl() Platform and version requirements: js, native","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/#grpchttpurl","text":"actual typealias GrpcHttpUrl = <ERROR CLASS> Platform and version requirements: JVM expect class GrpcHttpUrl","title":"GrpcHttpUrl"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/#functions","text":"Name Summary resolve (js, native) fun resolve(link: String ): GrpcHttpUrl ? GrpcHttpUrl() Platform and version requirements: js, native","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/-grpc-http-url/","text":"wire-grpc-client / com.squareup.wire / GrpcHttpUrl GrpcHttpUrl \u00b6 actual typealias GrpcHttpUrl = <ERROR CLASS> Platform and version requirements: JVM","title":" grpc http url"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/-grpc-http-url/#grpchttpurl","text":"actual typealias GrpcHttpUrl = <ERROR CLASS> Platform and version requirements: JVM","title":"GrpcHttpUrl"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/-init-/","text":"wire-grpc-client / com.squareup.wire / GrpcHttpUrl <init> \u00b6 GrpcHttpUrl() Platform and version requirements: js, native","title":" init "},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/-init-/#init","text":"GrpcHttpUrl() Platform and version requirements: js, native","title":"&lt;init&gt;"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/-grpc-http-url/","text":"wire-grpc-client / com.squareup.wire / GrpcHttpUrl GrpcHttpUrl \u00b6 expect class GrpcHttpUrl Functions \u00b6 Name Summary resolve (js, native) fun resolve(link: String ): GrpcHttpUrl ?","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/-grpc-http-url/#grpchttpurl","text":"expect class GrpcHttpUrl","title":"GrpcHttpUrl"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/-grpc-http-url/#functions","text":"Name Summary resolve (js, native) fun resolve(link: String ): GrpcHttpUrl ?","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/-grpc-http-url/resolve/","text":"wire-grpc-client / com.squareup.wire / GrpcHttpUrl / resolve resolve \u00b6 fun resolve(link: String ): GrpcHttpUrl ? Platform and version requirements: js, native","title":"Resolve"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/-grpc-http-url/resolve/#resolve","text":"fun resolve(link: String ): GrpcHttpUrl ? Platform and version requirements: js, native","title":"resolve"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/","text":"wire-grpc-client / com.squareup.wire / GrpcMethod GrpcMethod \u00b6 class GrpcMethod<S : Any , R : Any > Constructors \u00b6 Name Summary <init> GrpcMethod(path: String , requestAdapter: <ERROR CLASS>< S >, responseAdapter: <ERROR CLASS>< R >) Properties \u00b6 Name Summary path val path: String requestAdapter val requestAdapter: <ERROR CLASS>< S > responseAdapter val responseAdapter: <ERROR CLASS>< R >","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/#grpcmethod","text":"class GrpcMethod<S : Any , R : Any >","title":"GrpcMethod"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/#constructors","text":"Name Summary <init> GrpcMethod(path: String , requestAdapter: <ERROR CLASS>< S >, responseAdapter: <ERROR CLASS>< R >)","title":"Constructors"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/#properties","text":"Name Summary path val path: String requestAdapter val requestAdapter: <ERROR CLASS>< S > responseAdapter val responseAdapter: <ERROR CLASS>< R >","title":"Properties"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/-init-/","text":"wire-grpc-client / com.squareup.wire / GrpcMethod / <init> <init> \u00b6 GrpcMethod(path: String , requestAdapter: <ERROR CLASS>< S >, responseAdapter: <ERROR CLASS>< R >)","title":" init "},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/-init-/#init","text":"GrpcMethod(path: String , requestAdapter: <ERROR CLASS>< S >, responseAdapter: <ERROR CLASS>< R >)","title":"&lt;init&gt;"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/path/","text":"wire-grpc-client / com.squareup.wire / GrpcMethod / path path \u00b6 val path: String","title":"Path"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/path/#path","text":"val path: String","title":"path"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/request-adapter/","text":"wire-grpc-client / com.squareup.wire / GrpcMethod / requestAdapter requestAdapter \u00b6 val requestAdapter: <ERROR CLASS>< S >","title":"Request adapter"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/request-adapter/#requestadapter","text":"val requestAdapter: <ERROR CLASS>< S >","title":"requestAdapter"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/response-adapter/","text":"wire-grpc-client / com.squareup.wire / GrpcMethod / responseAdapter responseAdapter \u00b6 val responseAdapter: <ERROR CLASS>< R >","title":"Response adapter"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/response-adapter/#responseadapter","text":"val responseAdapter: <ERROR CLASS>< R >","title":"responseAdapter"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request/","text":"wire-grpc-client / com.squareup.wire / GrpcRequest GrpcRequest \u00b6 actual typealias GrpcRequest = <ERROR CLASS> Platform and version requirements: JVM expect class GrpcRequest``GrpcRequest() Platform and version requirements: js, native","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request/#grpcrequest","text":"actual typealias GrpcRequest = <ERROR CLASS> Platform and version requirements: JVM expect class GrpcRequest``GrpcRequest() Platform and version requirements: js, native","title":"GrpcRequest"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request/-grpc-request/","text":"wire-grpc-client / com.squareup.wire / GrpcRequest GrpcRequest \u00b6 expect class GrpcRequest actual typealias GrpcRequest = <ERROR CLASS> Platform and version requirements: JVM","title":" grpc request"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request/-grpc-request/#grpcrequest","text":"expect class GrpcRequest actual typealias GrpcRequest = <ERROR CLASS> Platform and version requirements: JVM","title":"GrpcRequest"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request/-init-/","text":"wire-grpc-client / com.squareup.wire / GrpcRequest <init> \u00b6 GrpcRequest() Platform and version requirements: js, native","title":" init "},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request/-init-/#init","text":"GrpcRequest() Platform and version requirements: js, native","title":"&lt;init&gt;"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-body/","text":"wire-grpc-client / com.squareup.wire / GrpcRequestBody GrpcRequestBody \u00b6 actual typealias GrpcRequestBody = <ERROR CLASS> Platform and version requirements: JVM abstract expect class GrpcRequestBody``GrpcRequestBody() Platform and version requirements: js, native","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-body/#grpcrequestbody","text":"actual typealias GrpcRequestBody = <ERROR CLASS> Platform and version requirements: JVM abstract expect class GrpcRequestBody``GrpcRequestBody() Platform and version requirements: js, native","title":"GrpcRequestBody"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-body/-grpc-request-body/","text":"wire-grpc-client / com.squareup.wire / GrpcRequestBody GrpcRequestBody \u00b6 abstract expect class GrpcRequestBody actual typealias GrpcRequestBody = <ERROR CLASS> Platform and version requirements: JVM","title":" grpc request body"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-body/-grpc-request-body/#grpcrequestbody","text":"abstract expect class GrpcRequestBody actual typealias GrpcRequestBody = <ERROR CLASS> Platform and version requirements: JVM","title":"GrpcRequestBody"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-body/-init-/","text":"wire-grpc-client / com.squareup.wire / GrpcRequestBody <init> \u00b6 GrpcRequestBody() Platform and version requirements: js, native","title":" init "},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-body/-init-/#init","text":"GrpcRequestBody() Platform and version requirements: js, native","title":"&lt;init&gt;"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/","text":"wire-grpc-client / com.squareup.wire / GrpcRequestBuilder GrpcRequestBuilder \u00b6 actual typealias GrpcRequestBuilder = <ERROR CLASS> Platform and version requirements: JVM open expect class GrpcRequestBuilder Functions \u00b6 Name Summary addHeader (js, native) open fun addHeader(name: String , value: String ): GrpcRequestBuilder build (js, native) open fun build(): GrpcRequest method (js, native) open fun method(method: String , body: GrpcRequestBody ?): GrpcRequestBuilder url (js, native) open fun url(url: GrpcHttpUrl ): GrpcRequestBuilder GrpcRequestBuilder() Platform and version requirements: js, native","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/#grpcrequestbuilder","text":"actual typealias GrpcRequestBuilder = <ERROR CLASS> Platform and version requirements: JVM open expect class GrpcRequestBuilder","title":"GrpcRequestBuilder"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/#functions","text":"Name Summary addHeader (js, native) open fun addHeader(name: String , value: String ): GrpcRequestBuilder build (js, native) open fun build(): GrpcRequest method (js, native) open fun method(method: String , body: GrpcRequestBody ?): GrpcRequestBuilder url (js, native) open fun url(url: GrpcHttpUrl ): GrpcRequestBuilder GrpcRequestBuilder() Platform and version requirements: js, native","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/-grpc-request-builder/","text":"wire-grpc-client / com.squareup.wire / GrpcRequestBuilder GrpcRequestBuilder \u00b6 actual typealias GrpcRequestBuilder = <ERROR CLASS> Platform and version requirements: JVM","title":" grpc request builder"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/-grpc-request-builder/#grpcrequestbuilder","text":"actual typealias GrpcRequestBuilder = <ERROR CLASS> Platform and version requirements: JVM","title":"GrpcRequestBuilder"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/-init-/","text":"wire-grpc-client / com.squareup.wire / GrpcRequestBuilder <init> \u00b6 GrpcRequestBuilder() Platform and version requirements: js, native","title":" init "},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/-init-/#init","text":"GrpcRequestBuilder() Platform and version requirements: js, native","title":"&lt;init&gt;"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/-grpc-request-builder/","text":"wire-grpc-client / com.squareup.wire / GrpcRequestBuilder GrpcRequestBuilder \u00b6 open expect class GrpcRequestBuilder Functions \u00b6 Name Summary addHeader (js, native) open fun addHeader(name: String , value: String ): GrpcRequestBuilder build (js, native) open fun build(): GrpcRequest method (js, native) open fun method(method: String , body: GrpcRequestBody ?): GrpcRequestBuilder url (js, native) open fun url(url: GrpcHttpUrl ): GrpcRequestBuilder","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/-grpc-request-builder/#grpcrequestbuilder","text":"open expect class GrpcRequestBuilder","title":"GrpcRequestBuilder"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/-grpc-request-builder/#functions","text":"Name Summary addHeader (js, native) open fun addHeader(name: String , value: String ): GrpcRequestBuilder build (js, native) open fun build(): GrpcRequest method (js, native) open fun method(method: String , body: GrpcRequestBody ?): GrpcRequestBuilder url (js, native) open fun url(url: GrpcHttpUrl ): GrpcRequestBuilder","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/-grpc-request-builder/add-header/","text":"wire-grpc-client / com.squareup.wire / GrpcRequestBuilder / addHeader addHeader \u00b6 open fun addHeader(name: String , value: String ): GrpcRequestBuilder Platform and version requirements: js, native","title":"Add header"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/-grpc-request-builder/add-header/#addheader","text":"open fun addHeader(name: String , value: String ): GrpcRequestBuilder Platform and version requirements: js, native","title":"addHeader"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/-grpc-request-builder/build/","text":"wire-grpc-client / com.squareup.wire / GrpcRequestBuilder / build build \u00b6 open fun build(): GrpcRequest Platform and version requirements: js, native","title":"Build"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/-grpc-request-builder/build/#build","text":"open fun build(): GrpcRequest Platform and version requirements: js, native","title":"build"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/-grpc-request-builder/method/","text":"wire-grpc-client / com.squareup.wire / GrpcRequestBuilder / method method \u00b6 open fun method(method: String , body: GrpcRequestBody ?): GrpcRequestBuilder Platform and version requirements: js, native","title":"Method"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/-grpc-request-builder/method/#method","text":"open fun method(method: String , body: GrpcRequestBody ?): GrpcRequestBuilder Platform and version requirements: js, native","title":"method"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/-grpc-request-builder/url/","text":"wire-grpc-client / com.squareup.wire / GrpcRequestBuilder / url url \u00b6 open fun url(url: GrpcHttpUrl ): GrpcRequestBuilder Platform and version requirements: js, native","title":"Url"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/-grpc-request-builder/url/#url","text":"open fun url(url: GrpcHttpUrl ): GrpcRequestBuilder Platform and version requirements: js, native","title":"url"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/","text":"wire-grpc-client / com.squareup.wire / GrpcResponse GrpcResponse \u00b6 actual typealias GrpcResponse = <ERROR CLASS> Platform and version requirements: JVM expect class GrpcResponse Properties \u00b6 Name Summary body (js, native) val body: GrpcResponseBody ? Functions \u00b6 Name Summary close (js, native) fun close(): Unit header (js, native) fun header(name: String , defaultValue: String ? = null): String ? trailers (js, native) fun trailers(): GrpcHeaders GrpcResponse() Platform and version requirements: js, native","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/#grpcresponse","text":"actual typealias GrpcResponse = <ERROR CLASS> Platform and version requirements: JVM expect class GrpcResponse","title":"GrpcResponse"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/#properties","text":"Name Summary body (js, native) val body: GrpcResponseBody ?","title":"Properties"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/#functions","text":"Name Summary close (js, native) fun close(): Unit header (js, native) fun header(name: String , defaultValue: String ? = null): String ? trailers (js, native) fun trailers(): GrpcHeaders GrpcResponse() Platform and version requirements: js, native","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/-grpc-response/","text":"wire-grpc-client / com.squareup.wire / GrpcResponse GrpcResponse \u00b6 actual typealias GrpcResponse = <ERROR CLASS> Platform and version requirements: JVM","title":" grpc response"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/-grpc-response/#grpcresponse","text":"actual typealias GrpcResponse = <ERROR CLASS> Platform and version requirements: JVM","title":"GrpcResponse"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/-init-/","text":"wire-grpc-client / com.squareup.wire / GrpcResponse <init> \u00b6 GrpcResponse() Platform and version requirements: js, native","title":" init "},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/-init-/#init","text":"GrpcResponse() Platform and version requirements: js, native","title":"&lt;init&gt;"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/-grpc-response/","text":"wire-grpc-client / com.squareup.wire / GrpcResponse GrpcResponse \u00b6 expect class GrpcResponse Properties \u00b6 Name Summary body (js, native) val body: GrpcResponseBody ? Functions \u00b6 Name Summary close (js, native) fun close(): Unit header (js, native) fun header(name: String , defaultValue: String ? = null): String ? trailers (js, native) fun trailers(): GrpcHeaders","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/-grpc-response/#grpcresponse","text":"expect class GrpcResponse","title":"GrpcResponse"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/-grpc-response/#properties","text":"Name Summary body (js, native) val body: GrpcResponseBody ?","title":"Properties"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/-grpc-response/#functions","text":"Name Summary close (js, native) fun close(): Unit header (js, native) fun header(name: String , defaultValue: String ? = null): String ? trailers (js, native) fun trailers(): GrpcHeaders","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/-grpc-response/body/","text":"wire-grpc-client / com.squareup.wire / GrpcResponse / body body \u00b6 val body: GrpcResponseBody ? Platform and version requirements: js, native","title":"Body"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/-grpc-response/body/#body","text":"val body: GrpcResponseBody ? Platform and version requirements: js, native","title":"body"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/-grpc-response/close/","text":"wire-grpc-client / com.squareup.wire / GrpcResponse / close close \u00b6 fun close(): Unit Platform and version requirements: js, native","title":"Close"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/-grpc-response/close/#close","text":"fun close(): Unit Platform and version requirements: js, native","title":"close"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/-grpc-response/header/","text":"wire-grpc-client / com.squareup.wire / GrpcResponse / header header \u00b6 fun header(name: String , defaultValue: String ? = null): String ? Platform and version requirements: js, native","title":"Header"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/-grpc-response/header/#header","text":"fun header(name: String , defaultValue: String ? = null): String ? Platform and version requirements: js, native","title":"header"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/-grpc-response/trailers/","text":"wire-grpc-client / com.squareup.wire / GrpcResponse / trailers trailers \u00b6 fun trailers(): GrpcHeaders Platform and version requirements: js, native","title":"Trailers"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/-grpc-response/trailers/#trailers","text":"fun trailers(): GrpcHeaders Platform and version requirements: js, native","title":"trailers"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/","text":"wire-grpc-client / com.squareup.wire / GrpcResponseBody GrpcResponseBody \u00b6 actual typealias GrpcResponseBody = <ERROR CLASS> Platform and version requirements: JVM abstract expect class GrpcResponseBody Functions \u00b6 Name Summary source (js, native) abstract fun source(): <ERROR CLASS> GrpcResponseBody() Platform and version requirements: js, native","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/#grpcresponsebody","text":"actual typealias GrpcResponseBody = <ERROR CLASS> Platform and version requirements: JVM abstract expect class GrpcResponseBody","title":"GrpcResponseBody"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/#functions","text":"Name Summary source (js, native) abstract fun source(): <ERROR CLASS> GrpcResponseBody() Platform and version requirements: js, native","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/-grpc-response-body/","text":"wire-grpc-client / com.squareup.wire / GrpcResponseBody GrpcResponseBody \u00b6 actual typealias GrpcResponseBody = <ERROR CLASS> Platform and version requirements: JVM","title":" grpc response body"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/-grpc-response-body/#grpcresponsebody","text":"actual typealias GrpcResponseBody = <ERROR CLASS> Platform and version requirements: JVM","title":"GrpcResponseBody"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/-init-/","text":"wire-grpc-client / com.squareup.wire / GrpcResponseBody <init> \u00b6 GrpcResponseBody() Platform and version requirements: js, native","title":" init "},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/-init-/#init","text":"GrpcResponseBody() Platform and version requirements: js, native","title":"&lt;init&gt;"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/-grpc-response-body/","text":"wire-grpc-client / com.squareup.wire / GrpcResponseBody GrpcResponseBody \u00b6 abstract expect class GrpcResponseBody Functions \u00b6 Name Summary source (js, native) abstract fun source(): <ERROR CLASS>","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/-grpc-response-body/#grpcresponsebody","text":"abstract expect class GrpcResponseBody","title":"GrpcResponseBody"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/-grpc-response-body/#functions","text":"Name Summary source (js, native) abstract fun source(): <ERROR CLASS>","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/-grpc-response-body/source/","text":"wire-grpc-client / com.squareup.wire / GrpcResponseBody / source source \u00b6 abstract fun source(): <ERROR CLASS> Platform and version requirements: js, native","title":"Source"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/-grpc-response-body/source/#source","text":"abstract fun source(): <ERROR CLASS> Platform and version requirements: js, native","title":"source"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/","text":"wire-grpc-client / com.squareup.wire / GrpcStatus GrpcStatus \u00b6 class GrpcStatus Properties \u00b6 Name Summary code val code: Int name val name: String Companion Object Properties \u00b6 Name Summary ABORTED val ABORTED: GrpcStatus ALREADY_EXISTS val ALREADY_EXISTS: GrpcStatus CANCELLED val CANCELLED: GrpcStatus DATA_LOSS val DATA_LOSS: GrpcStatus DEADLINE_EXCEEDED val DEADLINE_EXCEEDED: GrpcStatus FAILED_PRECONDITION val FAILED_PRECONDITION: GrpcStatus INTERNAL val INTERNAL: GrpcStatus INVALID_ARGUMENT val INVALID_ARGUMENT: GrpcStatus NOT_FOUND val NOT_FOUND: GrpcStatus OK val OK: GrpcStatus OUT_OF_RANGE val OUT_OF_RANGE: GrpcStatus PERMISSION_DENIED val PERMISSION_DENIED: GrpcStatus RESOURCE_EXHAUSTED val RESOURCE_EXHAUSTED: GrpcStatus UNAUTHENTICATED val UNAUTHENTICATED: GrpcStatus UNAVAILABLE val UNAVAILABLE: GrpcStatus UNIMPLEMENTED val UNIMPLEMENTED: GrpcStatus UNKNOWN val UNKNOWN: GrpcStatus Companion Object Functions \u00b6 Name Summary get fun get(status: Int ): GrpcStatus","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/#grpcstatus","text":"class GrpcStatus","title":"GrpcStatus"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/#properties","text":"Name Summary code val code: Int name val name: String","title":"Properties"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/#companion-object-properties","text":"Name Summary ABORTED val ABORTED: GrpcStatus ALREADY_EXISTS val ALREADY_EXISTS: GrpcStatus CANCELLED val CANCELLED: GrpcStatus DATA_LOSS val DATA_LOSS: GrpcStatus DEADLINE_EXCEEDED val DEADLINE_EXCEEDED: GrpcStatus FAILED_PRECONDITION val FAILED_PRECONDITION: GrpcStatus INTERNAL val INTERNAL: GrpcStatus INVALID_ARGUMENT val INVALID_ARGUMENT: GrpcStatus NOT_FOUND val NOT_FOUND: GrpcStatus OK val OK: GrpcStatus OUT_OF_RANGE val OUT_OF_RANGE: GrpcStatus PERMISSION_DENIED val PERMISSION_DENIED: GrpcStatus RESOURCE_EXHAUSTED val RESOURCE_EXHAUSTED: GrpcStatus UNAUTHENTICATED val UNAUTHENTICATED: GrpcStatus UNAVAILABLE val UNAVAILABLE: GrpcStatus UNIMPLEMENTED val UNIMPLEMENTED: GrpcStatus UNKNOWN val UNKNOWN: GrpcStatus","title":"Companion Object Properties"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/#companion-object-functions","text":"Name Summary get fun get(status: Int ): GrpcStatus","title":"Companion Object Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-a-b-o-r-t-e-d/","text":"wire-grpc-client / com.squareup.wire / GrpcStatus / ABORTED ABORTED \u00b6 val ABORTED: GrpcStatus","title":" a b o r t e d"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-a-b-o-r-t-e-d/#aborted","text":"val ABORTED: GrpcStatus","title":"ABORTED"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-a-l-r-e-a-d-y_-e-x-i-s-t-s/","text":"wire-grpc-client / com.squareup.wire / GrpcStatus / ALREADY_EXISTS ALREADY_EXISTS \u00b6 val ALREADY_EXISTS: GrpcStatus","title":" a l r e a d y  e x i s t s"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-a-l-r-e-a-d-y_-e-x-i-s-t-s/#already_exists","text":"val ALREADY_EXISTS: GrpcStatus","title":"ALREADY_EXISTS"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-c-a-n-c-e-l-l-e-d/","text":"wire-grpc-client / com.squareup.wire / GrpcStatus / CANCELLED CANCELLED \u00b6 val CANCELLED: GrpcStatus","title":" c a n c e l l e d"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-c-a-n-c-e-l-l-e-d/#cancelled","text":"val CANCELLED: GrpcStatus","title":"CANCELLED"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-d-a-t-a_-l-o-s-s/","text":"wire-grpc-client / com.squareup.wire / GrpcStatus / DATA_LOSS DATA_LOSS \u00b6 val DATA_LOSS: GrpcStatus","title":" d a t a  l o s s"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-d-a-t-a_-l-o-s-s/#data_loss","text":"val DATA_LOSS: GrpcStatus","title":"DATA_LOSS"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-d-e-a-d-l-i-n-e_-e-x-c-e-e-d-e-d/","text":"wire-grpc-client / com.squareup.wire / GrpcStatus / DEADLINE_EXCEEDED DEADLINE_EXCEEDED \u00b6 val DEADLINE_EXCEEDED: GrpcStatus","title":" d e a d l i n e  e x c e e d e d"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-d-e-a-d-l-i-n-e_-e-x-c-e-e-d-e-d/#deadline_exceeded","text":"val DEADLINE_EXCEEDED: GrpcStatus","title":"DEADLINE_EXCEEDED"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-f-a-i-l-e-d_-p-r-e-c-o-n-d-i-t-i-o-n/","text":"wire-grpc-client / com.squareup.wire / GrpcStatus / FAILED_PRECONDITION FAILED_PRECONDITION \u00b6 val FAILED_PRECONDITION: GrpcStatus","title":" f a i l e d  p r e c o n d i t i o n"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-f-a-i-l-e-d_-p-r-e-c-o-n-d-i-t-i-o-n/#failed_precondition","text":"val FAILED_PRECONDITION: GrpcStatus","title":"FAILED_PRECONDITION"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-i-n-t-e-r-n-a-l/","text":"wire-grpc-client / com.squareup.wire / GrpcStatus / INTERNAL INTERNAL \u00b6 val INTERNAL: GrpcStatus","title":" i n t e r n a l"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-i-n-t-e-r-n-a-l/#internal","text":"val INTERNAL: GrpcStatus","title":"INTERNAL"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-i-n-v-a-l-i-d_-a-r-g-u-m-e-n-t/","text":"wire-grpc-client / com.squareup.wire / GrpcStatus / INVALID_ARGUMENT INVALID_ARGUMENT \u00b6 val INVALID_ARGUMENT: GrpcStatus","title":" i n v a l i d  a r g u m e n t"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-i-n-v-a-l-i-d_-a-r-g-u-m-e-n-t/#invalid_argument","text":"val INVALID_ARGUMENT: GrpcStatus","title":"INVALID_ARGUMENT"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-n-o-t_-f-o-u-n-d/","text":"wire-grpc-client / com.squareup.wire / GrpcStatus / NOT_FOUND NOT_FOUND \u00b6 val NOT_FOUND: GrpcStatus","title":" n o t  f o u n d"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-n-o-t_-f-o-u-n-d/#not_found","text":"val NOT_FOUND: GrpcStatus","title":"NOT_FOUND"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-o-k/","text":"wire-grpc-client / com.squareup.wire / GrpcStatus / OK OK \u00b6 val OK: GrpcStatus","title":" o k"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-o-k/#ok","text":"val OK: GrpcStatus","title":"OK"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-o-u-t_-o-f_-r-a-n-g-e/","text":"wire-grpc-client / com.squareup.wire / GrpcStatus / OUT_OF_RANGE OUT_OF_RANGE \u00b6 val OUT_OF_RANGE: GrpcStatus","title":" o u t  o f  r a n g e"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-o-u-t_-o-f_-r-a-n-g-e/#out_of_range","text":"val OUT_OF_RANGE: GrpcStatus","title":"OUT_OF_RANGE"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-p-e-r-m-i-s-s-i-o-n_-d-e-n-i-e-d/","text":"wire-grpc-client / com.squareup.wire / GrpcStatus / PERMISSION_DENIED PERMISSION_DENIED \u00b6 val PERMISSION_DENIED: GrpcStatus","title":" p e r m i s s i o n  d e n i e d"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-p-e-r-m-i-s-s-i-o-n_-d-e-n-i-e-d/#permission_denied","text":"val PERMISSION_DENIED: GrpcStatus","title":"PERMISSION_DENIED"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-r-e-s-o-u-r-c-e_-e-x-h-a-u-s-t-e-d/","text":"wire-grpc-client / com.squareup.wire / GrpcStatus / RESOURCE_EXHAUSTED RESOURCE_EXHAUSTED \u00b6 val RESOURCE_EXHAUSTED: GrpcStatus","title":" r e s o u r c e  e x h a u s t e d"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-r-e-s-o-u-r-c-e_-e-x-h-a-u-s-t-e-d/#resource_exhausted","text":"val RESOURCE_EXHAUSTED: GrpcStatus","title":"RESOURCE_EXHAUSTED"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-u-n-a-u-t-h-e-n-t-i-c-a-t-e-d/","text":"wire-grpc-client / com.squareup.wire / GrpcStatus / UNAUTHENTICATED UNAUTHENTICATED \u00b6 val UNAUTHENTICATED: GrpcStatus","title":" u n a u t h e n t i c a t e d"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-u-n-a-u-t-h-e-n-t-i-c-a-t-e-d/#unauthenticated","text":"val UNAUTHENTICATED: GrpcStatus","title":"UNAUTHENTICATED"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-u-n-a-v-a-i-l-a-b-l-e/","text":"wire-grpc-client / com.squareup.wire / GrpcStatus / UNAVAILABLE UNAVAILABLE \u00b6 val UNAVAILABLE: GrpcStatus","title":" u n a v a i l a b l e"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-u-n-a-v-a-i-l-a-b-l-e/#unavailable","text":"val UNAVAILABLE: GrpcStatus","title":"UNAVAILABLE"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-u-n-i-m-p-l-e-m-e-n-t-e-d/","text":"wire-grpc-client / com.squareup.wire / GrpcStatus / UNIMPLEMENTED UNIMPLEMENTED \u00b6 val UNIMPLEMENTED: GrpcStatus","title":" u n i m p l e m e n t e d"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-u-n-i-m-p-l-e-m-e-n-t-e-d/#unimplemented","text":"val UNIMPLEMENTED: GrpcStatus","title":"UNIMPLEMENTED"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-u-n-k-n-o-w-n/","text":"wire-grpc-client / com.squareup.wire / GrpcStatus / UNKNOWN UNKNOWN \u00b6 val UNKNOWN: GrpcStatus","title":" u n k n o w n"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-u-n-k-n-o-w-n/#unknown","text":"val UNKNOWN: GrpcStatus","title":"UNKNOWN"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/code/","text":"wire-grpc-client / com.squareup.wire / GrpcStatus / code code \u00b6 val code: Int","title":"Code"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/code/#code","text":"val code: Int","title":"code"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/get/","text":"wire-grpc-client / com.squareup.wire / GrpcStatus / get get \u00b6 fun get(status: Int ): GrpcStatus","title":"Get"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/get/#get","text":"fun get(status: Int ): GrpcStatus","title":"get"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/name/","text":"wire-grpc-client / com.squareup.wire / GrpcStatus / name name \u00b6 val name: String","title":"Name"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/name/#name","text":"val name: String","title":"name"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/","text":"wire-grpc-client / com.squareup.wire / GrpcStreamingCall GrpcStreamingCall \u00b6 interface GrpcStreamingCall<S : Any , R : Any > A single streaming call to a remote server. This class handles three streaming call types: Single request, streaming response. The send channel or message sink accept exactly one message. The receive channel or message source produce zero or more messages. The outbound request message is sent before any inbound response messages. Streaming request, single response. The send channel or message sink accept zero or more messages. The receive channel or message source produce exactly one message. All outbound request messages are sent before the inbound response message. Streaming request, streaming response. The send channel or message sink accept zero or more messages, and the receive channel or message source produce any number of messages. Unlike the above two types, you are free to interleave request and response messages. A gRPC call cannot be executed twice. gRPC calls can be suspending or blocking . Use whichever mechanism works at your call site: the bytes transmitted on the network are the same. Properties \u00b6 Name Summary method abstract val method: GrpcMethod < S , R > The method invoked by this call. timeout abstract val timeout: <ERROR CLASS> Configures how long the call can take to complete before it is automatically canceled. The timeout applies to the full set of messages transmitted. For long-running streams you must configure a sufficiently long timeout. Functions \u00b6 Name Summary cancel abstract fun cancel(): Unit Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally. clone abstract fun clone(): GrpcStreamingCall < S , R > Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been. executeBlocking abstract fun executeBlocking(): <ERROR CLASS><<ERROR CLASS>< S >, <ERROR CLASS>< R >> Enqueues this call for execution and returns streams to send and receive the call\u2019s messages. Reads and writes on the returned streams are blocking. executeIn abstract fun executeIn(scope: <ERROR CLASS>): <ERROR CLASS><<ERROR CLASS>< S >, <ERROR CLASS>< R >> Enqueues this call for execution and returns channels to send and receive the call\u2019s messages. This uses the Dispatchers.IO to transmit outbound messages. isCanceled abstract fun isCanceled(): Boolean True if cancel was called. isExecuted abstract fun isExecuted(): Boolean Returns true if executeIn or executeBlocking was called. It is an error to execute a call more than once.","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/#grpcstreamingcall","text":"interface GrpcStreamingCall<S : Any , R : Any > A single streaming call to a remote server. This class handles three streaming call types: Single request, streaming response. The send channel or message sink accept exactly one message. The receive channel or message source produce zero or more messages. The outbound request message is sent before any inbound response messages. Streaming request, single response. The send channel or message sink accept zero or more messages. The receive channel or message source produce exactly one message. All outbound request messages are sent before the inbound response message. Streaming request, streaming response. The send channel or message sink accept zero or more messages, and the receive channel or message source produce any number of messages. Unlike the above two types, you are free to interleave request and response messages. A gRPC call cannot be executed twice. gRPC calls can be suspending or blocking . Use whichever mechanism works at your call site: the bytes transmitted on the network are the same.","title":"GrpcStreamingCall"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/#properties","text":"Name Summary method abstract val method: GrpcMethod < S , R > The method invoked by this call. timeout abstract val timeout: <ERROR CLASS> Configures how long the call can take to complete before it is automatically canceled. The timeout applies to the full set of messages transmitted. For long-running streams you must configure a sufficiently long timeout.","title":"Properties"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/#functions","text":"Name Summary cancel abstract fun cancel(): Unit Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally. clone abstract fun clone(): GrpcStreamingCall < S , R > Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been. executeBlocking abstract fun executeBlocking(): <ERROR CLASS><<ERROR CLASS>< S >, <ERROR CLASS>< R >> Enqueues this call for execution and returns streams to send and receive the call\u2019s messages. Reads and writes on the returned streams are blocking. executeIn abstract fun executeIn(scope: <ERROR CLASS>): <ERROR CLASS><<ERROR CLASS>< S >, <ERROR CLASS>< R >> Enqueues this call for execution and returns channels to send and receive the call\u2019s messages. This uses the Dispatchers.IO to transmit outbound messages. isCanceled abstract fun isCanceled(): Boolean True if cancel was called. isExecuted abstract fun isExecuted(): Boolean Returns true if executeIn or executeBlocking was called. It is an error to execute a call more than once.","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/cancel/","text":"wire-grpc-client / com.squareup.wire / GrpcStreamingCall / cancel cancel \u00b6 abstract fun cancel(): Unit Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally.","title":"Cancel"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/cancel/#cancel","text":"abstract fun cancel(): Unit Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally.","title":"cancel"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/clone/","text":"wire-grpc-client / com.squareup.wire / GrpcStreamingCall / clone clone \u00b6 abstract fun clone(): GrpcStreamingCall < S , R > Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been.","title":"Clone"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/clone/#clone","text":"abstract fun clone(): GrpcStreamingCall < S , R > Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been.","title":"clone"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/execute-blocking/","text":"wire-grpc-client / com.squareup.wire / GrpcStreamingCall / executeBlocking executeBlocking \u00b6 abstract fun executeBlocking(): <ERROR CLASS><<ERROR CLASS>< S >, <ERROR CLASS>< R >> Enqueues this call for execution and returns streams to send and receive the call\u2019s messages. Reads and writes on the returned streams are blocking.","title":"Execute blocking"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/execute-blocking/#executeblocking","text":"abstract fun executeBlocking(): <ERROR CLASS><<ERROR CLASS>< S >, <ERROR CLASS>< R >> Enqueues this call for execution and returns streams to send and receive the call\u2019s messages. Reads and writes on the returned streams are blocking.","title":"executeBlocking"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/execute-in/","text":"wire-grpc-client / com.squareup.wire / GrpcStreamingCall / executeIn executeIn \u00b6 abstract fun executeIn(scope: <ERROR CLASS>): <ERROR CLASS><<ERROR CLASS>< S >, <ERROR CLASS>< R >> Enqueues this call for execution and returns channels to send and receive the call\u2019s messages. This uses the Dispatchers.IO to transmit outbound messages.","title":"Execute in"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/execute-in/#executein","text":"abstract fun executeIn(scope: <ERROR CLASS>): <ERROR CLASS><<ERROR CLASS>< S >, <ERROR CLASS>< R >> Enqueues this call for execution and returns channels to send and receive the call\u2019s messages. This uses the Dispatchers.IO to transmit outbound messages.","title":"executeIn"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/is-canceled/","text":"wire-grpc-client / com.squareup.wire / GrpcStreamingCall / isCanceled isCanceled \u00b6 abstract fun isCanceled(): Boolean True if cancel was called.","title":"Is canceled"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/is-canceled/#iscanceled","text":"abstract fun isCanceled(): Boolean True if cancel was called.","title":"isCanceled"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/is-executed/","text":"wire-grpc-client / com.squareup.wire / GrpcStreamingCall / isExecuted isExecuted \u00b6 abstract fun isExecuted(): Boolean Returns true if executeIn or executeBlocking was called. It is an error to execute a call more than once.","title":"Is executed"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/is-executed/#isexecuted","text":"abstract fun isExecuted(): Boolean Returns true if executeIn or executeBlocking was called. It is an error to execute a call more than once.","title":"isExecuted"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/method/","text":"wire-grpc-client / com.squareup.wire / GrpcStreamingCall / method method \u00b6 abstract val method: GrpcMethod < S , R > The method invoked by this call.","title":"Method"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/method/#method","text":"abstract val method: GrpcMethod < S , R > The method invoked by this call.","title":"method"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/timeout/","text":"wire-grpc-client / com.squareup.wire / GrpcStreamingCall / timeout timeout \u00b6 abstract val timeout: <ERROR CLASS> Configures how long the call can take to complete before it is automatically canceled. The timeout applies to the full set of messages transmitted. For long-running streams you must configure a sufficiently long timeout.","title":"Timeout"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/timeout/#timeout","text":"abstract val timeout: <ERROR CLASS> Configures how long the call can take to complete before it is automatically canceled. The timeout applies to the full set of messages transmitted. For long-running streams you must configure a sufficiently long timeout.","title":"timeout"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-wire-grpc-experimental/","text":"wire-grpc-client / com.squareup.wire / WireGrpcExperimental WireGrpcExperimental \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.FUNCTION]) annotation class WireGrpcExperimental Marker annotation for experimental Wire gRPC features. Constructors \u00b6 Name Summary <init> WireGrpcExperimental() Marker annotation for experimental Wire gRPC features.","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-wire-grpc-experimental/#wiregrpcexperimental","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.FUNCTION]) annotation class WireGrpcExperimental Marker annotation for experimental Wire gRPC features.","title":"WireGrpcExperimental"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-wire-grpc-experimental/#constructors","text":"Name Summary <init> WireGrpcExperimental() Marker annotation for experimental Wire gRPC features.","title":"Constructors"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-wire-grpc-experimental/-init-/","text":"wire-grpc-client / com.squareup.wire / WireGrpcExperimental / <init> <init> \u00b6 WireGrpcExperimental() Marker annotation for experimental Wire gRPC features.","title":" init "},{"location":"3.x/wire-grpc-client/com.squareup.wire/-wire-grpc-experimental/-init-/#init","text":"WireGrpcExperimental() Marker annotation for experimental Wire gRPC features.","title":"&lt;init&gt;"},{"location":"3.x/wire-grpc-client/com.squareup.wire/kotlin.-string/","text":"wire-grpc-client / com.squareup.wire / kotlin.String Extensions for kotlin.String \u00b6 Name Summary toHttpUrl (JVM, js, native) expect fun String .toHttpUrl(): GrpcHttpUrl","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/kotlin.-string/#extensions-for-kotlinstring","text":"Name Summary toHttpUrl (JVM, js, native) expect fun String .toHttpUrl(): GrpcHttpUrl","title":"Extensions for kotlin.String"},{"location":"3.x/wire-grpc-client/com.squareup.wire/kotlin.-string/to-http-url/","text":"wire-grpc-client / com.squareup.wire / kotlin.String / toHttpUrl toHttpUrl \u00b6 expect fun String .toHttpUrl(): GrpcHttpUrl Platform and version requirements: JVM, js, native","title":"To http url"},{"location":"3.x/wire-grpc-client/com.squareup.wire/kotlin.-string/to-http-url/#tohttpurl","text":"expect fun String .toHttpUrl(): GrpcHttpUrl Platform and version requirements: JVM, js, native","title":"toHttpUrl"},{"location":"3.x/wire-moshi-adapter/","text":"wire-moshi-adapter Packages \u00b6 Name Summary com.squareup.wire Index \u00b6 All Types","title":"Index"},{"location":"3.x/wire-moshi-adapter/#packages","text":"Name Summary com.squareup.wire","title":"Packages"},{"location":"3.x/wire-moshi-adapter/#index","text":"All Types","title":"Index"},{"location":"3.x/wire-moshi-adapter/alltypes/","text":"All Types \u00b6 Name Summary com.squareup.moshi.JsonAdapter (extensions in package com.squareup.wire) com.squareup.wire.WireJsonAdapterFactory A JsonAdapter.Factory that allows Wire messages to be serialized and deserialized using the Moshi Json library.","title":"Index"},{"location":"3.x/wire-moshi-adapter/alltypes/#all-types","text":"Name Summary com.squareup.moshi.JsonAdapter (extensions in package com.squareup.wire) com.squareup.wire.WireJsonAdapterFactory A JsonAdapter.Factory that allows Wire messages to be serialized and deserialized using the Moshi Json library.","title":"All Types"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/","text":"wire-moshi-adapter / com.squareup.wire Package com.squareup.wire \u00b6 Types \u00b6 Name Summary WireJsonAdapterFactory class WireJsonAdapterFactory : Factory A JsonAdapter.Factory that allows Wire messages to be serialized and deserialized using the Moshi Json library. Extensions for External Classes \u00b6 Name Summary com.squareup.moshi.JsonAdapter","title":"wire-moshi-adapter"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/#package-comsquareupwire","text":"","title":"Package com.squareup.wire"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/#types","text":"Name Summary WireJsonAdapterFactory class WireJsonAdapterFactory : Factory A JsonAdapter.Factory that allows Wire messages to be serialized and deserialized using the Moshi Json library.","title":"Types"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/#extensions-for-external-classes","text":"Name Summary com.squareup.moshi.JsonAdapter","title":"Extensions for External Classes"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/","text":"wire-moshi-adapter / com.squareup.wire / WireJsonAdapterFactory WireJsonAdapterFactory \u00b6 class WireJsonAdapterFactory : Factory A JsonAdapter.Factory that allows Wire messages to be serialized and deserialized using the Moshi Json library. Moshi moshi = new Moshi.Builder() .add(new WireJsonAdapterFactory()) .build(); The resulting Moshi instance will be able to serialize and deserialize Wire Message types, including extensions. It ignores unknown field values. The JSON encoding is intended to be compatible with the protobuf-java-format library. Constructors \u00b6 Name Summary <init> WireJsonAdapterFactory() Functions \u00b6 Name Summary create fun create(type: Type , annotations: Set < Annotation >, moshi: Moshi): JsonAdapter<*>? plus fun plus(adapters: List <ProtoAdapter<*>>): WireJsonAdapterFactory Returns a new WireJsonAdapterFactory that can encode the messages for adapters if they\u2019re used with AnyMessage . fun plus(adapter: ProtoAdapter<*>): WireJsonAdapterFactory Returns a new WireJsonAdapterFactory that can encode the messages for adapter if they\u2019re used with AnyMessage .","title":"Index"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/#wirejsonadapterfactory","text":"class WireJsonAdapterFactory : Factory A JsonAdapter.Factory that allows Wire messages to be serialized and deserialized using the Moshi Json library. Moshi moshi = new Moshi.Builder() .add(new WireJsonAdapterFactory()) .build(); The resulting Moshi instance will be able to serialize and deserialize Wire Message types, including extensions. It ignores unknown field values. The JSON encoding is intended to be compatible with the protobuf-java-format library.","title":"WireJsonAdapterFactory"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/#constructors","text":"Name Summary <init> WireJsonAdapterFactory()","title":"Constructors"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/#functions","text":"Name Summary create fun create(type: Type , annotations: Set < Annotation >, moshi: Moshi): JsonAdapter<*>? plus fun plus(adapters: List <ProtoAdapter<*>>): WireJsonAdapterFactory Returns a new WireJsonAdapterFactory that can encode the messages for adapters if they\u2019re used with AnyMessage . fun plus(adapter: ProtoAdapter<*>): WireJsonAdapterFactory Returns a new WireJsonAdapterFactory that can encode the messages for adapter if they\u2019re used with AnyMessage .","title":"Functions"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/-init-/","text":"wire-moshi-adapter / com.squareup.wire / WireJsonAdapterFactory / <init> <init> \u00b6 WireJsonAdapterFactory()","title":" init "},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/-init-/#init","text":"WireJsonAdapterFactory()","title":"&lt;init&gt;"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/create/","text":"wire-moshi-adapter / com.squareup.wire / WireJsonAdapterFactory / create create \u00b6 fun create(type: Type , annotations: Set < Annotation >, moshi: Moshi): JsonAdapter<*>?","title":"Create"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/create/#create","text":"fun create(type: Type , annotations: Set < Annotation >, moshi: Moshi): JsonAdapter<*>?","title":"create"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/plus/","text":"wire-moshi-adapter / com.squareup.wire / WireJsonAdapterFactory / plus plus \u00b6 fun plus(adapters: List <ProtoAdapter<*>>): WireJsonAdapterFactory Returns a new WireJsonAdapterFactory that can encode the messages for adapters if they\u2019re used with AnyMessage . fun plus(adapter: ProtoAdapter<*>): WireJsonAdapterFactory Returns a new WireJsonAdapterFactory that can encode the messages for adapter if they\u2019re used with AnyMessage .","title":"Plus"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/plus/#plus","text":"fun plus(adapters: List <ProtoAdapter<*>>): WireJsonAdapterFactory Returns a new WireJsonAdapterFactory that can encode the messages for adapters if they\u2019re used with AnyMessage . fun plus(adapter: ProtoAdapter<*>): WireJsonAdapterFactory Returns a new WireJsonAdapterFactory that can encode the messages for adapter if they\u2019re used with AnyMessage .","title":"plus"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/com.squareup.moshi.-json-adapter/","text":"wire-moshi-adapter / com.squareup.wire / com.squareup.moshi.JsonAdapter Extensions for com.squareup.moshi.JsonAdapter \u00b6 Name Summary redacting fun <T> JsonAdapter< T >.redacting(): JsonAdapter< T >","title":"Index"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/com.squareup.moshi.-json-adapter/#extensions-for-comsquareupmoshijsonadapter","text":"Name Summary redacting fun <T> JsonAdapter< T >.redacting(): JsonAdapter< T >","title":"Extensions for com.squareup.moshi.JsonAdapter"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/com.squareup.moshi.-json-adapter/redacting/","text":"wire-moshi-adapter / com.squareup.wire / com.squareup.moshi.JsonAdapter / redacting redacting \u00b6 fun <T> JsonAdapter< T >.redacting(): JsonAdapter< T >","title":"Redacting"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/com.squareup.moshi.-json-adapter/redacting/#redacting","text":"fun <T> JsonAdapter< T >.redacting(): JsonAdapter< T >","title":"redacting"},{"location":"3.x/wire-runtime/","text":"wire-runtime Packages \u00b6 Name Summary com.squareup.wire Index \u00b6 All Types","title":"Index"},{"location":"3.x/wire-runtime/#packages","text":"Name Summary com.squareup.wire","title":"Packages"},{"location":"3.x/wire-runtime/#index","text":"All Types","title":"Index"},{"location":"3.x/wire-runtime/alltypes/","text":"All Types \u00b6 Name Summary com.squareup.wire.AndroidMessage An Android-specific Message which adds support for Parcelable . com.squareup.wire.AnyMessage Wire implementation of the google.protobuf.Any type. The Any type wraps an arbitrary protobuf message. Field of Any generated by Wire will be typed AnyMessage . typeUrl is used to identify the type of the message, defined as \u2018type.googleapis.com/full.type.name\u2019. value is the serialized representation of the wrapped message. The pack and unpack methods are available to wrap and unwrap an Any message. com.squareup.wire.EnumAdapter An abstract ProtoAdapter that converts values of an enum to and from integers. com.squareup.wire.FieldEncoding com.squareup.wire.Message A protocol buffer message. com.squareup.wire.MessageSink A writable stream of messages. com.squareup.wire.MessageSource A readable stream of messages. com.squareup.wire.OneOf A oneof\u2019s value and the key that identifies which field holds it. com.squareup.wire.ProtoAdapter com.squareup.wire.ProtoReader Reads and decodes protocol message fields. com.squareup.wire.ProtoWriter Utilities for encoding and writing protocol message fields. com.squareup.wire.RuntimeEnumAdapter Converts values of an enum to and from integers using reflection. com.squareup.wire.Service com.squareup.wire.Syntax Syntax version. com.squareup.wire.WireEnum Interface for generated Enum values to help serialization and deserialization. com.squareup.wire.WireEnumConstant Annotates generated WireEnum fields with metadata for serialization and deserialization. com.squareup.wire.WireField Annotates generated Message fields with metadata for serialization and deserialization. com.squareup.wire.WireRpc For gRPC actions the path is formatted as /<service name>/<method name> . The path of the proto service below is /squareup.helloworld.Greeter/SayHello .","title":"Index"},{"location":"3.x/wire-runtime/alltypes/#all-types","text":"Name Summary com.squareup.wire.AndroidMessage An Android-specific Message which adds support for Parcelable . com.squareup.wire.AnyMessage Wire implementation of the google.protobuf.Any type. The Any type wraps an arbitrary protobuf message. Field of Any generated by Wire will be typed AnyMessage . typeUrl is used to identify the type of the message, defined as \u2018type.googleapis.com/full.type.name\u2019. value is the serialized representation of the wrapped message. The pack and unpack methods are available to wrap and unwrap an Any message. com.squareup.wire.EnumAdapter An abstract ProtoAdapter that converts values of an enum to and from integers. com.squareup.wire.FieldEncoding com.squareup.wire.Message A protocol buffer message. com.squareup.wire.MessageSink A writable stream of messages. com.squareup.wire.MessageSource A readable stream of messages. com.squareup.wire.OneOf A oneof\u2019s value and the key that identifies which field holds it. com.squareup.wire.ProtoAdapter com.squareup.wire.ProtoReader Reads and decodes protocol message fields. com.squareup.wire.ProtoWriter Utilities for encoding and writing protocol message fields. com.squareup.wire.RuntimeEnumAdapter Converts values of an enum to and from integers using reflection. com.squareup.wire.Service com.squareup.wire.Syntax Syntax version. com.squareup.wire.WireEnum Interface for generated Enum values to help serialization and deserialization. com.squareup.wire.WireEnumConstant Annotates generated WireEnum fields with metadata for serialization and deserialization. com.squareup.wire.WireField Annotates generated Message fields with metadata for serialization and deserialization. com.squareup.wire.WireRpc For gRPC actions the path is formatted as /<service name>/<method name> . The path of the proto service below is /squareup.helloworld.Greeter/SayHello .","title":"All Types"},{"location":"3.x/wire-runtime/com.squareup.wire/","text":"wire-runtime / com.squareup.wire Package com.squareup.wire \u00b6 Types \u00b6 Name Summary AndroidMessage (JVM) abstract class AndroidMessage<M : Message < M , B >, B : Builder < M , B >> : Message < M , B > An Android-specific Message which adds support for Parcelable . AnyMessage class AnyMessage : Message < AnyMessage , Nothing > Wire implementation of the google.protobuf.Any type. The Any type wraps an arbitrary protobuf message. Field of Any generated by Wire will be typed AnyMessage . typeUrl is used to identify the type of the message, defined as \u2018type.googleapis.com/full.type.name\u2019. value is the serialized representation of the wrapped message. The pack and unpack methods are available to wrap and unwrap an Any message. Duration expect class Duration A measurement of time. Durations may be positive, zero, or negative. EnumAdapter (JVM, js, native) abstract expect class EnumAdapter<E : WireEnum > : ProtoAdapter < E > An abstract ProtoAdapter that converts values of an enum to and from integers. FieldEncoding enum class FieldEncoding Instant expect class Instant This represents a timestamp, though we use the name \u2018instant\u2019 in the runtime because that\u2019s what the JVM libraries use, and \u2018Timestamp\u2019 means something else on that platform. Message (JVM, js, native) abstract expect class Message<M : Message < M , B >, B : Builder < M , B >> A protocol buffer message. MessageSink (JVM, js, native) expect interface MessageSink<in T : Any > A writable stream of messages. MessageSource (JVM, js, native) expect interface MessageSource<out T : Any > A readable stream of messages. OneOf data class OneOf<out K : Key < T >, T> A oneof\u2019s value and the key that identifies which field holds it. ProtoAdapter (JVM, js, native) abstract expect class ProtoAdapter<E> ProtoReader class ProtoReader Reads and decodes protocol message fields. ProtoWriter class ProtoWriter Utilities for encoding and writing protocol message fields. RuntimeEnumAdapter (JVM) class RuntimeEnumAdapter<E> : EnumAdapter < E > Converts values of an enum to and from integers using reflection. Service interface Service Syntax enum class Syntax Syntax version. WireEnum interface WireEnum Interface for generated Enum values to help serialization and deserialization. Annotations \u00b6 Name Summary WireEnumConstant annotation class WireEnumConstant Annotates generated WireEnum fields with metadata for serialization and deserialization. WireField annotation class WireField Annotates generated Message fields with metadata for serialization and deserialization. WireRpc annotation class WireRpc For gRPC actions the path is formatted as /<service name>/<method name> . The path of the proto service below is /squareup.helloworld.Greeter/SayHello . Type Aliases \u00b6 Name Summary Duration (JVM) actual typealias Duration = Duration Instant (JVM) actual typealias Instant = Instant Functions \u00b6 Name Summary durationOfSeconds (JVM, js, native) expect fun durationOfSeconds(seconds: Long , nano: Long ): Duration get (JVM) fun <T> get(value: T ?, defaultValue: T ): T Returns value if it is not null; defaultValue otherwise. This is used to conveniently return a default value when a value is null. For example, ofEpochSecond (JVM, js, native) expect fun ofEpochSecond(epochSecond: Long , nano: Long ): Instant","title":"wire-runtime"},{"location":"3.x/wire-runtime/com.squareup.wire/#package-comsquareupwire","text":"","title":"Package com.squareup.wire"},{"location":"3.x/wire-runtime/com.squareup.wire/#types","text":"Name Summary AndroidMessage (JVM) abstract class AndroidMessage<M : Message < M , B >, B : Builder < M , B >> : Message < M , B > An Android-specific Message which adds support for Parcelable . AnyMessage class AnyMessage : Message < AnyMessage , Nothing > Wire implementation of the google.protobuf.Any type. The Any type wraps an arbitrary protobuf message. Field of Any generated by Wire will be typed AnyMessage . typeUrl is used to identify the type of the message, defined as \u2018type.googleapis.com/full.type.name\u2019. value is the serialized representation of the wrapped message. The pack and unpack methods are available to wrap and unwrap an Any message. Duration expect class Duration A measurement of time. Durations may be positive, zero, or negative. EnumAdapter (JVM, js, native) abstract expect class EnumAdapter<E : WireEnum > : ProtoAdapter < E > An abstract ProtoAdapter that converts values of an enum to and from integers. FieldEncoding enum class FieldEncoding Instant expect class Instant This represents a timestamp, though we use the name \u2018instant\u2019 in the runtime because that\u2019s what the JVM libraries use, and \u2018Timestamp\u2019 means something else on that platform. Message (JVM, js, native) abstract expect class Message<M : Message < M , B >, B : Builder < M , B >> A protocol buffer message. MessageSink (JVM, js, native) expect interface MessageSink<in T : Any > A writable stream of messages. MessageSource (JVM, js, native) expect interface MessageSource<out T : Any > A readable stream of messages. OneOf data class OneOf<out K : Key < T >, T> A oneof\u2019s value and the key that identifies which field holds it. ProtoAdapter (JVM, js, native) abstract expect class ProtoAdapter<E> ProtoReader class ProtoReader Reads and decodes protocol message fields. ProtoWriter class ProtoWriter Utilities for encoding and writing protocol message fields. RuntimeEnumAdapter (JVM) class RuntimeEnumAdapter<E> : EnumAdapter < E > Converts values of an enum to and from integers using reflection. Service interface Service Syntax enum class Syntax Syntax version. WireEnum interface WireEnum Interface for generated Enum values to help serialization and deserialization.","title":"Types"},{"location":"3.x/wire-runtime/com.squareup.wire/#annotations","text":"Name Summary WireEnumConstant annotation class WireEnumConstant Annotates generated WireEnum fields with metadata for serialization and deserialization. WireField annotation class WireField Annotates generated Message fields with metadata for serialization and deserialization. WireRpc annotation class WireRpc For gRPC actions the path is formatted as /<service name>/<method name> . The path of the proto service below is /squareup.helloworld.Greeter/SayHello .","title":"Annotations"},{"location":"3.x/wire-runtime/com.squareup.wire/#type-aliases","text":"Name Summary Duration (JVM) actual typealias Duration = Duration Instant (JVM) actual typealias Instant = Instant","title":"Type Aliases"},{"location":"3.x/wire-runtime/com.squareup.wire/#functions","text":"Name Summary durationOfSeconds (JVM, js, native) expect fun durationOfSeconds(seconds: Long , nano: Long ): Duration get (JVM) fun <T> get(value: T ?, defaultValue: T ): T Returns value if it is not null; defaultValue otherwise. This is used to conveniently return a default value when a value is null. For example, ofEpochSecond (JVM, js, native) expect fun ofEpochSecond(epochSecond: Long , nano: Long ): Instant","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-service/","text":"wire-runtime / com.squareup.wire / Service Service \u00b6 interface Service","title":" service"},{"location":"3.x/wire-runtime/com.squareup.wire/-service/#service","text":"interface Service","title":"Service"},{"location":"3.x/wire-runtime/com.squareup.wire/duration-of-seconds/","text":"wire-runtime / com.squareup.wire / durationOfSeconds durationOfSeconds \u00b6 expect fun durationOfSeconds(seconds: Long , nano: Long ): Duration Platform and version requirements: JVM, js, native","title":"Duration of seconds"},{"location":"3.x/wire-runtime/com.squareup.wire/duration-of-seconds/#durationofseconds","text":"expect fun durationOfSeconds(seconds: Long , nano: Long ): Duration Platform and version requirements: JVM, js, native","title":"durationOfSeconds"},{"location":"3.x/wire-runtime/com.squareup.wire/get/","text":"wire-runtime / com.squareup.wire / get get \u00b6 fun <T> get(value: T ?, defaultValue: T ): T Platform and version requirements: JVM Returns value if it is not null; defaultValue otherwise. This is used to conveniently return a default value when a value is null. For example, MyProto myProto = ... MyField field = Wire.get(myProto.f, MyProto.f_default); will attempt to retrieve the value of the field \u2018f\u2019 defined by MyProto. If the field is null (i.e., unset), get will return its second argument, which in this case is the default value for the field \u2018f\u2019.","title":"Get"},{"location":"3.x/wire-runtime/com.squareup.wire/get/#get","text":"fun <T> get(value: T ?, defaultValue: T ): T Platform and version requirements: JVM Returns value if it is not null; defaultValue otherwise. This is used to conveniently return a default value when a value is null. For example, MyProto myProto = ... MyField field = Wire.get(myProto.f, MyProto.f_default); will attempt to retrieve the value of the field \u2018f\u2019 defined by MyProto. If the field is null (i.e., unset), get will return its second argument, which in this case is the default value for the field \u2018f\u2019.","title":"get"},{"location":"3.x/wire-runtime/com.squareup.wire/of-epoch-second/","text":"wire-runtime / com.squareup.wire / ofEpochSecond ofEpochSecond \u00b6 expect fun ofEpochSecond(epochSecond: Long , nano: Long ): Instant Platform and version requirements: JVM, js, native","title":"Of epoch second"},{"location":"3.x/wire-runtime/com.squareup.wire/of-epoch-second/#ofepochsecond","text":"expect fun ofEpochSecond(epochSecond: Long , nano: Long ): Instant Platform and version requirements: JVM, js, native","title":"ofEpochSecond"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/","text":"wire-runtime / com.squareup.wire / AndroidMessage AndroidMessage \u00b6 abstract class AndroidMessage<M : Message < M , B >, B : Builder < M , B >> : Message < M , B > Platform and version requirements: JVM An Android-specific Message which adds support for Parcelable . Constructors \u00b6 Name Summary <init> AndroidMessage(adapter: ProtoAdapter < M >, unknownFields: <ERROR CLASS>) An Android-specific Message which adds support for Parcelable . Inherited Properties \u00b6 Name Summary adapter (JVM, js, native) val adapter: ProtoAdapter < M > The ProtoAdapter for encoding and decoding messages of this type. hashCode (JVM, js, native) var hashCode: Int If non-zero, the hash code of this message. Accessed by generated code. unknownFields (JVM, js, native) val unknownFields: <ERROR CLASS> Returns a byte string containing the proto encoding of this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields. Functions \u00b6 Name Summary describeContents open fun describeContents(): Int writeToParcel open fun writeToParcel(dest: <ERROR CLASS>, flags: Int ): Unit Inherited Functions \u00b6 Name Summary encode (JVM) fun encode(): ByteArray Encode this message as a byte[] . fun encode(stream: OutputStream ): Unit Encode this message and write it to stream . encodeByteString (JVM, js, native) fun encodeByteString(): <ERROR CLASS> Encode this message as a ByteString . newBuilder (JVM, js, native) abstract fun newBuilder(): B Returns a new builder initialized with the data in this message. toString (JVM, js, native) open fun toString(): String withoutUnknownFields (JVM) fun withoutUnknownFields(): M Returns this message with any unknown fields removed. writeReplace (JVM) fun writeReplace(): Any Companion Object Functions \u00b6 Name Summary newCreator fun <E> newCreator(adapter: ProtoAdapter < E >): <ERROR CLASS>< E > Creates a new Parcelable.Creator using adapter for serialization.","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/#androidmessage","text":"abstract class AndroidMessage<M : Message < M , B >, B : Builder < M , B >> : Message < M , B > Platform and version requirements: JVM An Android-specific Message which adds support for Parcelable .","title":"AndroidMessage"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/#constructors","text":"Name Summary <init> AndroidMessage(adapter: ProtoAdapter < M >, unknownFields: <ERROR CLASS>) An Android-specific Message which adds support for Parcelable .","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/#inherited-properties","text":"Name Summary adapter (JVM, js, native) val adapter: ProtoAdapter < M > The ProtoAdapter for encoding and decoding messages of this type. hashCode (JVM, js, native) var hashCode: Int If non-zero, the hash code of this message. Accessed by generated code. unknownFields (JVM, js, native) val unknownFields: <ERROR CLASS> Returns a byte string containing the proto encoding of this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields.","title":"Inherited Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/#functions","text":"Name Summary describeContents open fun describeContents(): Int writeToParcel open fun writeToParcel(dest: <ERROR CLASS>, flags: Int ): Unit","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/#inherited-functions","text":"Name Summary encode (JVM) fun encode(): ByteArray Encode this message as a byte[] . fun encode(stream: OutputStream ): Unit Encode this message and write it to stream . encodeByteString (JVM, js, native) fun encodeByteString(): <ERROR CLASS> Encode this message as a ByteString . newBuilder (JVM, js, native) abstract fun newBuilder(): B Returns a new builder initialized with the data in this message. toString (JVM, js, native) open fun toString(): String withoutUnknownFields (JVM) fun withoutUnknownFields(): M Returns this message with any unknown fields removed. writeReplace (JVM) fun writeReplace(): Any","title":"Inherited Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/#companion-object-functions","text":"Name Summary newCreator fun <E> newCreator(adapter: ProtoAdapter < E >): <ERROR CLASS>< E > Creates a new Parcelable.Creator using adapter for serialization.","title":"Companion Object Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/-init-/","text":"wire-runtime / com.squareup.wire / AndroidMessage / <init> <init> \u00b6 protected AndroidMessage(adapter: ProtoAdapter < M >, unknownFields: <ERROR CLASS>) Platform and version requirements: JVM An Android-specific Message which adds support for Parcelable .","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/-init-/#init","text":"protected AndroidMessage(adapter: ProtoAdapter < M >, unknownFields: <ERROR CLASS>) Platform and version requirements: JVM An Android-specific Message which adds support for Parcelable .","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/describe-contents/","text":"wire-runtime / com.squareup.wire / AndroidMessage / describeContents describeContents \u00b6 open fun describeContents(): Int Platform and version requirements: JVM","title":"Describe contents"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/describe-contents/#describecontents","text":"open fun describeContents(): Int Platform and version requirements: JVM","title":"describeContents"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/new-creator/","text":"wire-runtime / com.squareup.wire / AndroidMessage / newCreator newCreator \u00b6 fun <E> newCreator(adapter: ProtoAdapter < E >): <ERROR CLASS>< E > Platform and version requirements: JVM Creates a new Parcelable.Creator using adapter for serialization.","title":"New creator"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/new-creator/#newcreator","text":"fun <E> newCreator(adapter: ProtoAdapter < E >): <ERROR CLASS>< E > Platform and version requirements: JVM Creates a new Parcelable.Creator using adapter for serialization.","title":"newCreator"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/write-to-parcel/","text":"wire-runtime / com.squareup.wire / AndroidMessage / writeToParcel writeToParcel \u00b6 open fun writeToParcel(dest: <ERROR CLASS>, flags: Int ): Unit Platform and version requirements: JVM","title":"Write to parcel"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/write-to-parcel/#writetoparcel","text":"open fun writeToParcel(dest: <ERROR CLASS>, flags: Int ): Unit Platform and version requirements: JVM","title":"writeToParcel"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/","text":"wire-runtime / com.squareup.wire / AnyMessage AnyMessage \u00b6 class AnyMessage : Message < AnyMessage , Nothing > Wire implementation of the google.protobuf.Any type. The Any type wraps an arbitrary protobuf message. Field of Any generated by Wire will be typed AnyMessage . typeUrl is used to identify the type of the message, defined as \u2018type.googleapis.com/full.type.name\u2019. value is the serialized representation of the wrapped message. The pack and unpack methods are available to wrap and unwrap an Any message. Example val person: Person = anyMessage.unpack(Person.ADAPTER) val anyMessage: AnyMessage = AnyMessage.ADAPTER.pack(person) Constructors \u00b6 Name Summary <init> AnyMessage(typeUrl: String , value: <ERROR CLASS> = ByteString.EMPTY) Wire implementation of the google.protobuf.Any type. The Any type wraps an arbitrary protobuf message. Field of Any generated by Wire will be typed AnyMessage . typeUrl is used to identify the type of the message, defined as \u2018type.googleapis.com/full.type.name\u2019. value is the serialized representation of the wrapped message. The pack and unpack methods are available to wrap and unwrap an Any message. Properties \u00b6 Name Summary typeUrl val typeUrl: String value val value: <ERROR CLASS> Inherited Properties \u00b6 Name Summary adapter (JVM, js, native) val adapter: ProtoAdapter < M > The ProtoAdapter for encoding and decoding messages of this type. hashCode (JVM, js, native) var hashCode: Int If non-zero, the hash code of this message. Accessed by generated code. unknownFields (JVM, js, native) val unknownFields: <ERROR CLASS> Returns a byte string containing the proto encoding of this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields. Functions \u00b6 Name Summary copy fun copy(typeUrl: String = this.typeUrl, value: <ERROR CLASS> = this.value): AnyMessage equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toString fun toString(): String unpack fun <T> unpack(adapter: ProtoAdapter < T >): T unpackOrNull fun <T> unpackOrNull(adapter: ProtoAdapter < T >): T ? Inherited Functions \u00b6 Name Summary encode (JVM, js, native) fun encode(): ByteArray Encode this message as a byte[] . encodeByteString (JVM, js, native) fun encodeByteString(): <ERROR CLASS> Encode this message as a ByteString . Companion Object Properties \u00b6 Name Summary ADAPTER val ADAPTER: ProtoAdapter < AnyMessage > Companion Object Functions \u00b6 Name Summary pack fun pack(message: Message <*, *>): AnyMessage","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/#anymessage","text":"class AnyMessage : Message < AnyMessage , Nothing > Wire implementation of the google.protobuf.Any type. The Any type wraps an arbitrary protobuf message. Field of Any generated by Wire will be typed AnyMessage . typeUrl is used to identify the type of the message, defined as \u2018type.googleapis.com/full.type.name\u2019. value is the serialized representation of the wrapped message. The pack and unpack methods are available to wrap and unwrap an Any message. Example val person: Person = anyMessage.unpack(Person.ADAPTER) val anyMessage: AnyMessage = AnyMessage.ADAPTER.pack(person)","title":"AnyMessage"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/#constructors","text":"Name Summary <init> AnyMessage(typeUrl: String , value: <ERROR CLASS> = ByteString.EMPTY) Wire implementation of the google.protobuf.Any type. The Any type wraps an arbitrary protobuf message. Field of Any generated by Wire will be typed AnyMessage . typeUrl is used to identify the type of the message, defined as \u2018type.googleapis.com/full.type.name\u2019. value is the serialized representation of the wrapped message. The pack and unpack methods are available to wrap and unwrap an Any message.","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/#properties","text":"Name Summary typeUrl val typeUrl: String value val value: <ERROR CLASS>","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/#inherited-properties","text":"Name Summary adapter (JVM, js, native) val adapter: ProtoAdapter < M > The ProtoAdapter for encoding and decoding messages of this type. hashCode (JVM, js, native) var hashCode: Int If non-zero, the hash code of this message. Accessed by generated code. unknownFields (JVM, js, native) val unknownFields: <ERROR CLASS> Returns a byte string containing the proto encoding of this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields.","title":"Inherited Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/#functions","text":"Name Summary copy fun copy(typeUrl: String = this.typeUrl, value: <ERROR CLASS> = this.value): AnyMessage equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toString fun toString(): String unpack fun <T> unpack(adapter: ProtoAdapter < T >): T unpackOrNull fun <T> unpackOrNull(adapter: ProtoAdapter < T >): T ?","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/#inherited-functions","text":"Name Summary encode (JVM, js, native) fun encode(): ByteArray Encode this message as a byte[] . encodeByteString (JVM, js, native) fun encodeByteString(): <ERROR CLASS> Encode this message as a ByteString .","title":"Inherited Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/#companion-object-properties","text":"Name Summary ADAPTER val ADAPTER: ProtoAdapter < AnyMessage >","title":"Companion Object Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/#companion-object-functions","text":"Name Summary pack fun pack(message: Message <*, *>): AnyMessage","title":"Companion Object Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/-a-d-a-p-t-e-r/","text":"wire-runtime / com.squareup.wire / AnyMessage / ADAPTER ADAPTER \u00b6 val ADAPTER: ProtoAdapter < AnyMessage >","title":" a d a p t e r"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/-a-d-a-p-t-e-r/#adapter","text":"val ADAPTER: ProtoAdapter < AnyMessage >","title":"ADAPTER"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/-init-/","text":"wire-runtime / com.squareup.wire / AnyMessage / <init> <init> \u00b6 AnyMessage(typeUrl: String , value: <ERROR CLASS> = ByteString.EMPTY) Wire implementation of the google.protobuf.Any type. The Any type wraps an arbitrary protobuf message. Field of Any generated by Wire will be typed AnyMessage . typeUrl is used to identify the type of the message, defined as \u2018type.googleapis.com/full.type.name\u2019. value is the serialized representation of the wrapped message. The pack and unpack methods are available to wrap and unwrap an Any message. Example val person: Person = anyMessage.unpack(Person.ADAPTER) val anyMessage: AnyMessage = AnyMessage.ADAPTER.pack(person)","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/-init-/#init","text":"AnyMessage(typeUrl: String , value: <ERROR CLASS> = ByteString.EMPTY) Wire implementation of the google.protobuf.Any type. The Any type wraps an arbitrary protobuf message. Field of Any generated by Wire will be typed AnyMessage . typeUrl is used to identify the type of the message, defined as \u2018type.googleapis.com/full.type.name\u2019. value is the serialized representation of the wrapped message. The pack and unpack methods are available to wrap and unwrap an Any message. Example val person: Person = anyMessage.unpack(Person.ADAPTER) val anyMessage: AnyMessage = AnyMessage.ADAPTER.pack(person)","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/copy/","text":"wire-runtime / com.squareup.wire / AnyMessage / copy copy \u00b6 fun copy(typeUrl: String = this.typeUrl, value: <ERROR CLASS> = this.value): AnyMessage","title":"Copy"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/copy/#copy","text":"fun copy(typeUrl: String = this.typeUrl, value: <ERROR CLASS> = this.value): AnyMessage","title":"copy"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/equals/","text":"wire-runtime / com.squareup.wire / AnyMessage / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/hash-code/","text":"wire-runtime / com.squareup.wire / AnyMessage / hashCode hashCode \u00b6 fun hashCode(): Int","title":"Hash code"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/pack/","text":"wire-runtime / com.squareup.wire / AnyMessage / pack pack \u00b6 fun pack(message: Message <*, *>): AnyMessage","title":"Pack"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/pack/#pack","text":"fun pack(message: Message <*, *>): AnyMessage","title":"pack"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/to-string/","text":"wire-runtime / com.squareup.wire / AnyMessage / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/type-url/","text":"wire-runtime / com.squareup.wire / AnyMessage / typeUrl typeUrl \u00b6 val typeUrl: String","title":"Type url"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/type-url/#typeurl","text":"val typeUrl: String","title":"typeUrl"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/unpack-or-null/","text":"wire-runtime / com.squareup.wire / AnyMessage / unpackOrNull unpackOrNull \u00b6 fun <T> unpackOrNull(adapter: ProtoAdapter < T >): T ?","title":"Unpack or null"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/unpack-or-null/#unpackornull","text":"fun <T> unpackOrNull(adapter: ProtoAdapter < T >): T ?","title":"unpackOrNull"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/unpack/","text":"wire-runtime / com.squareup.wire / AnyMessage / unpack unpack \u00b6 fun <T> unpack(adapter: ProtoAdapter < T >): T","title":"Unpack"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/unpack/#unpack","text":"fun <T> unpack(adapter: ProtoAdapter < T >): T","title":"unpack"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/value/","text":"wire-runtime / com.squareup.wire / AnyMessage / value value \u00b6 val value: <ERROR CLASS>","title":"Value"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/value/#value","text":"val value: <ERROR CLASS>","title":"value"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/","text":"wire-runtime / com.squareup.wire / Duration Duration \u00b6 actual typealias Duration = Duration Platform and version requirements: JVM expect class Duration A measurement of time. Durations may be positive, zero, or negative. Positive durations are measured in seconds, with both #getSeconds and #getNano parts with non-negative signs. Negative durations may be surprising. The #getSeconds property is negative, but the #getNano property is non-negative! To represent -1.3 seconds the seconds property is -2 and the nanos property is 700,000,000. Functions \u00b6 Name Summary getNano (js, native) fun getNano(): Int Returns a value in [0..1,000,000,000) . getSeconds (js, native) fun getSeconds(): Long","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/#duration","text":"actual typealias Duration = Duration Platform and version requirements: JVM expect class Duration A measurement of time. Durations may be positive, zero, or negative. Positive durations are measured in seconds, with both #getSeconds and #getNano parts with non-negative signs. Negative durations may be surprising. The #getSeconds property is negative, but the #getNano property is non-negative! To represent -1.3 seconds the seconds property is -2 and the nanos property is 700,000,000.","title":"Duration"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/#functions","text":"Name Summary getNano (js, native) fun getNano(): Int Returns a value in [0..1,000,000,000) . getSeconds (js, native) fun getSeconds(): Long","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/-duration/","text":"wire-runtime / com.squareup.wire / Duration Duration \u00b6 actual typealias Duration = Duration Platform and version requirements: JVM","title":" duration"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/-duration/#duration","text":"actual typealias Duration = Duration Platform and version requirements: JVM","title":"Duration"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/-duration/","text":"wire-runtime / com.squareup.wire / Duration Duration \u00b6 expect class Duration A measurement of time. Durations may be positive, zero, or negative. Positive durations are measured in seconds, with both #getSeconds and #getNano parts with non-negative signs. Negative durations may be surprising. The #getSeconds property is negative, but the #getNano property is non-negative! To represent -1.3 seconds the seconds property is -2 and the nanos property is 700,000,000. Functions \u00b6 Name Summary getNano (js, native) fun getNano(): Int Returns a value in [0..1,000,000,000) . getSeconds (js, native) fun getSeconds(): Long","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/-duration/#duration","text":"expect class Duration A measurement of time. Durations may be positive, zero, or negative. Positive durations are measured in seconds, with both #getSeconds and #getNano parts with non-negative signs. Negative durations may be surprising. The #getSeconds property is negative, but the #getNano property is non-negative! To represent -1.3 seconds the seconds property is -2 and the nanos property is 700,000,000.","title":"Duration"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/-duration/#functions","text":"Name Summary getNano (js, native) fun getNano(): Int Returns a value in [0..1,000,000,000) . getSeconds (js, native) fun getSeconds(): Long","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/-duration/get-nano/","text":"wire-runtime / com.squareup.wire / Duration / getNano getNano \u00b6 fun getNano(): Int Platform and version requirements: js, native Returns a value in [0..1,000,000,000) .","title":"Get nano"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/-duration/get-nano/#getnano","text":"fun getNano(): Int Platform and version requirements: js, native Returns a value in [0..1,000,000,000) .","title":"getNano"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/-duration/get-seconds/","text":"wire-runtime / com.squareup.wire / Duration / getSeconds getSeconds \u00b6 fun getSeconds(): Long Platform and version requirements: js, native","title":"Get seconds"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/-duration/get-seconds/#getseconds","text":"fun getSeconds(): Long Platform and version requirements: js, native","title":"getSeconds"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/","text":"wire-runtime / com.squareup.wire / EnumAdapter EnumAdapter \u00b6 abstract expect class EnumAdapter<E : WireEnum > : ProtoAdapter < E > Platform and version requirements: JVM, js, native An abstract ProtoAdapter that converts values of an enum to and from integers. Constructors \u00b6 Name Summary <init> EnumAdapter(type: KClass < E >, syntax: Syntax , identity: E ?) EnumAdapter(type: KClass < E >, syntax: <ERROR CLASS>, identity: E ?) An abstract ProtoAdapter that converts values of an enum to and from integers. EnumAdapter(type: Class < E >, syntax: <ERROR CLASS>, identity: E ?) EnumAdapter(type: Class < E >) EnumAdapter(type: Class < E >, syntax: <ERROR CLASS>) EnumAdapter(type: KClass < E >) EnumAdapter(type: KClass < E >, syntax: <ERROR CLASS>) Inherited Properties \u00b6 Name Summary identity (JVM, js, native) val identity: E ? A special value that is used when a field is absent from an encoded proto3 message. When encoding a proto3 message, fields that hold this value will be omitted. syntax (JVM, js, native) val syntax: Syntax Identifies the syntax in which type is defined in the proto schema. This string contains either \u201cproto2\u201d or \u201cproto3\u201d. type (JVM, js, native) val type: KClass <*>? typeUrl (JVM, js, native) val typeUrl: String ? Identifies this type for inclusion in a google.protobuf.Any . This is a string like \u201ctype.googleapis.com/packagename.messagename\u201d or null if this type is either not a message (such as scalars and enums), or was code-generated before Wire 3.2 which introduced support for type URLS. Functions \u00b6 Name Summary decode open fun decode(reader: ProtoReader ): E Read a non-null value from reader . open actual fun decode(reader: <ERROR CLASS>): E encode open fun encode(writer: ProtoWriter , value: E ): Unit Write non-null value to writer . open actual fun encode(writer: <ERROR CLASS>, value: E ): Unit encodedSize open fun encodedSize(value: E ): Int The size of the non-null data value . This does not include the size required for a length-delimited prefix (should the type require one). fromValue abstract fun fromValue(value: Int ): E ? Converts an integer to an enum. Returns null if there is no corresponding enum. redact open fun redact(value: E ): E Returns the redacted form of value . Inherited Functions \u00b6 Name Summary asPacked (JVM, js, native) fun asPacked(): ProtoAdapter < List < E >> Returns an adapter for E but as a packed, repeated value. asRepeated (JVM, js, native) fun asRepeated(): ProtoAdapter < List < E >> Returns an adapter for E but as a repeated value. decode (JVM) fun decode(bytes: ByteArray ): E Read an encoded message from bytes . fun decode(source: <ERROR CLASS>): E Read an encoded message from source . fun decode(stream: InputStream ): E encode (JVM) fun encode(sink: <ERROR CLASS>, value: E ): Unit Encode value and write it to stream . fun encode(value: E ): ByteArray Encode value as a byte[] . fun encode(stream: OutputStream , value: E ): Unit encodeByteString (JVM, js, native) fun encodeByteString(value: E ): <ERROR CLASS> Encode value as a ByteString . encodeWithTag open fun encodeWithTag(writer: ProtoWriter , tag: Int , value: E ?): Unit Write tag and value to writer . If value is null this does nothing. open actual fun encodeWithTag(writer: <ERROR CLASS>, tag: Int , value: E ?): Unit encodedSizeWithTag (JVM, js, native) open fun encodedSizeWithTag(tag: Int , value: E ?): Int The size of tag and value in the wire format. This size includes the tag, type, length-delimited prefix (should the type require one), and value. Returns 0 if value is null. toString (JVM, js, native) open fun toString(value: E ): String Returns a human-readable version of the given value . Inheritors \u00b6 Name Summary RuntimeEnumAdapter (JVM) class RuntimeEnumAdapter<E> : EnumAdapter < E > Converts values of an enum to and from integers using reflection.","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/#enumadapter","text":"abstract expect class EnumAdapter<E : WireEnum > : ProtoAdapter < E > Platform and version requirements: JVM, js, native An abstract ProtoAdapter that converts values of an enum to and from integers.","title":"EnumAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/#constructors","text":"Name Summary <init> EnumAdapter(type: KClass < E >, syntax: Syntax , identity: E ?) EnumAdapter(type: KClass < E >, syntax: <ERROR CLASS>, identity: E ?) An abstract ProtoAdapter that converts values of an enum to and from integers. EnumAdapter(type: Class < E >, syntax: <ERROR CLASS>, identity: E ?) EnumAdapter(type: Class < E >) EnumAdapter(type: Class < E >, syntax: <ERROR CLASS>) EnumAdapter(type: KClass < E >) EnumAdapter(type: KClass < E >, syntax: <ERROR CLASS>)","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/#inherited-properties","text":"Name Summary identity (JVM, js, native) val identity: E ? A special value that is used when a field is absent from an encoded proto3 message. When encoding a proto3 message, fields that hold this value will be omitted. syntax (JVM, js, native) val syntax: Syntax Identifies the syntax in which type is defined in the proto schema. This string contains either \u201cproto2\u201d or \u201cproto3\u201d. type (JVM, js, native) val type: KClass <*>? typeUrl (JVM, js, native) val typeUrl: String ? Identifies this type for inclusion in a google.protobuf.Any . This is a string like \u201ctype.googleapis.com/packagename.messagename\u201d or null if this type is either not a message (such as scalars and enums), or was code-generated before Wire 3.2 which introduced support for type URLS.","title":"Inherited Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/#functions","text":"Name Summary decode open fun decode(reader: ProtoReader ): E Read a non-null value from reader . open actual fun decode(reader: <ERROR CLASS>): E encode open fun encode(writer: ProtoWriter , value: E ): Unit Write non-null value to writer . open actual fun encode(writer: <ERROR CLASS>, value: E ): Unit encodedSize open fun encodedSize(value: E ): Int The size of the non-null data value . This does not include the size required for a length-delimited prefix (should the type require one). fromValue abstract fun fromValue(value: Int ): E ? Converts an integer to an enum. Returns null if there is no corresponding enum. redact open fun redact(value: E ): E Returns the redacted form of value .","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/#inherited-functions","text":"Name Summary asPacked (JVM, js, native) fun asPacked(): ProtoAdapter < List < E >> Returns an adapter for E but as a packed, repeated value. asRepeated (JVM, js, native) fun asRepeated(): ProtoAdapter < List < E >> Returns an adapter for E but as a repeated value. decode (JVM) fun decode(bytes: ByteArray ): E Read an encoded message from bytes . fun decode(source: <ERROR CLASS>): E Read an encoded message from source . fun decode(stream: InputStream ): E encode (JVM) fun encode(sink: <ERROR CLASS>, value: E ): Unit Encode value and write it to stream . fun encode(value: E ): ByteArray Encode value as a byte[] . fun encode(stream: OutputStream , value: E ): Unit encodeByteString (JVM, js, native) fun encodeByteString(value: E ): <ERROR CLASS> Encode value as a ByteString . encodeWithTag open fun encodeWithTag(writer: ProtoWriter , tag: Int , value: E ?): Unit Write tag and value to writer . If value is null this does nothing. open actual fun encodeWithTag(writer: <ERROR CLASS>, tag: Int , value: E ?): Unit encodedSizeWithTag (JVM, js, native) open fun encodedSizeWithTag(tag: Int , value: E ?): Int The size of tag and value in the wire format. This size includes the tag, type, length-delimited prefix (should the type require one), and value. Returns 0 if value is null. toString (JVM, js, native) open fun toString(value: E ): String Returns a human-readable version of the given value .","title":"Inherited Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/#inheritors","text":"Name Summary RuntimeEnumAdapter (JVM) class RuntimeEnumAdapter<E> : EnumAdapter < E > Converts values of an enum to and from integers using reflection.","title":"Inheritors"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/-init-/","text":"wire-runtime / com.squareup.wire / EnumAdapter / <init> <init> \u00b6 protected EnumAdapter(type: KClass < E >, syntax: Syntax , identity: E ?) protected EnumAdapter(type: KClass < E >, syntax: <ERROR CLASS>, identity: E ?) Platform and version requirements: JVM, js, native An abstract ProtoAdapter that converts values of an enum to and from integers. EnumAdapter(type: Class < E >, syntax: <ERROR CLASS>, identity: E ?) Platform and version requirements: JVM EnumAdapter(type: Class < E >) Platform and version requirements: JVM EnumAdapter(type: Class < E >, syntax: <ERROR CLASS>) Platform and version requirements: JVM EnumAdapter(type: KClass < E >) Platform and version requirements: JVM EnumAdapter(type: KClass < E >, syntax: <ERROR CLASS>) Platform and version requirements: JVM","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/-init-/#init","text":"protected EnumAdapter(type: KClass < E >, syntax: Syntax , identity: E ?) protected EnumAdapter(type: KClass < E >, syntax: <ERROR CLASS>, identity: E ?) Platform and version requirements: JVM, js, native An abstract ProtoAdapter that converts values of an enum to and from integers. EnumAdapter(type: Class < E >, syntax: <ERROR CLASS>, identity: E ?) Platform and version requirements: JVM EnumAdapter(type: Class < E >) Platform and version requirements: JVM EnumAdapter(type: Class < E >, syntax: <ERROR CLASS>) Platform and version requirements: JVM EnumAdapter(type: KClass < E >) Platform and version requirements: JVM EnumAdapter(type: KClass < E >, syntax: <ERROR CLASS>) Platform and version requirements: JVM","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/decode/","text":"wire-runtime / com.squareup.wire / EnumAdapter / decode decode \u00b6 open fun decode(reader: ProtoReader ): E Overrides ProtoAdapter.decode Read a non-null value from reader . open actual fun decode(reader: <ERROR CLASS>): E Overrides ProtoAdapter.decode Platform and version requirements: JVM, js, native","title":"Decode"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/decode/#decode","text":"open fun decode(reader: ProtoReader ): E Overrides ProtoAdapter.decode Read a non-null value from reader . open actual fun decode(reader: <ERROR CLASS>): E Overrides ProtoAdapter.decode Platform and version requirements: JVM, js, native","title":"decode"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/encode/","text":"wire-runtime / com.squareup.wire / EnumAdapter / encode encode \u00b6 open fun encode(writer: ProtoWriter , value: E ): Unit Overrides ProtoAdapter.encode Write non-null value to writer . open actual fun encode(writer: <ERROR CLASS>, value: E ): Unit Overrides ProtoAdapter.encode Platform and version requirements: JVM, js, native","title":"Encode"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/encode/#encode","text":"open fun encode(writer: ProtoWriter , value: E ): Unit Overrides ProtoAdapter.encode Write non-null value to writer . open actual fun encode(writer: <ERROR CLASS>, value: E ): Unit Overrides ProtoAdapter.encode Platform and version requirements: JVM, js, native","title":"encode"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/encoded-size/","text":"wire-runtime / com.squareup.wire / EnumAdapter / encodedSize encodedSize \u00b6 open fun encodedSize(value: E ): Int Overrides ProtoAdapter.encodedSize Platform and version requirements: JVM, js, native The size of the non-null data value . This does not include the size required for a length-delimited prefix (should the type require one).","title":"Encoded size"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/encoded-size/#encodedsize","text":"open fun encodedSize(value: E ): Int Overrides ProtoAdapter.encodedSize Platform and version requirements: JVM, js, native The size of the non-null data value . This does not include the size required for a length-delimited prefix (should the type require one).","title":"encodedSize"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/from-value/","text":"wire-runtime / com.squareup.wire / EnumAdapter / fromValue fromValue \u00b6 protected abstract fun fromValue(value: Int ): E ? Platform and version requirements: JVM, js, native Converts an integer to an enum. Returns null if there is no corresponding enum.","title":"From value"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/from-value/#fromvalue","text":"protected abstract fun fromValue(value: Int ): E ? Platform and version requirements: JVM, js, native Converts an integer to an enum. Returns null if there is no corresponding enum.","title":"fromValue"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/redact/","text":"wire-runtime / com.squareup.wire / EnumAdapter / redact redact \u00b6 open fun redact(value: E ): E Overrides ProtoAdapter.redact Platform and version requirements: JVM, js, native Returns the redacted form of value .","title":"Redact"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/redact/#redact","text":"open fun redact(value: E ): E Overrides ProtoAdapter.redact Platform and version requirements: JVM, js, native Returns the redacted form of value .","title":"redact"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/","text":"wire-runtime / com.squareup.wire / FieldEncoding FieldEncoding \u00b6 enum class FieldEncoding Enum Values \u00b6 Name Summary VARINT FIXED64 LENGTH_DELIMITED FIXED32 Functions \u00b6 Name Summary rawProtoAdapter fun rawProtoAdapter(): ProtoAdapter <*> Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/#fieldencoding","text":"enum class FieldEncoding","title":"FieldEncoding"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/#enum-values","text":"Name Summary VARINT FIXED64 LENGTH_DELIMITED FIXED32","title":"Enum Values"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/#functions","text":"Name Summary rawProtoAdapter fun rawProtoAdapter(): ProtoAdapter <*> Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d32/","text":"wire-runtime / com.squareup.wire / FieldEncoding / FIXED32 FIXED32 \u00b6 FIXED32 Inherited Functions \u00b6 Name Summary rawProtoAdapter fun rawProtoAdapter(): ProtoAdapter <*> Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":" f i x e d32"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d32/#fixed32","text":"FIXED32","title":"FIXED32"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d32/#inherited-functions","text":"Name Summary rawProtoAdapter fun rawProtoAdapter(): ProtoAdapter <*> Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":"Inherited Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d64/","text":"wire-runtime / com.squareup.wire / FieldEncoding / FIXED64 FIXED64 \u00b6 FIXED64 Inherited Functions \u00b6 Name Summary rawProtoAdapter fun rawProtoAdapter(): ProtoAdapter <*> Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":" f i x e d64"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d64/#fixed64","text":"FIXED64","title":"FIXED64"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d64/#inherited-functions","text":"Name Summary rawProtoAdapter fun rawProtoAdapter(): ProtoAdapter <*> Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":"Inherited Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-l-e-n-g-t-h_-d-e-l-i-m-i-t-e-d/","text":"wire-runtime / com.squareup.wire / FieldEncoding / LENGTH_DELIMITED LENGTH_DELIMITED \u00b6 LENGTH_DELIMITED Inherited Functions \u00b6 Name Summary rawProtoAdapter fun rawProtoAdapter(): ProtoAdapter <*> Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":" l e n g t h  d e l i m i t e d"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-l-e-n-g-t-h_-d-e-l-i-m-i-t-e-d/#length_delimited","text":"LENGTH_DELIMITED","title":"LENGTH_DELIMITED"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-l-e-n-g-t-h_-d-e-l-i-m-i-t-e-d/#inherited-functions","text":"Name Summary rawProtoAdapter fun rawProtoAdapter(): ProtoAdapter <*> Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":"Inherited Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-v-a-r-i-n-t/","text":"wire-runtime / com.squareup.wire / FieldEncoding / VARINT VARINT \u00b6 VARINT Inherited Functions \u00b6 Name Summary rawProtoAdapter fun rawProtoAdapter(): ProtoAdapter <*> Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":" v a r i n t"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-v-a-r-i-n-t/#varint","text":"VARINT","title":"VARINT"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-v-a-r-i-n-t/#inherited-functions","text":"Name Summary rawProtoAdapter fun rawProtoAdapter(): ProtoAdapter <*> Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":"Inherited Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/raw-proto-adapter/","text":"wire-runtime / com.squareup.wire / FieldEncoding / rawProtoAdapter rawProtoAdapter \u00b6 fun rawProtoAdapter(): ProtoAdapter <*> Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":"Raw proto adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/raw-proto-adapter/#rawprotoadapter","text":"fun rawProtoAdapter(): ProtoAdapter <*> Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":"rawProtoAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/","text":"wire-runtime / com.squareup.wire / Instant Instant \u00b6 actual typealias Instant = Instant Platform and version requirements: JVM expect class Instant This represents a timestamp, though we use the name \u2018instant\u2019 in the runtime because that\u2019s what the JVM libraries use, and \u2018Timestamp\u2019 means something else on that platform. Functions \u00b6 Name Summary getEpochSecond (js, native) fun getEpochSecond(): Long Returns the number of seconds since the UNIX epoch (1970-01-01T00:00:00Z) if this value is positive, or until the UNIX epoch if this value is negative. getNano (js, native) fun getNano(): Int Returns a value in the range [0..1,000,000,000) indicating the fraction of a second that is added to getEpochSecond .","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/#instant","text":"actual typealias Instant = Instant Platform and version requirements: JVM expect class Instant This represents a timestamp, though we use the name \u2018instant\u2019 in the runtime because that\u2019s what the JVM libraries use, and \u2018Timestamp\u2019 means something else on that platform.","title":"Instant"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/#functions","text":"Name Summary getEpochSecond (js, native) fun getEpochSecond(): Long Returns the number of seconds since the UNIX epoch (1970-01-01T00:00:00Z) if this value is positive, or until the UNIX epoch if this value is negative. getNano (js, native) fun getNano(): Int Returns a value in the range [0..1,000,000,000) indicating the fraction of a second that is added to getEpochSecond .","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/-instant/","text":"wire-runtime / com.squareup.wire / Instant Instant \u00b6 actual typealias Instant = Instant Platform and version requirements: JVM","title":" instant"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/-instant/#instant","text":"actual typealias Instant = Instant Platform and version requirements: JVM","title":"Instant"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/-instant/","text":"wire-runtime / com.squareup.wire / Instant Instant \u00b6 expect class Instant This represents a timestamp, though we use the name \u2018instant\u2019 in the runtime because that\u2019s what the JVM libraries use, and \u2018Timestamp\u2019 means something else on that platform. Functions \u00b6 Name Summary getEpochSecond (js, native) fun getEpochSecond(): Long Returns the number of seconds since the UNIX epoch (1970-01-01T00:00:00Z) if this value is positive, or until the UNIX epoch if this value is negative. getNano (js, native) fun getNano(): Int Returns a value in the range [0..1,000,000,000) indicating the fraction of a second that is added to getEpochSecond .","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/-instant/#instant","text":"expect class Instant This represents a timestamp, though we use the name \u2018instant\u2019 in the runtime because that\u2019s what the JVM libraries use, and \u2018Timestamp\u2019 means something else on that platform.","title":"Instant"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/-instant/#functions","text":"Name Summary getEpochSecond (js, native) fun getEpochSecond(): Long Returns the number of seconds since the UNIX epoch (1970-01-01T00:00:00Z) if this value is positive, or until the UNIX epoch if this value is negative. getNano (js, native) fun getNano(): Int Returns a value in the range [0..1,000,000,000) indicating the fraction of a second that is added to getEpochSecond .","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/-instant/get-epoch-second/","text":"wire-runtime / com.squareup.wire / Instant / getEpochSecond getEpochSecond \u00b6 fun getEpochSecond(): Long Platform and version requirements: js, native Returns the number of seconds since the UNIX epoch (1970-01-01T00:00:00Z) if this value is positive, or until the UNIX epoch if this value is negative. For example, this value will be -1 for the instant 1969-12-31T23:59:59Z, and 1 for the instant 1970-01-01T00:00:01Z.","title":"Get epoch second"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/-instant/get-epoch-second/#getepochsecond","text":"fun getEpochSecond(): Long Platform and version requirements: js, native Returns the number of seconds since the UNIX epoch (1970-01-01T00:00:00Z) if this value is positive, or until the UNIX epoch if this value is negative. For example, this value will be -1 for the instant 1969-12-31T23:59:59Z, and 1 for the instant 1970-01-01T00:00:01Z.","title":"getEpochSecond"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/-instant/get-nano/","text":"wire-runtime / com.squareup.wire / Instant / getNano getNano \u00b6 fun getNano(): Int Platform and version requirements: js, native Returns a value in the range [0..1,000,000,000) indicating the fraction of a second that is added to getEpochSecond .","title":"Get nano"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/-instant/get-nano/#getnano","text":"fun getNano(): Int Platform and version requirements: js, native Returns a value in the range [0..1,000,000,000) indicating the fraction of a second that is added to getEpochSecond .","title":"getNano"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/","text":"wire-runtime / com.squareup.wire / Message Message \u00b6 abstract expect class Message<M : Message < M , B >, B : Builder < M , B >> Platform and version requirements: JVM, js, native A protocol buffer message. Types \u00b6 Name Summary Builder (JVM, js, native) abstract class Builder<M : Message < M , B >, B : Builder < M , B >> Superclass for protocol buffer message builders. Constructors \u00b6 Name Summary <init> Message(adapter: ProtoAdapter < M >, unknownFields: <ERROR CLASS>) A protocol buffer message. Properties \u00b6 Name Summary adapter val adapter: ProtoAdapter < M > The ProtoAdapter for encoding and decoding messages of this type. hashCode var hashCode: Int If non-zero, the hash code of this message. Accessed by generated code. unknownFields val unknownFields: <ERROR CLASS> Returns a byte string containing the proto encoding of this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields. Functions \u00b6 Name Summary encode fun encode(sink: <ERROR CLASS>): Unit fun encode(stream: OutputStream ): Unit Encode this message and write it to stream . fun encode(): ByteArray Encode this message as a byte[] . encodeByteString fun encodeByteString(): <ERROR CLASS> Encode this message as a ByteString . newBuilder abstract fun newBuilder(): B Returns a new builder initialized with the data in this message. toString open fun toString(): String withoutUnknownFields (JVM) fun withoutUnknownFields(): M Returns this message with any unknown fields removed. writeReplace (JVM) fun writeReplace(): Any Inheritors \u00b6 Name Summary AndroidMessage (JVM) abstract class AndroidMessage<M : Message < M , B >, B : Builder < M , B >> : Message < M , B > An Android-specific Message which adds support for Parcelable . AnyMessage class AnyMessage : Message < AnyMessage , Nothing > Wire implementation of the google.protobuf.Any type. The Any type wraps an arbitrary protobuf message. Field of Any generated by Wire will be typed AnyMessage . typeUrl is used to identify the type of the message, defined as \u2018type.googleapis.com/full.type.name\u2019. value is the serialized representation of the wrapped message. The pack and unpack methods are available to wrap and unwrap an Any message.","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/#message","text":"abstract expect class Message<M : Message < M , B >, B : Builder < M , B >> Platform and version requirements: JVM, js, native A protocol buffer message.","title":"Message"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/#types","text":"Name Summary Builder (JVM, js, native) abstract class Builder<M : Message < M , B >, B : Builder < M , B >> Superclass for protocol buffer message builders.","title":"Types"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/#constructors","text":"Name Summary <init> Message(adapter: ProtoAdapter < M >, unknownFields: <ERROR CLASS>) A protocol buffer message.","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/#properties","text":"Name Summary adapter val adapter: ProtoAdapter < M > The ProtoAdapter for encoding and decoding messages of this type. hashCode var hashCode: Int If non-zero, the hash code of this message. Accessed by generated code. unknownFields val unknownFields: <ERROR CLASS> Returns a byte string containing the proto encoding of this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields.","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/#functions","text":"Name Summary encode fun encode(sink: <ERROR CLASS>): Unit fun encode(stream: OutputStream ): Unit Encode this message and write it to stream . fun encode(): ByteArray Encode this message as a byte[] . encodeByteString fun encodeByteString(): <ERROR CLASS> Encode this message as a ByteString . newBuilder abstract fun newBuilder(): B Returns a new builder initialized with the data in this message. toString open fun toString(): String withoutUnknownFields (JVM) fun withoutUnknownFields(): M Returns this message with any unknown fields removed. writeReplace (JVM) fun writeReplace(): Any","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/#inheritors","text":"Name Summary AndroidMessage (JVM) abstract class AndroidMessage<M : Message < M , B >, B : Builder < M , B >> : Message < M , B > An Android-specific Message which adds support for Parcelable . AnyMessage class AnyMessage : Message < AnyMessage , Nothing > Wire implementation of the google.protobuf.Any type. The Any type wraps an arbitrary protobuf message. Field of Any generated by Wire will be typed AnyMessage . typeUrl is used to identify the type of the message, defined as \u2018type.googleapis.com/full.type.name\u2019. value is the serialized representation of the wrapped message. The pack and unpack methods are available to wrap and unwrap an Any message.","title":"Inheritors"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-init-/","text":"wire-runtime / com.squareup.wire / Message / <init> <init> \u00b6 protected Message(adapter: ProtoAdapter < M >, unknownFields: <ERROR CLASS>) Platform and version requirements: JVM, js, native A protocol buffer message.","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-init-/#init","text":"protected Message(adapter: ProtoAdapter < M >, unknownFields: <ERROR CLASS>) Platform and version requirements: JVM, js, native A protocol buffer message.","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/adapter/","text":"wire-runtime / com.squareup.wire / Message / adapter adapter \u00b6 val adapter: ProtoAdapter < M > Platform and version requirements: JVM, js, native The ProtoAdapter for encoding and decoding messages of this type.","title":"Adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/adapter/#adapter","text":"val adapter: ProtoAdapter < M > Platform and version requirements: JVM, js, native The ProtoAdapter for encoding and decoding messages of this type.","title":"adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/encode-byte-string/","text":"wire-runtime / com.squareup.wire / Message / encodeByteString encodeByteString \u00b6 fun encodeByteString(): <ERROR CLASS> Platform and version requirements: JVM, js, native Encode this message as a ByteString .","title":"Encode byte string"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/encode-byte-string/#encodebytestring","text":"fun encodeByteString(): <ERROR CLASS> Platform and version requirements: JVM, js, native Encode this message as a ByteString .","title":"encodeByteString"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/encode/","text":"wire-runtime / com.squareup.wire / Message / encode encode \u00b6 fun encode(sink: <ERROR CLASS>): Unit fun encode(stream: OutputStream ): Unit Platform and version requirements: JVM Encode this message and write it to stream . fun encode(): ByteArray Platform and version requirements: JVM, js, native Encode this message as a byte[] .","title":"Encode"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/encode/#encode","text":"fun encode(sink: <ERROR CLASS>): Unit fun encode(stream: OutputStream ): Unit Platform and version requirements: JVM Encode this message and write it to stream . fun encode(): ByteArray Platform and version requirements: JVM, js, native Encode this message as a byte[] .","title":"encode"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/hash-code/","text":"wire-runtime / com.squareup.wire / Message / hashCode hashCode \u00b6 protected var hashCode: Int Platform and version requirements: JVM, js, native If non-zero, the hash code of this message. Accessed by generated code.","title":"Hash code"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/hash-code/#hashcode","text":"protected var hashCode: Int Platform and version requirements: JVM, js, native If non-zero, the hash code of this message. Accessed by generated code.","title":"hashCode"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/new-builder/","text":"wire-runtime / com.squareup.wire / Message / newBuilder newBuilder \u00b6 abstract fun newBuilder(): B Platform and version requirements: JVM, js, native Returns a new builder initialized with the data in this message.","title":"New builder"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/new-builder/#newbuilder","text":"abstract fun newBuilder(): B Platform and version requirements: JVM, js, native Returns a new builder initialized with the data in this message.","title":"newBuilder"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/to-string/","text":"wire-runtime / com.squareup.wire / Message / toString toString \u00b6 open fun toString(): String Platform and version requirements: JVM, js, native","title":"To string"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/to-string/#tostring","text":"open fun toString(): String Platform and version requirements: JVM, js, native","title":"toString"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/unknown-fields/","text":"wire-runtime / com.squareup.wire / Message / unknownFields unknownFields \u00b6 val unknownFields: <ERROR CLASS> Platform and version requirements: JVM, js, native Returns a byte string containing the proto encoding of this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields.","title":"Unknown fields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/unknown-fields/#unknownfields","text":"val unknownFields: <ERROR CLASS> Platform and version requirements: JVM, js, native Returns a byte string containing the proto encoding of this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields.","title":"unknownFields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/without-unknown-fields/","text":"wire-runtime / com.squareup.wire / Message / withoutUnknownFields withoutUnknownFields \u00b6 fun withoutUnknownFields(): M Platform and version requirements: JVM Returns this message with any unknown fields removed.","title":"Without unknown fields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/without-unknown-fields/#withoutunknownfields","text":"fun withoutUnknownFields(): M Platform and version requirements: JVM Returns this message with any unknown fields removed.","title":"withoutUnknownFields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/write-replace/","text":"wire-runtime / com.squareup.wire / Message / writeReplace writeReplace \u00b6 protected fun writeReplace(): Any Platform and version requirements: JVM","title":"Write replace"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/write-replace/#writereplace","text":"protected fun writeReplace(): Any Platform and version requirements: JVM","title":"writeReplace"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/","text":"wire-runtime / com.squareup.wire / Message / Builder Builder \u00b6 abstract class Builder<M : Message < M , B >, B : Builder < M , B >> Platform and version requirements: JVM, js, native Superclass for protocol buffer message builders. Constructors \u00b6 Name Summary <init> Builder() Superclass for protocol buffer message builders. Functions \u00b6 Name Summary addUnknownField (JVM) fun addUnknownField(tag: Int , fieldEncoding: <ERROR CLASS>, value: Any ?): Builder < M , B > addUnknownFields (JVM) fun addUnknownFields(unknownFields: <ERROR CLASS>): Builder < M , B > build (JVM) abstract fun build(): M Returns an immutable Message based on the fields that set in this builder. buildUnknownFields (JVM) fun buildUnknownFields(): <ERROR CLASS> Returns a byte string with this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields. clearUnknownFields (JVM) fun clearUnknownFields(): Builder < M , B >","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/#builder","text":"abstract class Builder<M : Message < M , B >, B : Builder < M , B >> Platform and version requirements: JVM, js, native Superclass for protocol buffer message builders.","title":"Builder"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/#constructors","text":"Name Summary <init> Builder() Superclass for protocol buffer message builders.","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/#functions","text":"Name Summary addUnknownField (JVM) fun addUnknownField(tag: Int , fieldEncoding: <ERROR CLASS>, value: Any ?): Builder < M , B > addUnknownFields (JVM) fun addUnknownFields(unknownFields: <ERROR CLASS>): Builder < M , B > build (JVM) abstract fun build(): M Returns an immutable Message based on the fields that set in this builder. buildUnknownFields (JVM) fun buildUnknownFields(): <ERROR CLASS> Returns a byte string with this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields. clearUnknownFields (JVM) fun clearUnknownFields(): Builder < M , B >","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/-init-/","text":"wire-runtime / com.squareup.wire / Message / Builder / <init> <init> \u00b6 protected Builder() Platform and version requirements: JVM, js, native Superclass for protocol buffer message builders.","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/-init-/#init","text":"protected Builder() Platform and version requirements: JVM, js, native Superclass for protocol buffer message builders.","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/add-unknown-field/","text":"wire-runtime / com.squareup.wire / Message / Builder / addUnknownField addUnknownField \u00b6 fun addUnknownField(tag: Int , fieldEncoding: <ERROR CLASS>, value: Any ?): Builder < M , B > Platform and version requirements: JVM","title":"Add unknown field"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/add-unknown-field/#addunknownfield","text":"fun addUnknownField(tag: Int , fieldEncoding: <ERROR CLASS>, value: Any ?): Builder < M , B > Platform and version requirements: JVM","title":"addUnknownField"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/add-unknown-fields/","text":"wire-runtime / com.squareup.wire / Message / Builder / addUnknownFields addUnknownFields \u00b6 fun addUnknownFields(unknownFields: <ERROR CLASS>): Builder < M , B > Platform and version requirements: JVM","title":"Add unknown fields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/add-unknown-fields/#addunknownfields","text":"fun addUnknownFields(unknownFields: <ERROR CLASS>): Builder < M , B > Platform and version requirements: JVM","title":"addUnknownFields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/build-unknown-fields/","text":"wire-runtime / com.squareup.wire / Message / Builder / buildUnknownFields buildUnknownFields \u00b6 fun buildUnknownFields(): <ERROR CLASS> Platform and version requirements: JVM Returns a byte string with this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields.","title":"Build unknown fields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/build-unknown-fields/#buildunknownfields","text":"fun buildUnknownFields(): <ERROR CLASS> Platform and version requirements: JVM Returns a byte string with this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields.","title":"buildUnknownFields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/build/","text":"wire-runtime / com.squareup.wire / Message / Builder / build build \u00b6 abstract fun build(): M Platform and version requirements: JVM Returns an immutable Message based on the fields that set in this builder.","title":"Build"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/build/#build","text":"abstract fun build(): M Platform and version requirements: JVM Returns an immutable Message based on the fields that set in this builder.","title":"build"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/clear-unknown-fields/","text":"wire-runtime / com.squareup.wire / Message / Builder / clearUnknownFields clearUnknownFields \u00b6 fun clearUnknownFields(): Builder < M , B > Platform and version requirements: JVM","title":"Clear unknown fields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/clear-unknown-fields/#clearunknownfields","text":"fun clearUnknownFields(): Builder < M , B > Platform and version requirements: JVM","title":"clearUnknownFields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/","text":"wire-runtime / com.squareup.wire / MessageSink MessageSink \u00b6 expect interface MessageSink<in T : Any > Platform and version requirements: JVM, js, native A writable stream of messages. Typical implementations will immediately encode messages and enqueue them for transmission, such as for client-to-server or server-to-client networking. But this interface is not limited to 1-1 networking use cases and implementations may persist, broadcast, validate, or take any other action with the messages. There is no flushing mechanism. Messages are flushed one-by-one as they are written. This minimizes latency at a potential cost of throughput. On its own this offers no guarantees that messages are delivered. For example, a message may accepted by write could be lost due to a network partition or crash. It is the caller\u2019s responsibility to confirm delivery and to retransmit as necessary. It is possible for a writer to saturate the transmission channel, such as when a writer writes faster than the corresponding reader can read. In such cases calls to write will block until there is capacity in the outbound channel. You may use this as a basic backpressure mechanism. You should ensure that such backpressure propagates to the originator of outbound messages. Instances of this interface are not safe for concurrent use. Functions \u00b6 Name Summary cancel abstract fun cancel(): Unit Truncate this stream abnormally. This attempts to signal to readers of this data that it is incomplete. Note that unlike some cancel methods this is not safe for concurrent use. close abstract fun close(): Unit Terminate the stream and release its resources. If this has not been canceled this signals a normal completion of the stream. write abstract fun write(message: T ): Unit Encode message to bytes and enqueue the bytes for delivery, waiting if necessary until the delivery channel has capacity for the encoded message.","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/#messagesink","text":"expect interface MessageSink<in T : Any > Platform and version requirements: JVM, js, native A writable stream of messages. Typical implementations will immediately encode messages and enqueue them for transmission, such as for client-to-server or server-to-client networking. But this interface is not limited to 1-1 networking use cases and implementations may persist, broadcast, validate, or take any other action with the messages. There is no flushing mechanism. Messages are flushed one-by-one as they are written. This minimizes latency at a potential cost of throughput. On its own this offers no guarantees that messages are delivered. For example, a message may accepted by write could be lost due to a network partition or crash. It is the caller\u2019s responsibility to confirm delivery and to retransmit as necessary. It is possible for a writer to saturate the transmission channel, such as when a writer writes faster than the corresponding reader can read. In such cases calls to write will block until there is capacity in the outbound channel. You may use this as a basic backpressure mechanism. You should ensure that such backpressure propagates to the originator of outbound messages. Instances of this interface are not safe for concurrent use.","title":"MessageSink"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/#functions","text":"Name Summary cancel abstract fun cancel(): Unit Truncate this stream abnormally. This attempts to signal to readers of this data that it is incomplete. Note that unlike some cancel methods this is not safe for concurrent use. close abstract fun close(): Unit Terminate the stream and release its resources. If this has not been canceled this signals a normal completion of the stream. write abstract fun write(message: T ): Unit Encode message to bytes and enqueue the bytes for delivery, waiting if necessary until the delivery channel has capacity for the encoded message.","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/cancel/","text":"wire-runtime / com.squareup.wire / MessageSink / cancel cancel \u00b6 abstract fun cancel(): Unit Platform and version requirements: JVM, js, native Truncate this stream abnormally. This attempts to signal to readers of this data that it is incomplete. Note that unlike some cancel methods this is not safe for concurrent use. A stream must be closed after it is canceled. Exceptions \u00b6 IllegalStateException - if this stream is closed.","title":"Cancel"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/cancel/#cancel","text":"abstract fun cancel(): Unit Platform and version requirements: JVM, js, native Truncate this stream abnormally. This attempts to signal to readers of this data that it is incomplete. Note that unlike some cancel methods this is not safe for concurrent use. A stream must be closed after it is canceled.","title":"cancel"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/cancel/#exceptions","text":"IllegalStateException - if this stream is closed.","title":"Exceptions"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/close/","text":"wire-runtime / com.squareup.wire / MessageSink / close close \u00b6 abstract fun close(): Unit Platform and version requirements: JVM, js, native Terminate the stream and release its resources. If this has not been canceled this signals a normal completion of the stream.","title":"Close"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/close/#close","text":"abstract fun close(): Unit Platform and version requirements: JVM, js, native Terminate the stream and release its resources. If this has not been canceled this signals a normal completion of the stream.","title":"close"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/write/","text":"wire-runtime / com.squareup.wire / MessageSink / write write \u00b6 abstract fun write(message: T ): Unit Platform and version requirements: JVM, js, native Encode message to bytes and enqueue the bytes for delivery, waiting if necessary until the delivery channel has capacity for the encoded message. Exceptions \u00b6 IllegalStateException - if this stream is closed.","title":"Write"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/write/#write","text":"abstract fun write(message: T ): Unit Platform and version requirements: JVM, js, native Encode message to bytes and enqueue the bytes for delivery, waiting if necessary until the delivery channel has capacity for the encoded message.","title":"write"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/write/#exceptions","text":"IllegalStateException - if this stream is closed.","title":"Exceptions"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/","text":"wire-runtime / com.squareup.wire / MessageSource MessageSource \u00b6 expect interface MessageSource<out T : Any > Platform and version requirements: JVM, js, native A readable stream of messages. Typical implementations will receive messages recently transmitted from a peer, such as for server-to-client or client-to-server networking. But this implementation is not limited to such networking use cases and implementations may load messages from local storage or generate messages on demand. Calls to read will block until a message becomes available. There is no mechanism to limit how long a specific read will wait, though implementations may be configured to fail if they consider a source to be unhealthy. Readers should take care to keep up with the stream of messages. A reader that takes an excessive amount of time to process a message may cause their writer to back up and suffer queueing. Instances of this interface are not safe for concurrent use. Functions \u00b6 Name Summary close abstract fun close(): Unit read abstract fun read(): T ? Read the next length-prefixed message on the stream and return it. Returns null if there are no further messages on this stream.","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/#messagesource","text":"expect interface MessageSource<out T : Any > Platform and version requirements: JVM, js, native A readable stream of messages. Typical implementations will receive messages recently transmitted from a peer, such as for server-to-client or client-to-server networking. But this implementation is not limited to such networking use cases and implementations may load messages from local storage or generate messages on demand. Calls to read will block until a message becomes available. There is no mechanism to limit how long a specific read will wait, though implementations may be configured to fail if they consider a source to be unhealthy. Readers should take care to keep up with the stream of messages. A reader that takes an excessive amount of time to process a message may cause their writer to back up and suffer queueing. Instances of this interface are not safe for concurrent use.","title":"MessageSource"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/#functions","text":"Name Summary close abstract fun close(): Unit read abstract fun read(): T ? Read the next length-prefixed message on the stream and return it. Returns null if there are no further messages on this stream.","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/close/","text":"wire-runtime / com.squareup.wire / MessageSource / close close \u00b6 abstract fun close(): Unit Platform and version requirements: JVM, js, native","title":"Close"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/close/#close","text":"abstract fun close(): Unit Platform and version requirements: JVM, js, native","title":"close"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/read/","text":"wire-runtime / com.squareup.wire / MessageSource / read read \u00b6 abstract fun read(): T ? Platform and version requirements: JVM, js, native Read the next length-prefixed message on the stream and return it. Returns null if there are no further messages on this stream. Exceptions \u00b6 IOException - if the next message cannot be read, or if the stream was abnormally terminated by its producer.","title":"Read"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/read/#read","text":"abstract fun read(): T ? Platform and version requirements: JVM, js, native Read the next length-prefixed message on the stream and return it. Returns null if there are no further messages on this stream.","title":"read"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/read/#exceptions","text":"IOException - if the next message cannot be read, or if the stream was abnormally terminated by its producer.","title":"Exceptions"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/","text":"wire-runtime / com.squareup.wire / OneOf OneOf \u00b6 data class OneOf<out K : Key < T >, T> A oneof\u2019s value and the key that identifies which field holds it. Wire has two different mechanisms for generating oneof code: \u201cboxed\u201d that uses this class, and \u201cflat\u201d where all oneof fields are defined inline in the declaring message. Flat oneofs This is Wire\u2019s default mechanism. Each oneof field in the schema yields a field in the generated Kotlin or Java class. At most one field has a non-null value, and callers need to manually probe each field until they find the non-null value. This is well-suited to oneofs with a small number of choices (less than 5). Boxed oneofs In this mechanism the generated class has one field that holds an instance of this. It has both a key that identifies which field is populated, and its value. If no field is set, then the OneOf box is null. This is well-suited to oneofs with a large number of choices (5 or more). This mechanism is necessary for oneofs with a very large number of options because in the other form the generated code may exceed the JVM\u2019s method size limits. Opt-in to boxed oneofs in your build by setting the boxOneOfsMinSize option. OneOfs with this many fields or more will be generated in this form. wire { kotlin { boxOneOfsMinSize = 10 } } Using Boxed oneofs One challenge in using oneofs is coping with data from different schema versions that offer new unknown choices. For example, a client may receive a message from a server that sets a oneof field the client doesn\u2019t know about; or a server may read an archived message with a oneof field that has since been deleted. In either case, the oneof will be null! There is no way to differentiate between unset and set to an unknown field. Please keep this in mind when writing code to handle oneofs. In this example the address type may be absent (no value was ever set) or its type may be too new for the current code to understand. This code returns a default value: val buttonLabel = when (contact.address?.key) { Contact.addressSmsNumber -> \"Send SMS\" Contact.addressEmailAddress -> \"Send Email\" else -> \"Address Type Unknown or Unset\" } Another approach is to crash. In this case applications need to be careful to avoid receiving data with an incompatible schema. val buttonLabel = when (contact.address?.key) { Contact.addressSmsNumber -> \"Send SMS\" Contact.addressEmailAddress -> \"Send Email\" else -> throw IllegalStateException(\"unknown address!\") } Consider AnyMessage New schemas should consider google.protobuf.Any instead of oneof . Benefits of Any : No build-time dependency from the referencing type on the referenced type. Add new types without changing the schema Benefits of OneOf : More compact on-the-wire encoding. Approximately 1 byte of overhead for OneOf vs. 32 for the message name in an Any . All choices are cataloged a central place in the schema. Types \u00b6 Name Summary Key abstract class Key<T> Identifies a field in a OneOf. Typically subclasses are generated by the Wire compiler and instances are declared as members of the referencing message class. Constructors \u00b6 Name Summary <init> OneOf(key: K , value: T ) A oneof\u2019s value and the key that identifies which field holds it. Properties \u00b6 Name Summary key val key: K value val value: T Functions \u00b6 Name Summary encodeWithTag fun encodeWithTag(writer: ProtoWriter ): Unit encodedSizeWithTag fun encodedSizeWithTag(): Int getOrNull fun <X> getOrNull(key: Key < X >): X ? toString fun toString(): String","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/#oneof","text":"data class OneOf<out K : Key < T >, T> A oneof\u2019s value and the key that identifies which field holds it. Wire has two different mechanisms for generating oneof code: \u201cboxed\u201d that uses this class, and \u201cflat\u201d where all oneof fields are defined inline in the declaring message. Flat oneofs This is Wire\u2019s default mechanism. Each oneof field in the schema yields a field in the generated Kotlin or Java class. At most one field has a non-null value, and callers need to manually probe each field until they find the non-null value. This is well-suited to oneofs with a small number of choices (less than 5). Boxed oneofs In this mechanism the generated class has one field that holds an instance of this. It has both a key that identifies which field is populated, and its value. If no field is set, then the OneOf box is null. This is well-suited to oneofs with a large number of choices (5 or more). This mechanism is necessary for oneofs with a very large number of options because in the other form the generated code may exceed the JVM\u2019s method size limits. Opt-in to boxed oneofs in your build by setting the boxOneOfsMinSize option. OneOfs with this many fields or more will be generated in this form. wire { kotlin { boxOneOfsMinSize = 10 } } Using Boxed oneofs One challenge in using oneofs is coping with data from different schema versions that offer new unknown choices. For example, a client may receive a message from a server that sets a oneof field the client doesn\u2019t know about; or a server may read an archived message with a oneof field that has since been deleted. In either case, the oneof will be null! There is no way to differentiate between unset and set to an unknown field. Please keep this in mind when writing code to handle oneofs. In this example the address type may be absent (no value was ever set) or its type may be too new for the current code to understand. This code returns a default value: val buttonLabel = when (contact.address?.key) { Contact.addressSmsNumber -> \"Send SMS\" Contact.addressEmailAddress -> \"Send Email\" else -> \"Address Type Unknown or Unset\" } Another approach is to crash. In this case applications need to be careful to avoid receiving data with an incompatible schema. val buttonLabel = when (contact.address?.key) { Contact.addressSmsNumber -> \"Send SMS\" Contact.addressEmailAddress -> \"Send Email\" else -> throw IllegalStateException(\"unknown address!\") } Consider AnyMessage New schemas should consider google.protobuf.Any instead of oneof . Benefits of Any : No build-time dependency from the referencing type on the referenced type. Add new types without changing the schema Benefits of OneOf : More compact on-the-wire encoding. Approximately 1 byte of overhead for OneOf vs. 32 for the message name in an Any . All choices are cataloged a central place in the schema.","title":"OneOf"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/#types","text":"Name Summary Key abstract class Key<T> Identifies a field in a OneOf. Typically subclasses are generated by the Wire compiler and instances are declared as members of the referencing message class.","title":"Types"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/#constructors","text":"Name Summary <init> OneOf(key: K , value: T ) A oneof\u2019s value and the key that identifies which field holds it.","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/#properties","text":"Name Summary key val key: K value val value: T","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/#functions","text":"Name Summary encodeWithTag fun encodeWithTag(writer: ProtoWriter ): Unit encodedSizeWithTag fun encodedSizeWithTag(): Int getOrNull fun <X> getOrNull(key: Key < X >): X ? toString fun toString(): String","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-init-/","text":"wire-runtime / com.squareup.wire / OneOf / <init> <init> \u00b6 OneOf(key: K , value: T ) A oneof\u2019s value and the key that identifies which field holds it. Wire has two different mechanisms for generating oneof code: \u201cboxed\u201d that uses this class, and \u201cflat\u201d where all oneof fields are defined inline in the declaring message. Flat oneofs This is Wire\u2019s default mechanism. Each oneof field in the schema yields a field in the generated Kotlin or Java class. At most one field has a non-null value, and callers need to manually probe each field until they find the non-null value. This is well-suited to oneofs with a small number of choices (less than 5). Boxed oneofs In this mechanism the generated class has one field that holds an instance of this. It has both a key that identifies which field is populated, and its value. If no field is set, then the OneOf box is null. This is well-suited to oneofs with a large number of choices (5 or more). This mechanism is necessary for oneofs with a very large number of options because in the other form the generated code may exceed the JVM\u2019s method size limits. Opt-in to boxed oneofs in your build by setting the boxOneOfsMinSize option. OneOfs with this many fields or more will be generated in this form. wire { kotlin { boxOneOfsMinSize = 10 } } Using Boxed oneofs One challenge in using oneofs is coping with data from different schema versions that offer new unknown choices. For example, a client may receive a message from a server that sets a oneof field the client doesn\u2019t know about; or a server may read an archived message with a oneof field that has since been deleted. In either case, the oneof will be null! There is no way to differentiate between unset and set to an unknown field. Please keep this in mind when writing code to handle oneofs. In this example the address type may be absent (no value was ever set) or its type may be too new for the current code to understand. This code returns a default value: val buttonLabel = when (contact.address?.key) { Contact.addressSmsNumber -> \"Send SMS\" Contact.addressEmailAddress -> \"Send Email\" else -> \"Address Type Unknown or Unset\" } Another approach is to crash. In this case applications need to be careful to avoid receiving data with an incompatible schema. val buttonLabel = when (contact.address?.key) { Contact.addressSmsNumber -> \"Send SMS\" Contact.addressEmailAddress -> \"Send Email\" else -> throw IllegalStateException(\"unknown address!\") } Consider AnyMessage New schemas should consider google.protobuf.Any instead of oneof . Benefits of Any : No build-time dependency from the referencing type on the referenced type. Add new types without changing the schema Benefits of OneOf : More compact on-the-wire encoding. Approximately 1 byte of overhead for OneOf vs. 32 for the message name in an Any . All choices are cataloged a central place in the schema.","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-init-/#init","text":"OneOf(key: K , value: T ) A oneof\u2019s value and the key that identifies which field holds it. Wire has two different mechanisms for generating oneof code: \u201cboxed\u201d that uses this class, and \u201cflat\u201d where all oneof fields are defined inline in the declaring message. Flat oneofs This is Wire\u2019s default mechanism. Each oneof field in the schema yields a field in the generated Kotlin or Java class. At most one field has a non-null value, and callers need to manually probe each field until they find the non-null value. This is well-suited to oneofs with a small number of choices (less than 5). Boxed oneofs In this mechanism the generated class has one field that holds an instance of this. It has both a key that identifies which field is populated, and its value. If no field is set, then the OneOf box is null. This is well-suited to oneofs with a large number of choices (5 or more). This mechanism is necessary for oneofs with a very large number of options because in the other form the generated code may exceed the JVM\u2019s method size limits. Opt-in to boxed oneofs in your build by setting the boxOneOfsMinSize option. OneOfs with this many fields or more will be generated in this form. wire { kotlin { boxOneOfsMinSize = 10 } } Using Boxed oneofs One challenge in using oneofs is coping with data from different schema versions that offer new unknown choices. For example, a client may receive a message from a server that sets a oneof field the client doesn\u2019t know about; or a server may read an archived message with a oneof field that has since been deleted. In either case, the oneof will be null! There is no way to differentiate between unset and set to an unknown field. Please keep this in mind when writing code to handle oneofs. In this example the address type may be absent (no value was ever set) or its type may be too new for the current code to understand. This code returns a default value: val buttonLabel = when (contact.address?.key) { Contact.addressSmsNumber -> \"Send SMS\" Contact.addressEmailAddress -> \"Send Email\" else -> \"Address Type Unknown or Unset\" } Another approach is to crash. In this case applications need to be careful to avoid receiving data with an incompatible schema. val buttonLabel = when (contact.address?.key) { Contact.addressSmsNumber -> \"Send SMS\" Contact.addressEmailAddress -> \"Send Email\" else -> throw IllegalStateException(\"unknown address!\") } Consider AnyMessage New schemas should consider google.protobuf.Any instead of oneof . Benefits of Any : No build-time dependency from the referencing type on the referenced type. Add new types without changing the schema Benefits of OneOf : More compact on-the-wire encoding. Approximately 1 byte of overhead for OneOf vs. 32 for the message name in an Any . All choices are cataloged a central place in the schema.","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/encode-with-tag/","text":"wire-runtime / com.squareup.wire / OneOf / encodeWithTag encodeWithTag \u00b6 fun encodeWithTag(writer: ProtoWriter ): Unit","title":"Encode with tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/encode-with-tag/#encodewithtag","text":"fun encodeWithTag(writer: ProtoWriter ): Unit","title":"encodeWithTag"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/encoded-size-with-tag/","text":"wire-runtime / com.squareup.wire / OneOf / encodedSizeWithTag encodedSizeWithTag \u00b6 fun encodedSizeWithTag(): Int","title":"Encoded size with tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/encoded-size-with-tag/#encodedsizewithtag","text":"fun encodedSizeWithTag(): Int","title":"encodedSizeWithTag"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/get-or-null/","text":"wire-runtime / com.squareup.wire / OneOf / getOrNull getOrNull \u00b6 fun <X> getOrNull(key: Key < X >): X ?","title":"Get or null"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/get-or-null/#getornull","text":"fun <X> getOrNull(key: Key < X >): X ?","title":"getOrNull"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/key/","text":"wire-runtime / com.squareup.wire / OneOf / key key \u00b6 val key: K","title":"Key"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/key/#key","text":"val key: K","title":"key"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/to-string/","text":"wire-runtime / com.squareup.wire / OneOf / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/value/","text":"wire-runtime / com.squareup.wire / OneOf / value value \u00b6 val value: T","title":"Value"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/value/#value","text":"val value: T","title":"value"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/","text":"wire-runtime / com.squareup.wire / OneOf / Key Key \u00b6 abstract class Key<T> Identifies a field in a OneOf. Typically subclasses are generated by the Wire compiler and instances are declared as members of the referencing message class. Note that the field\u2019s type may not uniquely identify the field. For example: message ContactAddress { string name = 1; oneof address { string sms_number = 2; string email_address = 3; } } Constructors \u00b6 Name Summary <init> Key(tag: Int , adapter: ProtoAdapter < T >, declaredName: String , redacted: Boolean = false, jsonName: String = \"\") Identifies a field in a OneOf. Typically subclasses are generated by the Wire compiler and instances are declared as members of the referencing message class. Properties \u00b6 Name Summary adapter val adapter: ProtoAdapter < T > declaredName val declaredName: String jsonName val jsonName: String redacted val redacted: Boolean tag val tag: Int","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/#key","text":"abstract class Key<T> Identifies a field in a OneOf. Typically subclasses are generated by the Wire compiler and instances are declared as members of the referencing message class. Note that the field\u2019s type may not uniquely identify the field. For example: message ContactAddress { string name = 1; oneof address { string sms_number = 2; string email_address = 3; } }","title":"Key"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/#constructors","text":"Name Summary <init> Key(tag: Int , adapter: ProtoAdapter < T >, declaredName: String , redacted: Boolean = false, jsonName: String = \"\") Identifies a field in a OneOf. Typically subclasses are generated by the Wire compiler and instances are declared as members of the referencing message class.","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/#properties","text":"Name Summary adapter val adapter: ProtoAdapter < T > declaredName val declaredName: String jsonName val jsonName: String redacted val redacted: Boolean tag val tag: Int","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/-init-/","text":"wire-runtime / com.squareup.wire / OneOf / Key / <init> <init> \u00b6 Key(tag: Int , adapter: ProtoAdapter < T >, declaredName: String , redacted: Boolean = false, jsonName: String = \"\") Identifies a field in a OneOf. Typically subclasses are generated by the Wire compiler and instances are declared as members of the referencing message class. Note that the field\u2019s type may not uniquely identify the field. For example: message ContactAddress { string name = 1; oneof address { string sms_number = 2; string email_address = 3; } }","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/-init-/#init","text":"Key(tag: Int , adapter: ProtoAdapter < T >, declaredName: String , redacted: Boolean = false, jsonName: String = \"\") Identifies a field in a OneOf. Typically subclasses are generated by the Wire compiler and instances are declared as members of the referencing message class. Note that the field\u2019s type may not uniquely identify the field. For example: message ContactAddress { string name = 1; oneof address { string sms_number = 2; string email_address = 3; } }","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/adapter/","text":"wire-runtime / com.squareup.wire / OneOf / Key / adapter adapter \u00b6 val adapter: ProtoAdapter < T >","title":"Adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/adapter/#adapter","text":"val adapter: ProtoAdapter < T >","title":"adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/declared-name/","text":"wire-runtime / com.squareup.wire / OneOf / Key / declaredName declaredName \u00b6 val declaredName: String","title":"Declared name"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/declared-name/#declaredname","text":"val declaredName: String","title":"declaredName"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/json-name/","text":"wire-runtime / com.squareup.wire / OneOf / Key / jsonName jsonName \u00b6 val jsonName: String","title":"Json name"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/json-name/#jsonname","text":"val jsonName: String","title":"jsonName"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/redacted/","text":"wire-runtime / com.squareup.wire / OneOf / Key / redacted redacted \u00b6 val redacted: Boolean","title":"Redacted"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/redacted/#redacted","text":"val redacted: Boolean","title":"redacted"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/tag/","text":"wire-runtime / com.squareup.wire / OneOf / Key / tag tag \u00b6 val tag: Int","title":"Tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/tag/#tag","text":"val tag: Int","title":"tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/","text":"wire-runtime / com.squareup.wire / ProtoAdapter ProtoAdapter \u00b6 abstract expect class ProtoAdapter<E> Platform and version requirements: JVM, js, native Types \u00b6 Name Summary UnsupportedTypeProtoAdapter (JVM) class UnsupportedTypeProtoAdapter : ProtoAdapter < Nothing > Stub ProtoAdapter for Wire types which are typeliased to java.time types on the JVM such as Duration and Instant . This proto adapter is used when the corresponding java.time type is missing from the JVM classpath. Exceptions \u00b6 Name Summary EnumConstantNotFoundException (JVM, js, native) class EnumConstantNotFoundException : IllegalArgumentException Constructors \u00b6 Name Summary <init> ProtoAdapter(fieldEncoding: FieldEncoding , type: KClass <*>?, typeUrl: String ?, syntax: Syntax , identity: E ? = null) ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: Class <*>) ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: Class <*>, typeUrl: String ?) ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: Class <*>, typeUrl: String ?, syntax: <ERROR CLASS>) ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: KClass <*>?) ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: KClass <*>?, typeUrl: String ?) ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: KClass <*>?, typeUrl: String ?, syntax: <ERROR CLASS>) ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: Class <*>, typeUrl: String ?, syntax: <ERROR CLASS>, identity: E ?) ProtoAdapter(actual fieldEncoding: <ERROR CLASS>, actual type: KClass <*>?, actual typeUrl: String ?, actual syntax: <ERROR CLASS>, actual identity: E ?) Properties \u00b6 Name Summary identity val identity: E ? A special value that is used when a field is absent from an encoded proto3 message. When encoding a proto3 message, fields that hold this value will be omitted. syntax val syntax: Syntax Identifies the syntax in which type is defined in the proto schema. This string contains either \u201cproto2\u201d or \u201cproto3\u201d. type val type: KClass <*>? typeUrl val typeUrl: String ? Identifies this type for inclusion in a google.protobuf.Any . This is a string like \u201ctype.googleapis.com/packagename.messagename\u201d or null if this type is either not a message (such as scalars and enums), or was code-generated before Wire 3.2 which introduced support for type URLS. Functions \u00b6 Name Summary asPacked fun asPacked(): ProtoAdapter < List < E >> Returns an adapter for E but as a packed, repeated value. asRepeated fun asRepeated(): ProtoAdapter < List < E >> Returns an adapter for E but as a repeated value. decode abstract fun decode(reader: ProtoReader ): E Read a non-null value from reader . fun decode(bytes: ByteArray ): E fun decode(bytes: <ERROR CLASS>): E Read an encoded message from bytes . fun decode(source: <ERROR CLASS>): E Read an encoded message from source . fun decode(stream: InputStream ): E encode abstract fun encode(writer: ProtoWriter , value: E ): Unit Write non-null value to writer . fun encode(sink: <ERROR CLASS>, value: E ): Unit Encode value and write it to stream . fun encode(value: E ): ByteArray Encode value as a byte[] . fun encode(stream: OutputStream , value: E ): Unit encodeByteString fun encodeByteString(value: E ): <ERROR CLASS> Encode value as a ByteString . encodeWithTag open fun encodeWithTag(writer: ProtoWriter , tag: Int , value: E ?): Unit Write tag and value to writer . If value is null this does nothing. open actual fun encodeWithTag(writer: <ERROR CLASS>, tag: Int , value: E ?): Unit encodedSize abstract fun encodedSize(value: E ): Int The size of the non-null data value . This does not include the size required for a length-delimited prefix (should the type require one). encodedSizeWithTag open fun encodedSizeWithTag(tag: Int , value: E ?): Int The size of tag and value in the wire format. This size includes the tag, type, length-delimited prefix (should the type require one), and value. Returns 0 if value is null. redact abstract fun redact(value: E ): E Returns the redacted form of value . toString open fun toString(value: E ): String Returns a human-readable version of the given value . Companion Object Properties \u00b6 Name Summary BOOL val BOOL: ProtoAdapter < Boolean > BOOL_VALUE val BOOL_VALUE: ProtoAdapter < Boolean ?> BYTES val BYTES: ProtoAdapter <<ERROR CLASS>> BYTES_VALUE val BYTES_VALUE: ProtoAdapter <<ERROR CLASS>?> DOUBLE val DOUBLE: ProtoAdapter < Double > DOUBLE_VALUE val DOUBLE_VALUE: ProtoAdapter < Double ?> DURATION val DURATION: ProtoAdapter < Duration > EMPTY val EMPTY: ProtoAdapter < Unit > FIXED32 val FIXED32: ProtoAdapter < Int > FIXED64 val FIXED64: ProtoAdapter < Long > FLOAT val FLOAT: ProtoAdapter < Float > FLOAT_VALUE val FLOAT_VALUE: ProtoAdapter < Float ?> INSTANT val INSTANT: ProtoAdapter < Instant > INT32 val INT32: ProtoAdapter < Int > INT32_VALUE val INT32_VALUE: ProtoAdapter < Int ?> INT64 val INT64: ProtoAdapter < Long > INT64_VALUE val INT64_VALUE: ProtoAdapter < Long ?> SFIXED32 val SFIXED32: ProtoAdapter < Int > SFIXED64 val SFIXED64: ProtoAdapter < Long > SINT32 val SINT32: ProtoAdapter < Int > SINT64 val SINT64: ProtoAdapter < Long > STRING val STRING: ProtoAdapter < String > STRING_VALUE val STRING_VALUE: ProtoAdapter < String ?> STRUCT_LIST val STRUCT_LIST: ProtoAdapter < List <*>?> STRUCT_MAP val STRUCT_MAP: ProtoAdapter < Map < String , *>?> STRUCT_NULL val STRUCT_NULL: ProtoAdapter < Nothing ?> STRUCT_VALUE val STRUCT_VALUE: ProtoAdapter < Any ?> UINT32 val UINT32: ProtoAdapter < Int > UINT32_VALUE val UINT32_VALUE: ProtoAdapter < Int ?> UINT64 val UINT64: ProtoAdapter < Long > Like INT64, but negative longs are interpreted as large positive values, and encoded that way in JSON. UINT64_VALUE val UINT64_VALUE: ProtoAdapter < Long ?> Companion Object Functions \u00b6 Name Summary get (JVM) fun <M : Message <*, *>> get(message: M ): ProtoAdapter < M > Returns the adapter for the type of Message . fun <M> get(type: Class < M >): ProtoAdapter < M > Returns the adapter for type . fun get(adapterString: String ): ProtoAdapter <*> Returns the adapter for a given adapterString . adapterString is specified on a proto message field\u2019s WireField annotation in the form com.squareup.wire.protos.person.Person#ADAPTER . newEnumAdapter (JVM) fun <E> newEnumAdapter(type: Class < E >): EnumAdapter < E > Creates a new proto adapter for type . newMapAdapter fun <K, V> newMapAdapter(keyAdapter: ProtoAdapter < K >, valueAdapter: ProtoAdapter < V >): ProtoAdapter < Map < K , V >> Creates a new proto adapter for a map using keyAdapter and valueAdapter . newMessageAdapter (JVM) fun <M : Message < M , B >, B : Builder < M , B >> newMessageAdapter(type: Class < M >): ProtoAdapter < M > fun <M : Message < M , B >, B : Builder < M , B >> newMessageAdapter(type: Class < M >, typeUrl: String ): ProtoAdapter < M >``fun <M : Message < M , B >, B : Builder < M , B >> newMessageAdapter(type: Class < M >, typeUrl: String , syntax: <ERROR CLASS>): ProtoAdapter < M > Creates a new proto adapter for type . Inheritors \u00b6 Name Summary EnumAdapter (JVM, js, native) abstract expect class EnumAdapter<E : WireEnum > : ProtoAdapter < E > An abstract ProtoAdapter that converts values of an enum to and from integers. UnsupportedTypeProtoAdapter (JVM) class UnsupportedTypeProtoAdapter : ProtoAdapter < Nothing > Stub ProtoAdapter for Wire types which are typeliased to java.time types on the JVM such as Duration and Instant . This proto adapter is used when the corresponding java.time type is missing from the JVM classpath.","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#protoadapter","text":"abstract expect class ProtoAdapter<E> Platform and version requirements: JVM, js, native","title":"ProtoAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#types","text":"Name Summary UnsupportedTypeProtoAdapter (JVM) class UnsupportedTypeProtoAdapter : ProtoAdapter < Nothing > Stub ProtoAdapter for Wire types which are typeliased to java.time types on the JVM such as Duration and Instant . This proto adapter is used when the corresponding java.time type is missing from the JVM classpath.","title":"Types"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#exceptions","text":"Name Summary EnumConstantNotFoundException (JVM, js, native) class EnumConstantNotFoundException : IllegalArgumentException","title":"Exceptions"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#constructors","text":"Name Summary <init> ProtoAdapter(fieldEncoding: FieldEncoding , type: KClass <*>?, typeUrl: String ?, syntax: Syntax , identity: E ? = null) ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: Class <*>) ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: Class <*>, typeUrl: String ?) ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: Class <*>, typeUrl: String ?, syntax: <ERROR CLASS>) ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: KClass <*>?) ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: KClass <*>?, typeUrl: String ?) ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: KClass <*>?, typeUrl: String ?, syntax: <ERROR CLASS>) ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: Class <*>, typeUrl: String ?, syntax: <ERROR CLASS>, identity: E ?) ProtoAdapter(actual fieldEncoding: <ERROR CLASS>, actual type: KClass <*>?, actual typeUrl: String ?, actual syntax: <ERROR CLASS>, actual identity: E ?)","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#properties","text":"Name Summary identity val identity: E ? A special value that is used when a field is absent from an encoded proto3 message. When encoding a proto3 message, fields that hold this value will be omitted. syntax val syntax: Syntax Identifies the syntax in which type is defined in the proto schema. This string contains either \u201cproto2\u201d or \u201cproto3\u201d. type val type: KClass <*>? typeUrl val typeUrl: String ? Identifies this type for inclusion in a google.protobuf.Any . This is a string like \u201ctype.googleapis.com/packagename.messagename\u201d or null if this type is either not a message (such as scalars and enums), or was code-generated before Wire 3.2 which introduced support for type URLS.","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#functions","text":"Name Summary asPacked fun asPacked(): ProtoAdapter < List < E >> Returns an adapter for E but as a packed, repeated value. asRepeated fun asRepeated(): ProtoAdapter < List < E >> Returns an adapter for E but as a repeated value. decode abstract fun decode(reader: ProtoReader ): E Read a non-null value from reader . fun decode(bytes: ByteArray ): E fun decode(bytes: <ERROR CLASS>): E Read an encoded message from bytes . fun decode(source: <ERROR CLASS>): E Read an encoded message from source . fun decode(stream: InputStream ): E encode abstract fun encode(writer: ProtoWriter , value: E ): Unit Write non-null value to writer . fun encode(sink: <ERROR CLASS>, value: E ): Unit Encode value and write it to stream . fun encode(value: E ): ByteArray Encode value as a byte[] . fun encode(stream: OutputStream , value: E ): Unit encodeByteString fun encodeByteString(value: E ): <ERROR CLASS> Encode value as a ByteString . encodeWithTag open fun encodeWithTag(writer: ProtoWriter , tag: Int , value: E ?): Unit Write tag and value to writer . If value is null this does nothing. open actual fun encodeWithTag(writer: <ERROR CLASS>, tag: Int , value: E ?): Unit encodedSize abstract fun encodedSize(value: E ): Int The size of the non-null data value . This does not include the size required for a length-delimited prefix (should the type require one). encodedSizeWithTag open fun encodedSizeWithTag(tag: Int , value: E ?): Int The size of tag and value in the wire format. This size includes the tag, type, length-delimited prefix (should the type require one), and value. Returns 0 if value is null. redact abstract fun redact(value: E ): E Returns the redacted form of value . toString open fun toString(value: E ): String Returns a human-readable version of the given value .","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#companion-object-properties","text":"Name Summary BOOL val BOOL: ProtoAdapter < Boolean > BOOL_VALUE val BOOL_VALUE: ProtoAdapter < Boolean ?> BYTES val BYTES: ProtoAdapter <<ERROR CLASS>> BYTES_VALUE val BYTES_VALUE: ProtoAdapter <<ERROR CLASS>?> DOUBLE val DOUBLE: ProtoAdapter < Double > DOUBLE_VALUE val DOUBLE_VALUE: ProtoAdapter < Double ?> DURATION val DURATION: ProtoAdapter < Duration > EMPTY val EMPTY: ProtoAdapter < Unit > FIXED32 val FIXED32: ProtoAdapter < Int > FIXED64 val FIXED64: ProtoAdapter < Long > FLOAT val FLOAT: ProtoAdapter < Float > FLOAT_VALUE val FLOAT_VALUE: ProtoAdapter < Float ?> INSTANT val INSTANT: ProtoAdapter < Instant > INT32 val INT32: ProtoAdapter < Int > INT32_VALUE val INT32_VALUE: ProtoAdapter < Int ?> INT64 val INT64: ProtoAdapter < Long > INT64_VALUE val INT64_VALUE: ProtoAdapter < Long ?> SFIXED32 val SFIXED32: ProtoAdapter < Int > SFIXED64 val SFIXED64: ProtoAdapter < Long > SINT32 val SINT32: ProtoAdapter < Int > SINT64 val SINT64: ProtoAdapter < Long > STRING val STRING: ProtoAdapter < String > STRING_VALUE val STRING_VALUE: ProtoAdapter < String ?> STRUCT_LIST val STRUCT_LIST: ProtoAdapter < List <*>?> STRUCT_MAP val STRUCT_MAP: ProtoAdapter < Map < String , *>?> STRUCT_NULL val STRUCT_NULL: ProtoAdapter < Nothing ?> STRUCT_VALUE val STRUCT_VALUE: ProtoAdapter < Any ?> UINT32 val UINT32: ProtoAdapter < Int > UINT32_VALUE val UINT32_VALUE: ProtoAdapter < Int ?> UINT64 val UINT64: ProtoAdapter < Long > Like INT64, but negative longs are interpreted as large positive values, and encoded that way in JSON. UINT64_VALUE val UINT64_VALUE: ProtoAdapter < Long ?>","title":"Companion Object Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#companion-object-functions","text":"Name Summary get (JVM) fun <M : Message <*, *>> get(message: M ): ProtoAdapter < M > Returns the adapter for the type of Message . fun <M> get(type: Class < M >): ProtoAdapter < M > Returns the adapter for type . fun get(adapterString: String ): ProtoAdapter <*> Returns the adapter for a given adapterString . adapterString is specified on a proto message field\u2019s WireField annotation in the form com.squareup.wire.protos.person.Person#ADAPTER . newEnumAdapter (JVM) fun <E> newEnumAdapter(type: Class < E >): EnumAdapter < E > Creates a new proto adapter for type . newMapAdapter fun <K, V> newMapAdapter(keyAdapter: ProtoAdapter < K >, valueAdapter: ProtoAdapter < V >): ProtoAdapter < Map < K , V >> Creates a new proto adapter for a map using keyAdapter and valueAdapter . newMessageAdapter (JVM) fun <M : Message < M , B >, B : Builder < M , B >> newMessageAdapter(type: Class < M >): ProtoAdapter < M > fun <M : Message < M , B >, B : Builder < M , B >> newMessageAdapter(type: Class < M >, typeUrl: String ): ProtoAdapter < M >``fun <M : Message < M , B >, B : Builder < M , B >> newMessageAdapter(type: Class < M >, typeUrl: String , syntax: <ERROR CLASS>): ProtoAdapter < M > Creates a new proto adapter for type .","title":"Companion Object Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#inheritors","text":"Name Summary EnumAdapter (JVM, js, native) abstract expect class EnumAdapter<E : WireEnum > : ProtoAdapter < E > An abstract ProtoAdapter that converts values of an enum to and from integers. UnsupportedTypeProtoAdapter (JVM) class UnsupportedTypeProtoAdapter : ProtoAdapter < Nothing > Stub ProtoAdapter for Wire types which are typeliased to java.time types on the JVM such as Duration and Instant . This proto adapter is used when the corresponding java.time type is missing from the JVM classpath.","title":"Inheritors"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-b-o-o-l/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / BOOL BOOL \u00b6 val BOOL: ProtoAdapter < Boolean > Platform and version requirements: JVM, js, native","title":" b o o l"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-b-o-o-l/#bool","text":"val BOOL: ProtoAdapter < Boolean > Platform and version requirements: JVM, js, native","title":"BOOL"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-b-o-o-l_-v-a-l-u-e/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / BOOL_VALUE BOOL_VALUE \u00b6 val BOOL_VALUE: ProtoAdapter < Boolean ?> Platform and version requirements: JVM, js, native","title":" b o o l  v a l u e"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-b-o-o-l_-v-a-l-u-e/#bool_value","text":"val BOOL_VALUE: ProtoAdapter < Boolean ?> Platform and version requirements: JVM, js, native","title":"BOOL_VALUE"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-b-y-t-e-s/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / BYTES BYTES \u00b6 val BYTES: ProtoAdapter <<ERROR CLASS>> Platform and version requirements: JVM, js, native","title":" b y t e s"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-b-y-t-e-s/#bytes","text":"val BYTES: ProtoAdapter <<ERROR CLASS>> Platform and version requirements: JVM, js, native","title":"BYTES"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-b-y-t-e-s_-v-a-l-u-e/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / BYTES_VALUE BYTES_VALUE \u00b6 val BYTES_VALUE: ProtoAdapter <<ERROR CLASS>?> Platform and version requirements: JVM, js, native","title":" b y t e s  v a l u e"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-b-y-t-e-s_-v-a-l-u-e/#bytes_value","text":"val BYTES_VALUE: ProtoAdapter <<ERROR CLASS>?> Platform and version requirements: JVM, js, native","title":"BYTES_VALUE"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-d-o-u-b-l-e/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / DOUBLE DOUBLE \u00b6 val DOUBLE: ProtoAdapter < Double > Platform and version requirements: JVM, js, native","title":" d o u b l e"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-d-o-u-b-l-e/#double","text":"val DOUBLE: ProtoAdapter < Double > Platform and version requirements: JVM, js, native","title":"DOUBLE"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-d-o-u-b-l-e_-v-a-l-u-e/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / DOUBLE_VALUE DOUBLE_VALUE \u00b6 val DOUBLE_VALUE: ProtoAdapter < Double ?> Platform and version requirements: JVM, js, native","title":" d o u b l e  v a l u e"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-d-o-u-b-l-e_-v-a-l-u-e/#double_value","text":"val DOUBLE_VALUE: ProtoAdapter < Double ?> Platform and version requirements: JVM, js, native","title":"DOUBLE_VALUE"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-d-u-r-a-t-i-o-n/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / DURATION DURATION \u00b6 val DURATION: ProtoAdapter < Duration > Platform and version requirements: JVM, js, native","title":" d u r a t i o n"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-d-u-r-a-t-i-o-n/#duration","text":"val DURATION: ProtoAdapter < Duration > Platform and version requirements: JVM, js, native","title":"DURATION"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-e-m-p-t-y/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / EMPTY EMPTY \u00b6 val EMPTY: ProtoAdapter < Unit > Platform and version requirements: JVM, js, native","title":" e m p t y"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-e-m-p-t-y/#empty","text":"val EMPTY: ProtoAdapter < Unit > Platform and version requirements: JVM, js, native","title":"EMPTY"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-f-i-x-e-d32/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / FIXED32 FIXED32 \u00b6 val FIXED32: ProtoAdapter < Int > Platform and version requirements: JVM, js, native","title":" f i x e d32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-f-i-x-e-d32/#fixed32","text":"val FIXED32: ProtoAdapter < Int > Platform and version requirements: JVM, js, native","title":"FIXED32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-f-i-x-e-d64/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / FIXED64 FIXED64 \u00b6 val FIXED64: ProtoAdapter < Long > Platform and version requirements: JVM, js, native","title":" f i x e d64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-f-i-x-e-d64/#fixed64","text":"val FIXED64: ProtoAdapter < Long > Platform and version requirements: JVM, js, native","title":"FIXED64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-f-l-o-a-t/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / FLOAT FLOAT \u00b6 val FLOAT: ProtoAdapter < Float > Platform and version requirements: JVM, js, native","title":" f l o a t"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-f-l-o-a-t/#float","text":"val FLOAT: ProtoAdapter < Float > Platform and version requirements: JVM, js, native","title":"FLOAT"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-f-l-o-a-t_-v-a-l-u-e/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / FLOAT_VALUE FLOAT_VALUE \u00b6 val FLOAT_VALUE: ProtoAdapter < Float ?> Platform and version requirements: JVM, js, native","title":" f l o a t  v a l u e"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-f-l-o-a-t_-v-a-l-u-e/#float_value","text":"val FLOAT_VALUE: ProtoAdapter < Float ?> Platform and version requirements: JVM, js, native","title":"FLOAT_VALUE"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-i-n-s-t-a-n-t/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / INSTANT INSTANT \u00b6 val INSTANT: ProtoAdapter < Instant > Platform and version requirements: JVM, js, native","title":" i n s t a n t"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-i-n-s-t-a-n-t/#instant","text":"val INSTANT: ProtoAdapter < Instant > Platform and version requirements: JVM, js, native","title":"INSTANT"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-i-n-t32/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / INT32 INT32 \u00b6 val INT32: ProtoAdapter < Int > Platform and version requirements: JVM, js, native","title":" i n t32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-i-n-t32/#int32","text":"val INT32: ProtoAdapter < Int > Platform and version requirements: JVM, js, native","title":"INT32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-i-n-t32_-v-a-l-u-e/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / INT32_VALUE INT32_VALUE \u00b6 val INT32_VALUE: ProtoAdapter < Int ?> Platform and version requirements: JVM, js, native","title":" i n t32  v a l u e"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-i-n-t32_-v-a-l-u-e/#int32_value","text":"val INT32_VALUE: ProtoAdapter < Int ?> Platform and version requirements: JVM, js, native","title":"INT32_VALUE"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-i-n-t64/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / INT64 INT64 \u00b6 val INT64: ProtoAdapter < Long > Platform and version requirements: JVM, js, native","title":" i n t64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-i-n-t64/#int64","text":"val INT64: ProtoAdapter < Long > Platform and version requirements: JVM, js, native","title":"INT64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-i-n-t64_-v-a-l-u-e/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / INT64_VALUE INT64_VALUE \u00b6 val INT64_VALUE: ProtoAdapter < Long ?> Platform and version requirements: JVM, js, native","title":" i n t64  v a l u e"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-i-n-t64_-v-a-l-u-e/#int64_value","text":"val INT64_VALUE: ProtoAdapter < Long ?> Platform and version requirements: JVM, js, native","title":"INT64_VALUE"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-init-/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / <init> <init> \u00b6 ProtoAdapter(fieldEncoding: FieldEncoding , type: KClass <*>?, typeUrl: String ?, syntax: Syntax , identity: E ? = null) ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: Class <*>) Platform and version requirements: JVM ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: Class <*>, typeUrl: String ?) Platform and version requirements: JVM ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: Class <*>, typeUrl: String ?, syntax: <ERROR CLASS>) Platform and version requirements: JVM ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: KClass <*>?) Platform and version requirements: JVM ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: KClass <*>?, typeUrl: String ?) Platform and version requirements: JVM ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: KClass <*>?, typeUrl: String ?, syntax: <ERROR CLASS>) Platform and version requirements: JVM ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: Class <*>, typeUrl: String ?, syntax: <ERROR CLASS>, identity: E ?) Platform and version requirements: JVM ProtoAdapter(actual fieldEncoding: <ERROR CLASS>, actual type: KClass <*>?, actual typeUrl: String ?, actual syntax: <ERROR CLASS>, actual identity: E ?) Platform and version requirements: JVM, js, native","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-init-/#init","text":"ProtoAdapter(fieldEncoding: FieldEncoding , type: KClass <*>?, typeUrl: String ?, syntax: Syntax , identity: E ? = null) ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: Class <*>) Platform and version requirements: JVM ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: Class <*>, typeUrl: String ?) Platform and version requirements: JVM ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: Class <*>, typeUrl: String ?, syntax: <ERROR CLASS>) Platform and version requirements: JVM ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: KClass <*>?) Platform and version requirements: JVM ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: KClass <*>?, typeUrl: String ?) Platform and version requirements: JVM ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: KClass <*>?, typeUrl: String ?, syntax: <ERROR CLASS>) Platform and version requirements: JVM ProtoAdapter(fieldEncoding: <ERROR CLASS>, type: Class <*>, typeUrl: String ?, syntax: <ERROR CLASS>, identity: E ?) Platform and version requirements: JVM ProtoAdapter(actual fieldEncoding: <ERROR CLASS>, actual type: KClass <*>?, actual typeUrl: String ?, actual syntax: <ERROR CLASS>, actual identity: E ?) Platform and version requirements: JVM, js, native","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-f-i-x-e-d32/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / SFIXED32 SFIXED32 \u00b6 val SFIXED32: ProtoAdapter < Int > Platform and version requirements: JVM, js, native","title":" s f i x e d32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-f-i-x-e-d32/#sfixed32","text":"val SFIXED32: ProtoAdapter < Int > Platform and version requirements: JVM, js, native","title":"SFIXED32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-f-i-x-e-d64/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / SFIXED64 SFIXED64 \u00b6 val SFIXED64: ProtoAdapter < Long > Platform and version requirements: JVM, js, native","title":" s f i x e d64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-f-i-x-e-d64/#sfixed64","text":"val SFIXED64: ProtoAdapter < Long > Platform and version requirements: JVM, js, native","title":"SFIXED64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-i-n-t32/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / SINT32 SINT32 \u00b6 val SINT32: ProtoAdapter < Int > Platform and version requirements: JVM, js, native","title":" s i n t32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-i-n-t32/#sint32","text":"val SINT32: ProtoAdapter < Int > Platform and version requirements: JVM, js, native","title":"SINT32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-i-n-t64/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / SINT64 SINT64 \u00b6 val SINT64: ProtoAdapter < Long > Platform and version requirements: JVM, js, native","title":" s i n t64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-i-n-t64/#sint64","text":"val SINT64: ProtoAdapter < Long > Platform and version requirements: JVM, js, native","title":"SINT64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-t-r-i-n-g/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / STRING STRING \u00b6 val STRING: ProtoAdapter < String > Platform and version requirements: JVM, js, native","title":" s t r i n g"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-t-r-i-n-g/#string","text":"val STRING: ProtoAdapter < String > Platform and version requirements: JVM, js, native","title":"STRING"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-t-r-i-n-g_-v-a-l-u-e/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / STRING_VALUE STRING_VALUE \u00b6 val STRING_VALUE: ProtoAdapter < String ?> Platform and version requirements: JVM, js, native","title":" s t r i n g  v a l u e"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-t-r-i-n-g_-v-a-l-u-e/#string_value","text":"val STRING_VALUE: ProtoAdapter < String ?> Platform and version requirements: JVM, js, native","title":"STRING_VALUE"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-t-r-u-c-t_-l-i-s-t/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / STRUCT_LIST STRUCT_LIST \u00b6 val STRUCT_LIST: ProtoAdapter < List <*>?> Platform and version requirements: JVM, js, native","title":" s t r u c t  l i s t"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-t-r-u-c-t_-l-i-s-t/#struct_list","text":"val STRUCT_LIST: ProtoAdapter < List <*>?> Platform and version requirements: JVM, js, native","title":"STRUCT_LIST"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-t-r-u-c-t_-m-a-p/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / STRUCT_MAP STRUCT_MAP \u00b6 val STRUCT_MAP: ProtoAdapter < Map < String , *>?> Platform and version requirements: JVM, js, native","title":" s t r u c t  m a p"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-t-r-u-c-t_-m-a-p/#struct_map","text":"val STRUCT_MAP: ProtoAdapter < Map < String , *>?> Platform and version requirements: JVM, js, native","title":"STRUCT_MAP"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-t-r-u-c-t_-n-u-l-l/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / STRUCT_NULL STRUCT_NULL \u00b6 val STRUCT_NULL: ProtoAdapter < Nothing ?> Platform and version requirements: JVM, js, native","title":" s t r u c t  n u l l"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-t-r-u-c-t_-n-u-l-l/#struct_null","text":"val STRUCT_NULL: ProtoAdapter < Nothing ?> Platform and version requirements: JVM, js, native","title":"STRUCT_NULL"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-t-r-u-c-t_-v-a-l-u-e/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / STRUCT_VALUE STRUCT_VALUE \u00b6 val STRUCT_VALUE: ProtoAdapter < Any ?> Platform and version requirements: JVM, js, native","title":" s t r u c t  v a l u e"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-t-r-u-c-t_-v-a-l-u-e/#struct_value","text":"val STRUCT_VALUE: ProtoAdapter < Any ?> Platform and version requirements: JVM, js, native","title":"STRUCT_VALUE"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-u-i-n-t32/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / UINT32 UINT32 \u00b6 val UINT32: ProtoAdapter < Int > Platform and version requirements: JVM, js, native","title":" u i n t32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-u-i-n-t32/#uint32","text":"val UINT32: ProtoAdapter < Int > Platform and version requirements: JVM, js, native","title":"UINT32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-u-i-n-t32_-v-a-l-u-e/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / UINT32_VALUE UINT32_VALUE \u00b6 val UINT32_VALUE: ProtoAdapter < Int ?> Platform and version requirements: JVM, js, native","title":" u i n t32  v a l u e"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-u-i-n-t32_-v-a-l-u-e/#uint32_value","text":"val UINT32_VALUE: ProtoAdapter < Int ?> Platform and version requirements: JVM, js, native","title":"UINT32_VALUE"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-u-i-n-t64/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / UINT64 UINT64 \u00b6 val UINT64: ProtoAdapter < Long > Platform and version requirements: JVM, js, native Like INT64, but negative longs are interpreted as large positive values, and encoded that way in JSON.","title":" u i n t64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-u-i-n-t64/#uint64","text":"val UINT64: ProtoAdapter < Long > Platform and version requirements: JVM, js, native Like INT64, but negative longs are interpreted as large positive values, and encoded that way in JSON.","title":"UINT64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-u-i-n-t64_-v-a-l-u-e/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / UINT64_VALUE UINT64_VALUE \u00b6 val UINT64_VALUE: ProtoAdapter < Long ?> Platform and version requirements: JVM, js, native","title":" u i n t64  v a l u e"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-u-i-n-t64_-v-a-l-u-e/#uint64_value","text":"val UINT64_VALUE: ProtoAdapter < Long ?> Platform and version requirements: JVM, js, native","title":"UINT64_VALUE"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/as-packed/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / asPacked asPacked \u00b6 fun asPacked(): ProtoAdapter < List < E >> Platform and version requirements: JVM, js, native Returns an adapter for E but as a packed, repeated value.","title":"As packed"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/as-packed/#aspacked","text":"fun asPacked(): ProtoAdapter < List < E >> Platform and version requirements: JVM, js, native Returns an adapter for E but as a packed, repeated value.","title":"asPacked"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/as-repeated/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / asRepeated asRepeated \u00b6 fun asRepeated(): ProtoAdapter < List < E >> Platform and version requirements: JVM, js, native Returns an adapter for E but as a repeated value. Note: Repeated items are not required to be encoded sequentially. Thus, when decoding using the returned adapter, only single-element lists will be returned and it is the caller\u2019s responsibility to merge them into the final list.","title":"As repeated"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/as-repeated/#asrepeated","text":"fun asRepeated(): ProtoAdapter < List < E >> Platform and version requirements: JVM, js, native Returns an adapter for E but as a repeated value. Note: Repeated items are not required to be encoded sequentially. Thus, when decoding using the returned adapter, only single-element lists will be returned and it is the caller\u2019s responsibility to merge them into the final list.","title":"asRepeated"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/decode/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / decode decode \u00b6 abstract fun decode(reader: ProtoReader ): E Read a non-null value from reader . fun decode(bytes: ByteArray ): E Platform and version requirements: JVM, js, native fun decode(bytes: <ERROR CLASS>): E Read an encoded message from bytes . fun decode(source: <ERROR CLASS>): E Platform and version requirements: JVM, js, native Read an encoded message from source . fun decode(stream: InputStream ): E Platform and version requirements: JVM","title":"Decode"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/decode/#decode","text":"abstract fun decode(reader: ProtoReader ): E Read a non-null value from reader . fun decode(bytes: ByteArray ): E Platform and version requirements: JVM, js, native fun decode(bytes: <ERROR CLASS>): E Read an encoded message from bytes . fun decode(source: <ERROR CLASS>): E Platform and version requirements: JVM, js, native Read an encoded message from source . fun decode(stream: InputStream ): E Platform and version requirements: JVM","title":"decode"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encode-byte-string/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / encodeByteString encodeByteString \u00b6 fun encodeByteString(value: E ): <ERROR CLASS> Platform and version requirements: JVM, js, native Encode value as a ByteString .","title":"Encode byte string"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encode-byte-string/#encodebytestring","text":"fun encodeByteString(value: E ): <ERROR CLASS> Platform and version requirements: JVM, js, native Encode value as a ByteString .","title":"encodeByteString"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encode-with-tag/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / encodeWithTag encodeWithTag \u00b6 open fun encodeWithTag(writer: ProtoWriter , tag: Int , value: E ?): Unit Write tag and value to writer . If value is null this does nothing. open actual fun encodeWithTag(writer: <ERROR CLASS>, tag: Int , value: E ?): Unit Platform and version requirements: JVM, js, native","title":"Encode with tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encode-with-tag/#encodewithtag","text":"open fun encodeWithTag(writer: ProtoWriter , tag: Int , value: E ?): Unit Write tag and value to writer . If value is null this does nothing. open actual fun encodeWithTag(writer: <ERROR CLASS>, tag: Int , value: E ?): Unit Platform and version requirements: JVM, js, native","title":"encodeWithTag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encode/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / encode encode \u00b6 abstract fun encode(writer: ProtoWriter , value: E ): Unit Write non-null value to writer . fun encode(sink: <ERROR CLASS>, value: E ): Unit Platform and version requirements: JVM, js, native Encode value and write it to stream . fun encode(value: E ): ByteArray Platform and version requirements: JVM, js, native Encode value as a byte[] . fun encode(stream: OutputStream , value: E ): Unit Platform and version requirements: JVM","title":"Encode"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encode/#encode","text":"abstract fun encode(writer: ProtoWriter , value: E ): Unit Write non-null value to writer . fun encode(sink: <ERROR CLASS>, value: E ): Unit Platform and version requirements: JVM, js, native Encode value and write it to stream . fun encode(value: E ): ByteArray Platform and version requirements: JVM, js, native Encode value as a byte[] . fun encode(stream: OutputStream , value: E ): Unit Platform and version requirements: JVM","title":"encode"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encoded-size-with-tag/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / encodedSizeWithTag encodedSizeWithTag \u00b6 open fun encodedSizeWithTag(tag: Int , value: E ?): Int Platform and version requirements: JVM, js, native The size of tag and value in the wire format. This size includes the tag, type, length-delimited prefix (should the type require one), and value. Returns 0 if value is null.","title":"Encoded size with tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encoded-size-with-tag/#encodedsizewithtag","text":"open fun encodedSizeWithTag(tag: Int , value: E ?): Int Platform and version requirements: JVM, js, native The size of tag and value in the wire format. This size includes the tag, type, length-delimited prefix (should the type require one), and value. Returns 0 if value is null.","title":"encodedSizeWithTag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encoded-size/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / encodedSize encodedSize \u00b6 abstract fun encodedSize(value: E ): Int Platform and version requirements: JVM, js, native The size of the non-null data value . This does not include the size required for a length-delimited prefix (should the type require one).","title":"Encoded size"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encoded-size/#encodedsize","text":"abstract fun encodedSize(value: E ): Int Platform and version requirements: JVM, js, native The size of the non-null data value . This does not include the size required for a length-delimited prefix (should the type require one).","title":"encodedSize"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/get/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / get get \u00b6 fun <M : Message <*, *>> get(message: M ): ProtoAdapter < M > Platform and version requirements: JVM Returns the adapter for the type of Message . fun <M> get(type: Class < M >): ProtoAdapter < M > Platform and version requirements: JVM Returns the adapter for type . fun get(adapterString: String ): ProtoAdapter <*> Platform and version requirements: JVM Returns the adapter for a given adapterString . adapterString is specified on a proto message field\u2019s WireField annotation in the form com.squareup.wire.protos.person.Person#ADAPTER .","title":"Get"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/get/#get","text":"fun <M : Message <*, *>> get(message: M ): ProtoAdapter < M > Platform and version requirements: JVM Returns the adapter for the type of Message . fun <M> get(type: Class < M >): ProtoAdapter < M > Platform and version requirements: JVM Returns the adapter for type . fun get(adapterString: String ): ProtoAdapter <*> Platform and version requirements: JVM Returns the adapter for a given adapterString . adapterString is specified on a proto message field\u2019s WireField annotation in the form com.squareup.wire.protos.person.Person#ADAPTER .","title":"get"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/identity/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / identity identity \u00b6 val identity: E ? Platform and version requirements: JVM, js, native A special value that is used when a field is absent from an encoded proto3 message. When encoding a proto3 message, fields that hold this value will be omitted. TYPE IDENTITY All numeric types (int32, float, double, etc.) 0 Boolean false String empty string: \u201c\u201d Bytes empty bytes: ByteString.EMPTY Enums enum constant with tag 0 Lists (repeated types) empty list: listOf()","title":"Identity"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/identity/#identity","text":"val identity: E ? Platform and version requirements: JVM, js, native A special value that is used when a field is absent from an encoded proto3 message. When encoding a proto3 message, fields that hold this value will be omitted. TYPE IDENTITY All numeric types (int32, float, double, etc.) 0 Boolean false String empty string: \u201c\u201d Bytes empty bytes: ByteString.EMPTY Enums enum constant with tag 0 Lists (repeated types) empty list: listOf()","title":"identity"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/new-enum-adapter/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / newEnumAdapter newEnumAdapter \u00b6 fun <E> newEnumAdapter(type: Class < E >): EnumAdapter < E > Platform and version requirements: JVM Creates a new proto adapter for type .","title":"New enum adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/new-enum-adapter/#newenumadapter","text":"fun <E> newEnumAdapter(type: Class < E >): EnumAdapter < E > Platform and version requirements: JVM Creates a new proto adapter for type .","title":"newEnumAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/new-map-adapter/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / newMapAdapter newMapAdapter \u00b6 fun <K, V> newMapAdapter(keyAdapter: ProtoAdapter < K >, valueAdapter: ProtoAdapter < V >): ProtoAdapter < Map < K , V >> Platform and version requirements: JVM, js, native Creates a new proto adapter for a map using keyAdapter and valueAdapter . Note: Map entries are not required to be encoded sequentially. Thus, when decoding using the returned adapter, only single-element maps will be returned and it is the caller\u2019s responsibility to merge them into the final map.","title":"New map adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/new-map-adapter/#newmapadapter","text":"fun <K, V> newMapAdapter(keyAdapter: ProtoAdapter < K >, valueAdapter: ProtoAdapter < V >): ProtoAdapter < Map < K , V >> Platform and version requirements: JVM, js, native Creates a new proto adapter for a map using keyAdapter and valueAdapter . Note: Map entries are not required to be encoded sequentially. Thus, when decoding using the returned adapter, only single-element maps will be returned and it is the caller\u2019s responsibility to merge them into the final map.","title":"newMapAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/new-message-adapter/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / newMessageAdapter newMessageAdapter \u00b6 fun <M : Message < M , B >, B : Builder < M , B >> newMessageAdapter(type: Class < M >): ProtoAdapter < M > Platform and version requirements: JVM fun <M : Message < M , B >, B : Builder < M , B >> newMessageAdapter(type: Class < M >, typeUrl: String ): ProtoAdapter < M > Platform and version requirements: JVM fun <M : Message < M , B >, B : Builder < M , B >> newMessageAdapter(type: Class < M >, typeUrl: String , syntax: <ERROR CLASS>): ProtoAdapter < M > Platform and version requirements: JVM Creates a new proto adapter for type .","title":"New message adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/new-message-adapter/#newmessageadapter","text":"fun <M : Message < M , B >, B : Builder < M , B >> newMessageAdapter(type: Class < M >): ProtoAdapter < M > Platform and version requirements: JVM fun <M : Message < M , B >, B : Builder < M , B >> newMessageAdapter(type: Class < M >, typeUrl: String ): ProtoAdapter < M > Platform and version requirements: JVM fun <M : Message < M , B >, B : Builder < M , B >> newMessageAdapter(type: Class < M >, typeUrl: String , syntax: <ERROR CLASS>): ProtoAdapter < M > Platform and version requirements: JVM Creates a new proto adapter for type .","title":"newMessageAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/redact/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / redact redact \u00b6 abstract fun redact(value: E ): E Platform and version requirements: JVM, js, native Returns the redacted form of value .","title":"Redact"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/redact/#redact","text":"abstract fun redact(value: E ): E Platform and version requirements: JVM, js, native Returns the redacted form of value .","title":"redact"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/syntax/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / syntax syntax \u00b6 val syntax: Syntax Platform and version requirements: JVM, js, native Identifies the syntax in which type is defined in the proto schema. This string contains either \u201cproto2\u201d or \u201cproto3\u201d.","title":"Syntax"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/syntax/#syntax","text":"val syntax: Syntax Platform and version requirements: JVM, js, native Identifies the syntax in which type is defined in the proto schema. This string contains either \u201cproto2\u201d or \u201cproto3\u201d.","title":"syntax"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/to-string/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / toString toString \u00b6 open fun toString(value: E ): String Platform and version requirements: JVM, js, native Returns a human-readable version of the given value .","title":"To string"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/to-string/#tostring","text":"open fun toString(value: E ): String Platform and version requirements: JVM, js, native Returns a human-readable version of the given value .","title":"toString"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/type-url/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / typeUrl typeUrl \u00b6 val typeUrl: String ? Platform and version requirements: JVM, js, native Identifies this type for inclusion in a google.protobuf.Any . This is a string like \u201ctype.googleapis.com/packagename.messagename\u201d or null if this type is either not a message (such as scalars and enums), or was code-generated before Wire 3.2 which introduced support for type URLS.","title":"Type url"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/type-url/#typeurl","text":"val typeUrl: String ? Platform and version requirements: JVM, js, native Identifies this type for inclusion in a google.protobuf.Any . This is a string like \u201ctype.googleapis.com/packagename.messagename\u201d or null if this type is either not a message (such as scalars and enums), or was code-generated before Wire 3.2 which introduced support for type URLS.","title":"typeUrl"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/type/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / type type \u00b6 val type: KClass <*>? Platform and version requirements: JVM, js, native","title":"Type"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/type/#type","text":"val type: KClass <*>? Platform and version requirements: JVM, js, native","title":"type"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / EnumConstantNotFoundException EnumConstantNotFoundException \u00b6 class EnumConstantNotFoundException : IllegalArgumentException Platform and version requirements: JVM, js, native Constructors \u00b6 Name Summary <init> (JVM) EnumConstantNotFoundException(value: Int , type: KClass <*>?) EnumConstantNotFoundException(value: Int , type: Class <*>) Properties \u00b6 Name Summary value val value: Int","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/#enumconstantnotfoundexception","text":"class EnumConstantNotFoundException : IllegalArgumentException Platform and version requirements: JVM, js, native","title":"EnumConstantNotFoundException"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/#constructors","text":"Name Summary <init> (JVM) EnumConstantNotFoundException(value: Int , type: KClass <*>?) EnumConstantNotFoundException(value: Int , type: Class <*>)","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/#properties","text":"Name Summary value val value: Int","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/-init-/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / EnumConstantNotFoundException / <init> <init> \u00b6 EnumConstantNotFoundException(value: Int , type: KClass <*>?) Platform and version requirements: JVM, js, native EnumConstantNotFoundException(value: Int , type: Class <*>) Platform and version requirements: JVM","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/-init-/#init","text":"EnumConstantNotFoundException(value: Int , type: KClass <*>?) Platform and version requirements: JVM, js, native EnumConstantNotFoundException(value: Int , type: Class <*>) Platform and version requirements: JVM","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/value/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / EnumConstantNotFoundException / value value \u00b6 val value: Int Platform and version requirements: JVM, js, native","title":"Value"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/value/#value","text":"val value: Int Platform and version requirements: JVM, js, native","title":"value"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-unsupported-type-proto-adapter/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / UnsupportedTypeProtoAdapter UnsupportedTypeProtoAdapter \u00b6 class UnsupportedTypeProtoAdapter : ProtoAdapter < Nothing > Platform and version requirements: JVM Stub ProtoAdapter for Wire types which are typeliased to java.time types on the JVM such as Duration and Instant . This proto adapter is used when the corresponding java.time type is missing from the JVM classpath. Constructors \u00b6 Name Summary <init> UnsupportedTypeProtoAdapter() Stub ProtoAdapter for Wire types which are typeliased to java.time types on the JVM such as Duration and Instant . This proto adapter is used when the corresponding java.time type is missing from the JVM classpath. Inherited Properties \u00b6 Name Summary identity (JVM, js, native) val identity: E ? A special value that is used when a field is absent from an encoded proto3 message. When encoding a proto3 message, fields that hold this value will be omitted. syntax (JVM, js, native) val syntax: Syntax Identifies the syntax in which type is defined in the proto schema. This string contains either \u201cproto2\u201d or \u201cproto3\u201d. type (JVM, js, native) val type: KClass <*>? typeUrl (JVM, js, native) val typeUrl: String ? Identifies this type for inclusion in a google.protobuf.Any . This is a string like \u201ctype.googleapis.com/packagename.messagename\u201d or null if this type is either not a message (such as scalars and enums), or was code-generated before Wire 3.2 which introduced support for type URLS. Functions \u00b6 Name Summary decode fun decode(reader: <ERROR CLASS>): Nothing encode fun encode(writer: <ERROR CLASS>, value: Nothing ): Nothing encodedSize fun encodedSize(value: Nothing ): Nothing redact fun redact(value: Nothing ): Nothing Inherited Functions \u00b6 Name Summary asPacked (JVM, js, native) fun asPacked(): ProtoAdapter < List < E >> Returns an adapter for E but as a packed, repeated value. asRepeated (JVM, js, native) fun asRepeated(): ProtoAdapter < List < E >> Returns an adapter for E but as a repeated value. decode (JVM) fun decode(bytes: ByteArray ): E Read an encoded message from bytes . fun decode(stream: InputStream ): E encode (JVM) fun encode(value: E ): ByteArray Encode value as a byte[] . fun encode(stream: OutputStream , value: E ): Unit encodeByteString (JVM, js, native) fun encodeByteString(value: E ): <ERROR CLASS> Encode value as a ByteString . encodeWithTag (JVM, js, native) open actual fun encodeWithTag(writer: <ERROR CLASS>, tag: Int , value: E ?): Unit encodedSizeWithTag (JVM, js, native) open fun encodedSizeWithTag(tag: Int , value: E ?): Int The size of tag and value in the wire format. This size includes the tag, type, length-delimited prefix (should the type require one), and value. Returns 0 if value is null. toString (JVM, js, native) open fun toString(value: E ): String Returns a human-readable version of the given value .","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-unsupported-type-proto-adapter/#unsupportedtypeprotoadapter","text":"class UnsupportedTypeProtoAdapter : ProtoAdapter < Nothing > Platform and version requirements: JVM Stub ProtoAdapter for Wire types which are typeliased to java.time types on the JVM such as Duration and Instant . This proto adapter is used when the corresponding java.time type is missing from the JVM classpath.","title":"UnsupportedTypeProtoAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-unsupported-type-proto-adapter/#constructors","text":"Name Summary <init> UnsupportedTypeProtoAdapter() Stub ProtoAdapter for Wire types which are typeliased to java.time types on the JVM such as Duration and Instant . This proto adapter is used when the corresponding java.time type is missing from the JVM classpath.","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-unsupported-type-proto-adapter/#inherited-properties","text":"Name Summary identity (JVM, js, native) val identity: E ? A special value that is used when a field is absent from an encoded proto3 message. When encoding a proto3 message, fields that hold this value will be omitted. syntax (JVM, js, native) val syntax: Syntax Identifies the syntax in which type is defined in the proto schema. This string contains either \u201cproto2\u201d or \u201cproto3\u201d. type (JVM, js, native) val type: KClass <*>? typeUrl (JVM, js, native) val typeUrl: String ? Identifies this type for inclusion in a google.protobuf.Any . This is a string like \u201ctype.googleapis.com/packagename.messagename\u201d or null if this type is either not a message (such as scalars and enums), or was code-generated before Wire 3.2 which introduced support for type URLS.","title":"Inherited Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-unsupported-type-proto-adapter/#functions","text":"Name Summary decode fun decode(reader: <ERROR CLASS>): Nothing encode fun encode(writer: <ERROR CLASS>, value: Nothing ): Nothing encodedSize fun encodedSize(value: Nothing ): Nothing redact fun redact(value: Nothing ): Nothing","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-unsupported-type-proto-adapter/#inherited-functions","text":"Name Summary asPacked (JVM, js, native) fun asPacked(): ProtoAdapter < List < E >> Returns an adapter for E but as a packed, repeated value. asRepeated (JVM, js, native) fun asRepeated(): ProtoAdapter < List < E >> Returns an adapter for E but as a repeated value. decode (JVM) fun decode(bytes: ByteArray ): E Read an encoded message from bytes . fun decode(stream: InputStream ): E encode (JVM) fun encode(value: E ): ByteArray Encode value as a byte[] . fun encode(stream: OutputStream , value: E ): Unit encodeByteString (JVM, js, native) fun encodeByteString(value: E ): <ERROR CLASS> Encode value as a ByteString . encodeWithTag (JVM, js, native) open actual fun encodeWithTag(writer: <ERROR CLASS>, tag: Int , value: E ?): Unit encodedSizeWithTag (JVM, js, native) open fun encodedSizeWithTag(tag: Int , value: E ?): Int The size of tag and value in the wire format. This size includes the tag, type, length-delimited prefix (should the type require one), and value. Returns 0 if value is null. toString (JVM, js, native) open fun toString(value: E ): String Returns a human-readable version of the given value .","title":"Inherited Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-unsupported-type-proto-adapter/-init-/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / UnsupportedTypeProtoAdapter / <init> <init> \u00b6 UnsupportedTypeProtoAdapter() Platform and version requirements: JVM Stub ProtoAdapter for Wire types which are typeliased to java.time types on the JVM such as Duration and Instant . This proto adapter is used when the corresponding java.time type is missing from the JVM classpath.","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-unsupported-type-proto-adapter/-init-/#init","text":"UnsupportedTypeProtoAdapter() Platform and version requirements: JVM Stub ProtoAdapter for Wire types which are typeliased to java.time types on the JVM such as Duration and Instant . This proto adapter is used when the corresponding java.time type is missing from the JVM classpath.","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-unsupported-type-proto-adapter/decode/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / UnsupportedTypeProtoAdapter / decode decode \u00b6 fun decode(reader: <ERROR CLASS>): Nothing Overrides ProtoAdapter.decode Platform and version requirements: JVM","title":"Decode"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-unsupported-type-proto-adapter/decode/#decode","text":"fun decode(reader: <ERROR CLASS>): Nothing Overrides ProtoAdapter.decode Platform and version requirements: JVM","title":"decode"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-unsupported-type-proto-adapter/encode/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / UnsupportedTypeProtoAdapter / encode encode \u00b6 fun encode(writer: <ERROR CLASS>, value: Nothing ): Nothing Overrides ProtoAdapter.encode Platform and version requirements: JVM","title":"Encode"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-unsupported-type-proto-adapter/encode/#encode","text":"fun encode(writer: <ERROR CLASS>, value: Nothing ): Nothing Overrides ProtoAdapter.encode Platform and version requirements: JVM","title":"encode"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-unsupported-type-proto-adapter/encoded-size/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / UnsupportedTypeProtoAdapter / encodedSize encodedSize \u00b6 fun encodedSize(value: Nothing ): Nothing Overrides ProtoAdapter.encodedSize Platform and version requirements: JVM","title":"Encoded size"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-unsupported-type-proto-adapter/encoded-size/#encodedsize","text":"fun encodedSize(value: Nothing ): Nothing Overrides ProtoAdapter.encodedSize Platform and version requirements: JVM","title":"encodedSize"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-unsupported-type-proto-adapter/redact/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / UnsupportedTypeProtoAdapter / redact redact \u00b6 fun redact(value: Nothing ): Nothing Overrides ProtoAdapter.redact Platform and version requirements: JVM","title":"Redact"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-unsupported-type-proto-adapter/redact/#redact","text":"fun redact(value: Nothing ): Nothing Overrides ProtoAdapter.redact Platform and version requirements: JVM","title":"redact"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/","text":"wire-runtime / com.squareup.wire / ProtoReader ProtoReader \u00b6 class ProtoReader Reads and decodes protocol message fields. Constructors \u00b6 Name Summary <init> ProtoReader(source: <ERROR CLASS>) Reads and decodes protocol message fields. Functions \u00b6 Name Summary addUnknownField fun addUnknownField(tag: Int , fieldEncoding: FieldEncoding , value: Any ?): Unit Store an already read field temporarily. Once the entire message is read, call endMessageAndGetUnknownFields to retrieve unknown fields. beginMessage fun beginMessage(): Long Begin a nested message. A call to this method will restrict the reader so that nextTag returns -1 when the message is complete. An accompanying call to endMessage must then occur with the opaque token returned from this method. endMessageAndGetUnknownFields fun endMessageAndGetUnknownFields(token: Long ): <ERROR CLASS> End a length-delimited nested message. Calls to this method must be symmetric with calls to beginMessage . forEachTag fun forEachTag(tagHandler: ( Int ) -> Any ): <ERROR CLASS> Reads each tag, handles it, and returns a byte string with the unknown fields. nextTag fun nextTag(): Int Reads and returns the next tag of the message, or -1 if there are no further tags. Use peekFieldEncoding after calling this method to query its encoding. This silently skips groups. peekFieldEncoding fun peekFieldEncoding(): FieldEncoding ? Returns the encoding of the next field value. nextTag must be called before this method. readBytes fun readBytes(): <ERROR CLASS> Reads a bytes field value from the stream. The length is read from the stream prior to the actual data. readFixed32 fun readFixed32(): Int Reads a 32-bit little-endian integer from the stream. readFixed64 fun readFixed64(): Long Reads a 64-bit little-endian integer from the stream. readString fun readString(): String Reads a string field value from the stream. readUnknownField fun readUnknownField(tag: Int ): Unit Read an unknown field and store temporarily. Once the entire message is read, call endMessageAndGetUnknownFields to retrieve unknown fields. readVarint32 fun readVarint32(): Int Reads a raw varint from the stream. If larger than 32 bits, discard the upper bits. readVarint64 fun readVarint64(): Long Reads a raw varint up to 64 bits in length from the stream. skip fun skip(): Unit Skips the current field\u2019s value. This is only safe to call immediately following a call to nextTag .","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/#protoreader","text":"class ProtoReader Reads and decodes protocol message fields.","title":"ProtoReader"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/#constructors","text":"Name Summary <init> ProtoReader(source: <ERROR CLASS>) Reads and decodes protocol message fields.","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/#functions","text":"Name Summary addUnknownField fun addUnknownField(tag: Int , fieldEncoding: FieldEncoding , value: Any ?): Unit Store an already read field temporarily. Once the entire message is read, call endMessageAndGetUnknownFields to retrieve unknown fields. beginMessage fun beginMessage(): Long Begin a nested message. A call to this method will restrict the reader so that nextTag returns -1 when the message is complete. An accompanying call to endMessage must then occur with the opaque token returned from this method. endMessageAndGetUnknownFields fun endMessageAndGetUnknownFields(token: Long ): <ERROR CLASS> End a length-delimited nested message. Calls to this method must be symmetric with calls to beginMessage . forEachTag fun forEachTag(tagHandler: ( Int ) -> Any ): <ERROR CLASS> Reads each tag, handles it, and returns a byte string with the unknown fields. nextTag fun nextTag(): Int Reads and returns the next tag of the message, or -1 if there are no further tags. Use peekFieldEncoding after calling this method to query its encoding. This silently skips groups. peekFieldEncoding fun peekFieldEncoding(): FieldEncoding ? Returns the encoding of the next field value. nextTag must be called before this method. readBytes fun readBytes(): <ERROR CLASS> Reads a bytes field value from the stream. The length is read from the stream prior to the actual data. readFixed32 fun readFixed32(): Int Reads a 32-bit little-endian integer from the stream. readFixed64 fun readFixed64(): Long Reads a 64-bit little-endian integer from the stream. readString fun readString(): String Reads a string field value from the stream. readUnknownField fun readUnknownField(tag: Int ): Unit Read an unknown field and store temporarily. Once the entire message is read, call endMessageAndGetUnknownFields to retrieve unknown fields. readVarint32 fun readVarint32(): Int Reads a raw varint from the stream. If larger than 32 bits, discard the upper bits. readVarint64 fun readVarint64(): Long Reads a raw varint up to 64 bits in length from the stream. skip fun skip(): Unit Skips the current field\u2019s value. This is only safe to call immediately following a call to nextTag .","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/-init-/","text":"wire-runtime / com.squareup.wire / ProtoReader / <init> <init> \u00b6 ProtoReader(source: <ERROR CLASS>) Reads and decodes protocol message fields.","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/-init-/#init","text":"ProtoReader(source: <ERROR CLASS>) Reads and decodes protocol message fields.","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/add-unknown-field/","text":"wire-runtime / com.squareup.wire / ProtoReader / addUnknownField addUnknownField \u00b6 fun addUnknownField(tag: Int , fieldEncoding: FieldEncoding , value: Any ?): Unit Store an already read field temporarily. Once the entire message is read, call endMessageAndGetUnknownFields to retrieve unknown fields.","title":"Add unknown field"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/add-unknown-field/#addunknownfield","text":"fun addUnknownField(tag: Int , fieldEncoding: FieldEncoding , value: Any ?): Unit Store an already read field temporarily. Once the entire message is read, call endMessageAndGetUnknownFields to retrieve unknown fields.","title":"addUnknownField"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/begin-message/","text":"wire-runtime / com.squareup.wire / ProtoReader / beginMessage beginMessage \u00b6 fun beginMessage(): Long Begin a nested message. A call to this method will restrict the reader so that nextTag returns -1 when the message is complete. An accompanying call to endMessage must then occur with the opaque token returned from this method.","title":"Begin message"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/begin-message/#beginmessage","text":"fun beginMessage(): Long Begin a nested message. A call to this method will restrict the reader so that nextTag returns -1 when the message is complete. An accompanying call to endMessage must then occur with the opaque token returned from this method.","title":"beginMessage"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/end-message-and-get-unknown-fields/","text":"wire-runtime / com.squareup.wire / ProtoReader / endMessageAndGetUnknownFields endMessageAndGetUnknownFields \u00b6 fun endMessageAndGetUnknownFields(token: Long ): <ERROR CLASS> End a length-delimited nested message. Calls to this method must be symmetric with calls to beginMessage . Parameters \u00b6 token - value returned from the corresponding call to beginMessage .","title":"End message and get unknown fields"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/end-message-and-get-unknown-fields/#endmessageandgetunknownfields","text":"fun endMessageAndGetUnknownFields(token: Long ): <ERROR CLASS> End a length-delimited nested message. Calls to this method must be symmetric with calls to beginMessage .","title":"endMessageAndGetUnknownFields"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/end-message-and-get-unknown-fields/#parameters","text":"token - value returned from the corresponding call to beginMessage .","title":"Parameters"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/for-each-tag/","text":"wire-runtime / com.squareup.wire / ProtoReader / forEachTag forEachTag \u00b6 inline fun forEachTag(tagHandler: ( Int ) -> Any ): <ERROR CLASS> Reads each tag, handles it, and returns a byte string with the unknown fields.","title":"For each tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/for-each-tag/#foreachtag","text":"inline fun forEachTag(tagHandler: ( Int ) -> Any ): <ERROR CLASS> Reads each tag, handles it, and returns a byte string with the unknown fields.","title":"forEachTag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/next-tag/","text":"wire-runtime / com.squareup.wire / ProtoReader / nextTag nextTag \u00b6 fun nextTag(): Int Reads and returns the next tag of the message, or -1 if there are no further tags. Use peekFieldEncoding after calling this method to query its encoding. This silently skips groups.","title":"Next tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/next-tag/#nexttag","text":"fun nextTag(): Int Reads and returns the next tag of the message, or -1 if there are no further tags. Use peekFieldEncoding after calling this method to query its encoding. This silently skips groups.","title":"nextTag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/peek-field-encoding/","text":"wire-runtime / com.squareup.wire / ProtoReader / peekFieldEncoding peekFieldEncoding \u00b6 fun peekFieldEncoding(): FieldEncoding ? Returns the encoding of the next field value. nextTag must be called before this method.","title":"Peek field encoding"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/peek-field-encoding/#peekfieldencoding","text":"fun peekFieldEncoding(): FieldEncoding ? Returns the encoding of the next field value. nextTag must be called before this method.","title":"peekFieldEncoding"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-bytes/","text":"wire-runtime / com.squareup.wire / ProtoReader / readBytes readBytes \u00b6 fun readBytes(): <ERROR CLASS> Reads a bytes field value from the stream. The length is read from the stream prior to the actual data.","title":"Read bytes"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-bytes/#readbytes","text":"fun readBytes(): <ERROR CLASS> Reads a bytes field value from the stream. The length is read from the stream prior to the actual data.","title":"readBytes"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-fixed32/","text":"wire-runtime / com.squareup.wire / ProtoReader / readFixed32 readFixed32 \u00b6 fun readFixed32(): Int Reads a 32-bit little-endian integer from the stream.","title":"Read fixed32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-fixed32/#readfixed32","text":"fun readFixed32(): Int Reads a 32-bit little-endian integer from the stream.","title":"readFixed32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-fixed64/","text":"wire-runtime / com.squareup.wire / ProtoReader / readFixed64 readFixed64 \u00b6 fun readFixed64(): Long Reads a 64-bit little-endian integer from the stream.","title":"Read fixed64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-fixed64/#readfixed64","text":"fun readFixed64(): Long Reads a 64-bit little-endian integer from the stream.","title":"readFixed64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-string/","text":"wire-runtime / com.squareup.wire / ProtoReader / readString readString \u00b6 fun readString(): String Reads a string field value from the stream.","title":"Read string"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-string/#readstring","text":"fun readString(): String Reads a string field value from the stream.","title":"readString"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-unknown-field/","text":"wire-runtime / com.squareup.wire / ProtoReader / readUnknownField readUnknownField \u00b6 fun readUnknownField(tag: Int ): Unit Read an unknown field and store temporarily. Once the entire message is read, call endMessageAndGetUnknownFields to retrieve unknown fields.","title":"Read unknown field"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-unknown-field/#readunknownfield","text":"fun readUnknownField(tag: Int ): Unit Read an unknown field and store temporarily. Once the entire message is read, call endMessageAndGetUnknownFields to retrieve unknown fields.","title":"readUnknownField"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-varint32/","text":"wire-runtime / com.squareup.wire / ProtoReader / readVarint32 readVarint32 \u00b6 fun readVarint32(): Int Reads a raw varint from the stream. If larger than 32 bits, discard the upper bits.","title":"Read varint32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-varint32/#readvarint32","text":"fun readVarint32(): Int Reads a raw varint from the stream. If larger than 32 bits, discard the upper bits.","title":"readVarint32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-varint64/","text":"wire-runtime / com.squareup.wire / ProtoReader / readVarint64 readVarint64 \u00b6 fun readVarint64(): Long Reads a raw varint up to 64 bits in length from the stream.","title":"Read varint64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-varint64/#readvarint64","text":"fun readVarint64(): Long Reads a raw varint up to 64 bits in length from the stream.","title":"readVarint64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/skip/","text":"wire-runtime / com.squareup.wire / ProtoReader / skip skip \u00b6 fun skip(): Unit Skips the current field\u2019s value. This is only safe to call immediately following a call to nextTag .","title":"Skip"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/skip/#skip","text":"fun skip(): Unit Skips the current field\u2019s value. This is only safe to call immediately following a call to nextTag .","title":"skip"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/","text":"wire-runtime / com.squareup.wire / ProtoWriter ProtoWriter \u00b6 class ProtoWriter Utilities for encoding and writing protocol message fields. Constructors \u00b6 Name Summary <init> ProtoWriter(sink: <ERROR CLASS>) Utilities for encoding and writing protocol message fields. Functions \u00b6 Name Summary writeBytes fun writeBytes(value: <ERROR CLASS>): Unit writeFixed32 fun writeFixed32(value: Int ): Unit Write a little-endian 32-bit integer. writeFixed64 fun writeFixed64(value: Long ): Unit Write a little-endian 64-bit integer. writeString fun writeString(value: String ): Unit writeTag fun writeTag(fieldNumber: Int , fieldEncoding: FieldEncoding ): Unit Encode and write a tag. writeVarint32 fun writeVarint32(value: Int ): Unit Encode and write a varint. value is treated as unsigned, so it won\u2019t be sign-extended if negative. writeVarint64 fun writeVarint64(value: Long ): Unit Encode and write a varint.","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/#protowriter","text":"class ProtoWriter Utilities for encoding and writing protocol message fields.","title":"ProtoWriter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/#constructors","text":"Name Summary <init> ProtoWriter(sink: <ERROR CLASS>) Utilities for encoding and writing protocol message fields.","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/#functions","text":"Name Summary writeBytes fun writeBytes(value: <ERROR CLASS>): Unit writeFixed32 fun writeFixed32(value: Int ): Unit Write a little-endian 32-bit integer. writeFixed64 fun writeFixed64(value: Long ): Unit Write a little-endian 64-bit integer. writeString fun writeString(value: String ): Unit writeTag fun writeTag(fieldNumber: Int , fieldEncoding: FieldEncoding ): Unit Encode and write a tag. writeVarint32 fun writeVarint32(value: Int ): Unit Encode and write a varint. value is treated as unsigned, so it won\u2019t be sign-extended if negative. writeVarint64 fun writeVarint64(value: Long ): Unit Encode and write a varint.","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/-init-/","text":"wire-runtime / com.squareup.wire / ProtoWriter / <init> <init> \u00b6 ProtoWriter(sink: <ERROR CLASS>) Utilities for encoding and writing protocol message fields.","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/-init-/#init","text":"ProtoWriter(sink: <ERROR CLASS>) Utilities for encoding and writing protocol message fields.","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-bytes/","text":"wire-runtime / com.squareup.wire / ProtoWriter / writeBytes writeBytes \u00b6 fun writeBytes(value: <ERROR CLASS>): Unit","title":"Write bytes"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-bytes/#writebytes","text":"fun writeBytes(value: <ERROR CLASS>): Unit","title":"writeBytes"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-fixed32/","text":"wire-runtime / com.squareup.wire / ProtoWriter / writeFixed32 writeFixed32 \u00b6 fun writeFixed32(value: Int ): Unit Write a little-endian 32-bit integer.","title":"Write fixed32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-fixed32/#writefixed32","text":"fun writeFixed32(value: Int ): Unit Write a little-endian 32-bit integer.","title":"writeFixed32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-fixed64/","text":"wire-runtime / com.squareup.wire / ProtoWriter / writeFixed64 writeFixed64 \u00b6 fun writeFixed64(value: Long ): Unit Write a little-endian 64-bit integer.","title":"Write fixed64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-fixed64/#writefixed64","text":"fun writeFixed64(value: Long ): Unit Write a little-endian 64-bit integer.","title":"writeFixed64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-string/","text":"wire-runtime / com.squareup.wire / ProtoWriter / writeString writeString \u00b6 fun writeString(value: String ): Unit","title":"Write string"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-string/#writestring","text":"fun writeString(value: String ): Unit","title":"writeString"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-tag/","text":"wire-runtime / com.squareup.wire / ProtoWriter / writeTag writeTag \u00b6 fun writeTag(fieldNumber: Int , fieldEncoding: FieldEncoding ): Unit Encode and write a tag.","title":"Write tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-tag/#writetag","text":"fun writeTag(fieldNumber: Int , fieldEncoding: FieldEncoding ): Unit Encode and write a tag.","title":"writeTag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-varint32/","text":"wire-runtime / com.squareup.wire / ProtoWriter / writeVarint32 writeVarint32 \u00b6 fun writeVarint32(value: Int ): Unit Encode and write a varint. value is treated as unsigned, so it won\u2019t be sign-extended if negative.","title":"Write varint32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-varint32/#writevarint32","text":"fun writeVarint32(value: Int ): Unit Encode and write a varint. value is treated as unsigned, so it won\u2019t be sign-extended if negative.","title":"writeVarint32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-varint64/","text":"wire-runtime / com.squareup.wire / ProtoWriter / writeVarint64 writeVarint64 \u00b6 fun writeVarint64(value: Long ): Unit Encode and write a varint.","title":"Write varint64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-varint64/#writevarint64","text":"fun writeVarint64(value: Long ): Unit Encode and write a varint.","title":"writeVarint64"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/","text":"wire-runtime / com.squareup.wire / RuntimeEnumAdapter RuntimeEnumAdapter \u00b6 class RuntimeEnumAdapter<E> : EnumAdapter < E > Platform and version requirements: JVM Converts values of an enum to and from integers using reflection. Constructors \u00b6 Name Summary <init> RuntimeEnumAdapter(javaType: Class < E >) Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean fromValue fun fromValue(value: Int ): E ? Converts an integer to an enum. Returns null if there is no corresponding enum. hashCode fun hashCode(): Int Inherited Functions \u00b6 Name Summary decode (JVM, js, native) open actual fun decode(reader: <ERROR CLASS>): E encode (JVM, js, native) open actual fun encode(writer: <ERROR CLASS>, value: E ): Unit encodedSize (JVM, js, native) open fun encodedSize(value: E ): Int The size of the non-null data value . This does not include the size required for a length-delimited prefix (should the type require one). redact (JVM, js, native) open fun redact(value: E ): E Returns the redacted form of value . Companion Object Functions \u00b6 Name Summary create fun <E> create(enumType: Class < E >): RuntimeEnumAdapter < E >","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/#runtimeenumadapter","text":"class RuntimeEnumAdapter<E> : EnumAdapter < E > Platform and version requirements: JVM Converts values of an enum to and from integers using reflection.","title":"RuntimeEnumAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/#constructors","text":"Name Summary <init> RuntimeEnumAdapter(javaType: Class < E >)","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean fromValue fun fromValue(value: Int ): E ? Converts an integer to an enum. Returns null if there is no corresponding enum. hashCode fun hashCode(): Int","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/#inherited-functions","text":"Name Summary decode (JVM, js, native) open actual fun decode(reader: <ERROR CLASS>): E encode (JVM, js, native) open actual fun encode(writer: <ERROR CLASS>, value: E ): Unit encodedSize (JVM, js, native) open fun encodedSize(value: E ): Int The size of the non-null data value . This does not include the size required for a length-delimited prefix (should the type require one). redact (JVM, js, native) open fun redact(value: E ): E Returns the redacted form of value .","title":"Inherited Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/#companion-object-functions","text":"Name Summary create fun <E> create(enumType: Class < E >): RuntimeEnumAdapter < E >","title":"Companion Object Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/-init-/","text":"wire-runtime / com.squareup.wire / RuntimeEnumAdapter / <init> <init> \u00b6 RuntimeEnumAdapter(javaType: Class < E >) Platform and version requirements: JVM","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/-init-/#init","text":"RuntimeEnumAdapter(javaType: Class < E >) Platform and version requirements: JVM","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/create/","text":"wire-runtime / com.squareup.wire / RuntimeEnumAdapter / create create \u00b6 fun <E> create(enumType: Class < E >): RuntimeEnumAdapter < E > Platform and version requirements: JVM","title":"Create"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/create/#create","text":"fun <E> create(enumType: Class < E >): RuntimeEnumAdapter < E > Platform and version requirements: JVM","title":"create"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/equals/","text":"wire-runtime / com.squareup.wire / RuntimeEnumAdapter / equals equals \u00b6 fun equals(other: Any ?): Boolean Platform and version requirements: JVM","title":"Equals"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/equals/#equals","text":"fun equals(other: Any ?): Boolean Platform and version requirements: JVM","title":"equals"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/from-value/","text":"wire-runtime / com.squareup.wire / RuntimeEnumAdapter / fromValue fromValue \u00b6 protected fun fromValue(value: Int ): E ? Overrides EnumAdapter.fromValue Platform and version requirements: JVM Converts an integer to an enum. Returns null if there is no corresponding enum.","title":"From value"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/from-value/#fromvalue","text":"protected fun fromValue(value: Int ): E ? Overrides EnumAdapter.fromValue Platform and version requirements: JVM Converts an integer to an enum. Returns null if there is no corresponding enum.","title":"fromValue"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/hash-code/","text":"wire-runtime / com.squareup.wire / RuntimeEnumAdapter / hashCode hashCode \u00b6 fun hashCode(): Int Platform and version requirements: JVM","title":"Hash code"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/hash-code/#hashcode","text":"fun hashCode(): Int Platform and version requirements: JVM","title":"hashCode"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/","text":"wire-runtime / com.squareup.wire / Syntax Syntax \u00b6 enum class Syntax Syntax version. Enum Values \u00b6 Name Summary PROTO_2 PROTO_3 Functions \u00b6 Name Summary toString fun toString(): String Companion Object Functions \u00b6 Name Summary get operator fun get(string: String ): Syntax","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/#syntax","text":"enum class Syntax Syntax version.","title":"Syntax"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/#enum-values","text":"Name Summary PROTO_2 PROTO_3","title":"Enum Values"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/#companion-object-functions","text":"Name Summary get operator fun get(string: String ): Syntax","title":"Companion Object Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-p-r-o-t-o_2/","text":"wire-runtime / com.squareup.wire / Syntax / PROTO_2 PROTO_2 \u00b6 PROTO_2 Inherited Functions \u00b6 Name Summary toString fun toString(): String","title":" p r o t o 2"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-p-r-o-t-o_2/#proto_2","text":"PROTO_2","title":"PROTO_2"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-p-r-o-t-o_2/#inherited-functions","text":"Name Summary toString fun toString(): String","title":"Inherited Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-p-r-o-t-o_3/","text":"wire-runtime / com.squareup.wire / Syntax / PROTO_3 PROTO_3 \u00b6 PROTO_3 Inherited Functions \u00b6 Name Summary toString fun toString(): String","title":" p r o t o 3"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-p-r-o-t-o_3/#proto_3","text":"PROTO_3","title":"PROTO_3"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-p-r-o-t-o_3/#inherited-functions","text":"Name Summary toString fun toString(): String","title":"Inherited Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/get/","text":"wire-runtime / com.squareup.wire / Syntax / get get \u00b6 operator fun get(string: String ): Syntax","title":"Get"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/get/#get","text":"operator fun get(string: String ): Syntax","title":"get"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/to-string/","text":"wire-runtime / com.squareup.wire / Syntax / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum/","text":"wire-runtime / com.squareup.wire / WireEnum WireEnum \u00b6 interface WireEnum Interface for generated Enum values to help serialization and deserialization. Properties \u00b6 Name Summary value abstract val value: Int The tag value of an enum constant.","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum/#wireenum","text":"interface WireEnum Interface for generated Enum values to help serialization and deserialization.","title":"WireEnum"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum/#properties","text":"Name Summary value abstract val value: Int The tag value of an enum constant.","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum/value/","text":"wire-runtime / com.squareup.wire / WireEnum / value value \u00b6 abstract val value: Int The tag value of an enum constant.","title":"Value"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum/value/#value","text":"abstract val value: Int The tag value of an enum constant.","title":"value"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum-constant/","text":"wire-runtime / com.squareup.wire / WireEnumConstant WireEnumConstant \u00b6 @Target([AnnotationTarget.FIELD]) annotation class WireEnumConstant Annotates generated WireEnum fields with metadata for serialization and deserialization. Constructors \u00b6 Name Summary <init> WireEnumConstant(declaredName: String = \"\") Annotates generated WireEnum fields with metadata for serialization and deserialization. Properties \u00b6 Name Summary declaredName val declaredName: String Name of this constant as declared in the proto schema. This value is set to a non-empty string only when the declared name differs from the generated one; for instance, a proto constant named final generated in Java will be renamed to final_ .","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum-constant/#wireenumconstant","text":"@Target([AnnotationTarget.FIELD]) annotation class WireEnumConstant Annotates generated WireEnum fields with metadata for serialization and deserialization.","title":"WireEnumConstant"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum-constant/#constructors","text":"Name Summary <init> WireEnumConstant(declaredName: String = \"\") Annotates generated WireEnum fields with metadata for serialization and deserialization.","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum-constant/#properties","text":"Name Summary declaredName val declaredName: String Name of this constant as declared in the proto schema. This value is set to a non-empty string only when the declared name differs from the generated one; for instance, a proto constant named final generated in Java will be renamed to final_ .","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum-constant/-init-/","text":"wire-runtime / com.squareup.wire / WireEnumConstant / <init> <init> \u00b6 WireEnumConstant(declaredName: String = \"\") Annotates generated WireEnum fields with metadata for serialization and deserialization.","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum-constant/-init-/#init","text":"WireEnumConstant(declaredName: String = \"\") Annotates generated WireEnum fields with metadata for serialization and deserialization.","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum-constant/declared-name/","text":"wire-runtime / com.squareup.wire / WireEnumConstant / declaredName declaredName \u00b6 val declaredName: String Name of this constant as declared in the proto schema. This value is set to a non-empty string only when the declared name differs from the generated one; for instance, a proto constant named final generated in Java will be renamed to final_ .","title":"Declared name"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum-constant/declared-name/#declaredname","text":"val declaredName: String Name of this constant as declared in the proto schema. This value is set to a non-empty string only when the declared name differs from the generated one; for instance, a proto constant named final generated in Java will be renamed to final_ .","title":"declaredName"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/","text":"wire-runtime / com.squareup.wire / WireField WireField \u00b6 @Target([AnnotationTarget.FIELD]) annotation class WireField Annotates generated Message fields with metadata for serialization and deserialization. Types \u00b6 Name Summary Label enum class Label A protocol buffer label. Constructors \u00b6 Name Summary <init> WireField(tag: Int , keyAdapter: String = \"\", adapter: String , label: Label = Label.OPTIONAL, redacted: Boolean = false, declaredName: String = \"\", jsonName: String = \"\") Annotates generated Message fields with metadata for serialization and deserialization. Properties \u00b6 Name Summary adapter val adapter: String Reference to the static field that holds a ProtoAdapter that can encode and decode this field\u2019s values. The reference is a string like com.squareup.wire.protos.person.Person#ADAPTER and contains a fully-qualified class name followed by a hash symbol and a field name. declaredName val declaredName: String Name of this field as declared in the proto schema. This value is set to a non-empty string only when the declared name differs from the generated one; for instance, a proto field named final generated in Java will be renamed to final_ . jsonName val jsonName: String Name representing this field as it should be used in JSON. This value is set to a non-empty string only when the json name differs from the name as declared in the proto schema. keyAdapter val keyAdapter: String Reference to the static field that holds a ProtoAdapter that can encode and decode this field\u2019s keys. This only applies to maps. See adapter for a description of the value format. label val label: Label The field\u2019s protocol buffer label, one of Label.OPTIONAL , Label.REQUIRED , Label.REPEATED , Label.PACKED , or Label.OMIT_IDENTITY . Defaults to Label.OPTIONAL . redacted val redacted: Boolean Redacted fields are omitted from toString() to protect sensitive data. Defaults to false. tag val tag: Int The tag number used to store the field\u2019s value.","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/#wirefield","text":"@Target([AnnotationTarget.FIELD]) annotation class WireField Annotates generated Message fields with metadata for serialization and deserialization.","title":"WireField"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/#types","text":"Name Summary Label enum class Label A protocol buffer label.","title":"Types"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/#constructors","text":"Name Summary <init> WireField(tag: Int , keyAdapter: String = \"\", adapter: String , label: Label = Label.OPTIONAL, redacted: Boolean = false, declaredName: String = \"\", jsonName: String = \"\") Annotates generated Message fields with metadata for serialization and deserialization.","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/#properties","text":"Name Summary adapter val adapter: String Reference to the static field that holds a ProtoAdapter that can encode and decode this field\u2019s values. The reference is a string like com.squareup.wire.protos.person.Person#ADAPTER and contains a fully-qualified class name followed by a hash symbol and a field name. declaredName val declaredName: String Name of this field as declared in the proto schema. This value is set to a non-empty string only when the declared name differs from the generated one; for instance, a proto field named final generated in Java will be renamed to final_ . jsonName val jsonName: String Name representing this field as it should be used in JSON. This value is set to a non-empty string only when the json name differs from the name as declared in the proto schema. keyAdapter val keyAdapter: String Reference to the static field that holds a ProtoAdapter that can encode and decode this field\u2019s keys. This only applies to maps. See adapter for a description of the value format. label val label: Label The field\u2019s protocol buffer label, one of Label.OPTIONAL , Label.REQUIRED , Label.REPEATED , Label.PACKED , or Label.OMIT_IDENTITY . Defaults to Label.OPTIONAL . redacted val redacted: Boolean Redacted fields are omitted from toString() to protect sensitive data. Defaults to false. tag val tag: Int The tag number used to store the field\u2019s value.","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-init-/","text":"wire-runtime / com.squareup.wire / WireField / <init> <init> \u00b6 WireField(tag: Int , keyAdapter: String = \"\", adapter: String , label: Label = Label.OPTIONAL, redacted: Boolean = false, declaredName: String = \"\", jsonName: String = \"\") Annotates generated Message fields with metadata for serialization and deserialization.","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-init-/#init","text":"WireField(tag: Int , keyAdapter: String = \"\", adapter: String , label: Label = Label.OPTIONAL, redacted: Boolean = false, declaredName: String = \"\", jsonName: String = \"\") Annotates generated Message fields with metadata for serialization and deserialization.","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/adapter/","text":"wire-runtime / com.squareup.wire / WireField / adapter adapter \u00b6 val adapter: String Reference to the static field that holds a ProtoAdapter that can encode and decode this field\u2019s values. The reference is a string like com.squareup.wire.protos.person.Person#ADAPTER and contains a fully-qualified class name followed by a hash symbol and a field name.","title":"Adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/adapter/#adapter","text":"val adapter: String Reference to the static field that holds a ProtoAdapter that can encode and decode this field\u2019s values. The reference is a string like com.squareup.wire.protos.person.Person#ADAPTER and contains a fully-qualified class name followed by a hash symbol and a field name.","title":"adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/declared-name/","text":"wire-runtime / com.squareup.wire / WireField / declaredName declaredName \u00b6 val declaredName: String Name of this field as declared in the proto schema. This value is set to a non-empty string only when the declared name differs from the generated one; for instance, a proto field named final generated in Java will be renamed to final_ .","title":"Declared name"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/declared-name/#declaredname","text":"val declaredName: String Name of this field as declared in the proto schema. This value is set to a non-empty string only when the declared name differs from the generated one; for instance, a proto field named final generated in Java will be renamed to final_ .","title":"declaredName"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/json-name/","text":"wire-runtime / com.squareup.wire / WireField / jsonName jsonName \u00b6 val jsonName: String Name representing this field as it should be used in JSON. This value is set to a non-empty string only when the json name differs from the name as declared in the proto schema.","title":"Json name"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/json-name/#jsonname","text":"val jsonName: String Name representing this field as it should be used in JSON. This value is set to a non-empty string only when the json name differs from the name as declared in the proto schema.","title":"jsonName"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/key-adapter/","text":"wire-runtime / com.squareup.wire / WireField / keyAdapter keyAdapter \u00b6 val keyAdapter: String Reference to the static field that holds a ProtoAdapter that can encode and decode this field\u2019s keys. This only applies to maps. See adapter for a description of the value format.","title":"Key adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/key-adapter/#keyadapter","text":"val keyAdapter: String Reference to the static field that holds a ProtoAdapter that can encode and decode this field\u2019s keys. This only applies to maps. See adapter for a description of the value format.","title":"keyAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/label/","text":"wire-runtime / com.squareup.wire / WireField / label label \u00b6 val label: Label The field\u2019s protocol buffer label, one of Label.OPTIONAL , Label.REQUIRED , Label.REPEATED , Label.PACKED , or Label.OMIT_IDENTITY . Defaults to Label.OPTIONAL .","title":"Label"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/label/#label","text":"val label: Label The field\u2019s protocol buffer label, one of Label.OPTIONAL , Label.REQUIRED , Label.REPEATED , Label.PACKED , or Label.OMIT_IDENTITY . Defaults to Label.OPTIONAL .","title":"label"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/redacted/","text":"wire-runtime / com.squareup.wire / WireField / redacted redacted \u00b6 val redacted: Boolean Redacted fields are omitted from toString() to protect sensitive data. Defaults to false.","title":"Redacted"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/redacted/#redacted","text":"val redacted: Boolean Redacted fields are omitted from toString() to protect sensitive data. Defaults to false.","title":"redacted"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/tag/","text":"wire-runtime / com.squareup.wire / WireField / tag tag \u00b6 val tag: Int The tag number used to store the field\u2019s value.","title":"Tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/tag/#tag","text":"val tag: Int The tag number used to store the field\u2019s value.","title":"tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/","text":"wire-runtime / com.squareup.wire / WireField / Label Label \u00b6 enum class Label A protocol buffer label. Enum Values \u00b6 Name Summary REQUIRED OPTIONAL REPEATED ONE_OF PACKED Implies REPEATED . OMIT_IDENTITY Special label to defines proto3 fields which should not be emitted if their value is equal to their type\u2019s respective identity value. E.g.: a field of type int32 will not get emitted if its value is 0 . Properties \u00b6 Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/#label","text":"enum class Label A protocol buffer label.","title":"Label"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/#enum-values","text":"Name Summary REQUIRED OPTIONAL REPEATED ONE_OF PACKED Implies REPEATED . OMIT_IDENTITY Special label to defines proto3 fields which should not be emitted if their value is equal to their type\u2019s respective identity value. E.g.: a field of type int32 will not get emitted if its value is 0 .","title":"Enum Values"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/#properties","text":"Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-m-i-t_-i-d-e-n-t-i-t-y/","text":"wire-runtime / com.squareup.wire / WireField / Label / OMIT_IDENTITY OMIT_IDENTITY \u00b6 OMIT_IDENTITY Special label to defines proto3 fields which should not be emitted if their value is equal to their type\u2019s respective identity value. E.g.: a field of type int32 will not get emitted if its value is 0 . Inherited Properties \u00b6 Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":" o m i t  i d e n t i t y"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-m-i-t_-i-d-e-n-t-i-t-y/#omit_identity","text":"OMIT_IDENTITY Special label to defines proto3 fields which should not be emitted if their value is equal to their type\u2019s respective identity value. E.g.: a field of type int32 will not get emitted if its value is 0 .","title":"OMIT_IDENTITY"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-m-i-t_-i-d-e-n-t-i-t-y/#inherited-properties","text":"Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":"Inherited Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-n-e_-o-f/","text":"wire-runtime / com.squareup.wire / WireField / Label / ONE_OF ONE_OF \u00b6 ONE_OF Inherited Properties \u00b6 Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":" o n e  o f"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-n-e_-o-f/#one_of","text":"ONE_OF","title":"ONE_OF"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-n-e_-o-f/#inherited-properties","text":"Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":"Inherited Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-p-t-i-o-n-a-l/","text":"wire-runtime / com.squareup.wire / WireField / Label / OPTIONAL OPTIONAL \u00b6 OPTIONAL Inherited Properties \u00b6 Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":" o p t i o n a l"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-p-t-i-o-n-a-l/#optional","text":"OPTIONAL","title":"OPTIONAL"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-p-t-i-o-n-a-l/#inherited-properties","text":"Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":"Inherited Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-p-a-c-k-e-d/","text":"wire-runtime / com.squareup.wire / WireField / Label / PACKED PACKED \u00b6 PACKED Implies REPEATED . Inherited Properties \u00b6 Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":" p a c k e d"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-p-a-c-k-e-d/#packed","text":"PACKED Implies REPEATED .","title":"PACKED"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-p-a-c-k-e-d/#inherited-properties","text":"Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":"Inherited Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-r-e-p-e-a-t-e-d/","text":"wire-runtime / com.squareup.wire / WireField / Label / REPEATED REPEATED \u00b6 REPEATED Inherited Properties \u00b6 Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":" r e p e a t e d"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-r-e-p-e-a-t-e-d/#repeated","text":"REPEATED","title":"REPEATED"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-r-e-p-e-a-t-e-d/#inherited-properties","text":"Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":"Inherited Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-r-e-q-u-i-r-e-d/","text":"wire-runtime / com.squareup.wire / WireField / Label / REQUIRED REQUIRED \u00b6 REQUIRED Inherited Properties \u00b6 Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":" r e q u i r e d"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-r-e-q-u-i-r-e-d/#required","text":"REQUIRED","title":"REQUIRED"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-r-e-q-u-i-r-e-d/#inherited-properties","text":"Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":"Inherited Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/is-one-of/","text":"wire-runtime / com.squareup.wire / WireField / Label / isOneOf isOneOf \u00b6 val isOneOf: Boolean","title":"Is one of"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/is-one-of/#isoneof","text":"val isOneOf: Boolean","title":"isOneOf"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/is-packed/","text":"wire-runtime / com.squareup.wire / WireField / Label / isPacked isPacked \u00b6 val isPacked: Boolean","title":"Is packed"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/is-packed/#ispacked","text":"val isPacked: Boolean","title":"isPacked"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/is-repeated/","text":"wire-runtime / com.squareup.wire / WireField / Label / isRepeated isRepeated \u00b6 val isRepeated: Boolean","title":"Is repeated"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/is-repeated/#isrepeated","text":"val isRepeated: Boolean","title":"isRepeated"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/","text":"wire-runtime / com.squareup.wire / WireRpc WireRpc \u00b6 @Target([AnnotationTarget.FUNCTION]) annotation class WireRpc For gRPC actions the path is formatted as /<service name>/<method name> . The path of the proto service below is /squareup.helloworld.Greeter/SayHello . package squareup.helloworld; service Greeter { rpc SayHello (HelloRequest) returns (HelloReply) {} } Constructors \u00b6 Name Summary <init> WireRpc(path: String , requestAdapter: String , responseAdapter: String ) For gRPC actions the path is formatted as /<service name>/<method name> . The path of the proto service below is /squareup.helloworld.Greeter/SayHello . Properties \u00b6 Name Summary path val path: String requestAdapter val requestAdapter: String responseAdapter val responseAdapter: String","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/#wirerpc","text":"@Target([AnnotationTarget.FUNCTION]) annotation class WireRpc For gRPC actions the path is formatted as /<service name>/<method name> . The path of the proto service below is /squareup.helloworld.Greeter/SayHello . package squareup.helloworld; service Greeter { rpc SayHello (HelloRequest) returns (HelloReply) {} }","title":"WireRpc"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/#constructors","text":"Name Summary <init> WireRpc(path: String , requestAdapter: String , responseAdapter: String ) For gRPC actions the path is formatted as /<service name>/<method name> . The path of the proto service below is /squareup.helloworld.Greeter/SayHello .","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/#properties","text":"Name Summary path val path: String requestAdapter val requestAdapter: String responseAdapter val responseAdapter: String","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/-init-/","text":"wire-runtime / com.squareup.wire / WireRpc / <init> <init> \u00b6 WireRpc(path: String , requestAdapter: String , responseAdapter: String ) For gRPC actions the path is formatted as /<service name>/<method name> . The path of the proto service below is /squareup.helloworld.Greeter/SayHello . package squareup.helloworld; service Greeter { rpc SayHello (HelloRequest) returns (HelloReply) {} }","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/-init-/#init","text":"WireRpc(path: String , requestAdapter: String , responseAdapter: String ) For gRPC actions the path is formatted as /<service name>/<method name> . The path of the proto service below is /squareup.helloworld.Greeter/SayHello . package squareup.helloworld; service Greeter { rpc SayHello (HelloRequest) returns (HelloReply) {} }","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/path/","text":"wire-runtime / com.squareup.wire / WireRpc / path path \u00b6 val path: String","title":"Path"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/path/#path","text":"val path: String","title":"path"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/request-adapter/","text":"wire-runtime / com.squareup.wire / WireRpc / requestAdapter requestAdapter \u00b6 val requestAdapter: String","title":"Request adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/request-adapter/#requestadapter","text":"val requestAdapter: String","title":"requestAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/response-adapter/","text":"wire-runtime / com.squareup.wire / WireRpc / responseAdapter responseAdapter \u00b6 val responseAdapter: String","title":"Response adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/response-adapter/#responseadapter","text":"val responseAdapter: String","title":"responseAdapter"}]}